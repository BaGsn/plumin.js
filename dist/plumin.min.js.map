{"version":3,"file":"generated.js","sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/jsclipper/clipper_unminified.js","node_modules/opentype.js/dist/opentype.js","node_modules/paper/dist/paper-core.js","src/Collection.js","src/Font.js","src/Glyph.js","src/Node.js","src/Outline.js","src/Path.js","src/plumin.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","plumin","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"use_int32","use_xyz","use_lines","use_deprecated","ClipperLib","isNode","navigator_appName","nav","navigator","userAgent","toString","toLowerCase","appName","browser","indexOf","chrome","chromium","safari","firefox","firefox17","firefox15","firefox3","opera","msie10","msie9","msie8","msie7","msie","biginteger_used","dbits","canary","j_lm","BigInteger","b","c","fromInt","fromNumber","fromString","nbi","am1","x","w","j","v","Math","floor","am2","xl","xh","h","m","am3","prototype","am","DB","DM","DV","BI_FP","FV","pow","F1","F2","BI_RM","BI_RC","Array","rr","vv","charCodeAt","int2char","charAt","intAt","bnpCopyTo","bnpFromInt","nbv","bnpFromString","k","fromRadix","mi","sh","clamp","ZERO","subTo","bnpClamp","bnToString","negate","toRadix","km","d","p","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","max","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","abs","y","bnpSquareTo","bnpDivRemTo","q","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","d1","d2","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","Classic","cConvert","mod","cRevert","cReduce","cMulTo","multiplyTo","reduce","cSqrTo","squareTo","convert","revert","mulTo","sqrTo","bnpInvDigit","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","z","r2","bnModPowInt","isEven","exp","bitLength","modPowInt","bnClone","bnIntValue","bnByteValue","bnShortValue","bnpChunkSize","LN2","log","bnSigNum","bnpToRadix","signum","cs","chunkSize","intValue","substr","bnpFromRadix","dMultiply","dAddOffset","bnpFromNumber","testBit","bitwiseTo","shiftLeft","op_or","isProbablePrime","nextBytes","bnToByteArray","bnEquals","bnMin","bnMax","bnpBitwiseTo","op","op_and","bnAnd","bnOr","op_xor","bnXor","op_andnot","bnAndNot","bnNot","bnShiftLeft","bnShiftRight","lbit","bnGetLowestSetBit","cbit","bnBitCount","bnTestBit","bnpChangeBit","bnSetBit","changeBit","bnClearBit","bnFlipBit","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","bnSquare","bnDivide","bnRemainder","bnDivideAndRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","q3","mu","divide","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","barrettSqrTo","barrettMulTo","bnModPow","k1","g2","is1","bnGCD","clone","getLowestSetBit","bnpModInt","bnModInverse","ac","subtract","add","lowprimes","lplim","bnIsProbablePrime","modInt","millerRabin","bnpMillerRabin","n1","shiftRight","random","modPow","byteValue","shortValue","toByteArray","equals","and","or","xor","andNot","not","bitCount","setBit","clearBit","flipBit","multiply","remainder","divideAndRemainder","modInverse","gcd","square","Int128","IsNegative","op_Equality","val1","val2","op_Inequality","op_GreaterThan","op_LessThan","op_Addition","lhs","rhs","op_Subtraction","Int128Mul","op_Division","ToDouble","parseFloat","Inherit","ce","ce2","Object","$baseCtor","props","getOwnPropertyNames","getOwnPropertyDescriptor","defineProperty","Path","Paths","DoublePoint","arguments","X","Y","DoublePoint0","DoublePoint1","dp","DoublePoint2","PolyNode","m_Parent","m_polygon","m_Index","m_jointype","m_endtype","m_Childs","IsOpen","IsHoleNode","result","node","ChildCount","Contour","AddChild","Child","cnt","push","GetNext","GetNextSiblingUp","Childs","Parent","IsHole","PolyTree","m_AllPolys","Clear","ilen","GetFirst","Total","Math_Abs_Int64","Math_Abs_Int32","Math_Abs_Double","Math_Max_Int32_Int32","Cast_Int32","Cast_Int64","ceil","Number","toInteger","parseInt","PI","PI2","IntPoint","alen","Z","Clipper","Round","IntPoint0","IntPoint1","IntPoint1dp","IntPoint2","IntPoint3","IntRect","left","top","right","bottom","ir","IntRect0","IntRect1","IntRect4","ClipType","ctIntersection","ctUnion","ctDifference","ctXor","PolyType","ptSubject","ptClip","PolyFillType","pftEvenOdd","pftNonZero","pftPositive","pftNegative","JoinType","jtSquare","jtRound","jtMiter","EndType","etOpenSquare","etOpenRound","etOpenButt","etClosedLine","etClosedPolygon","EndType_","etSquare","etRound","etButt","etClosed","EdgeSide","esLeft","esRight","Direction","dRightToLeft","dLeftToRight","TEdge","Bot","Curr","Top","Delta","Dx","PolyTyp","Side","WindDelta","WindCnt","WindCnt2","OutIdx","Next","Prev","NextInLML","NextInAEL","PrevInAEL","NextInSEL","PrevInSEL","IntersectNode","Edge1","Edge2","Pt","MyIntersectNodeSort","Compare","node1","node2","LocalMinima","LeftBound","RightBound","Scanbeam","OutRec","Idx","FirstLeft","Pts","BottomPt","OutPt","Join","OutPt1","OutPt2","OffPt","ClipperBase","m_MinimaList","m_CurrentLM","m_edges","m_UseFullRange","m_HasOpenPaths","PreserveCollinear","horizontal","Skip","Unassigned","tolerance","loRange","hiRange","near_zero","val","IsHorizontal","PointIsVertex","pp","pp2","PointOnLineSegment","linePt1","linePt2","UseFullRange","PointOnPolygon","SlopesEqual","e1","e2","pt1","pt2","pt3","pt4","SlopesEqual3","SlopesEqual4","SlopesEqual5","DisposeLocalMinimaList","jlen","tmpLm","RangeTest","useFullRange","Value","InitEdge","eNext","ePrev","InitEdge2","polyType","SetDx","FindNextLocMin","E","E2","ProcessBound","IsClockwise","EStart","Result","Horz","StartX","ReverseHorizontal","locMin","InsertLocalMinima","AddPath","pg","Closed","highI","edges","IsFlat","$1","eStart","eLoopStop","RemoveEdge","Pt2IsBetweenPt1AndPt3","eHighest","clockwise","EMin","AddPaths","ppg","closed","newLm","PopLocalMinima","tmp","Reset","lm","InitOptions","m_PolyOuts","m_ClipType","m_Scanbeam","m_ActiveEdges","m_SortedEdges","m_IntersectList","m_IntersectNodeComparer","m_ExecuteLocked","m_ClipFillType","m_SubjFillType","m_Joins","m_GhostJoins","m_UsingPolyTree","ReverseSolution","StrictlySimple","ZFillFunction","ioReverseSolution","ioStrictlySimple","ioPreserveCollinear","DisposeAllPolyPts","DisposeScanbeamList","sb2","InsertScanbeam","newSb","Execute","ispolytree","clipType","solution","subjFillType","clipFillType","succeeded","ExecuteInternal","BuildResult","polytree","BuildResult2","FixHoleLinkage","outRec","orfl","botY","PopScanbeam","InsertLocalMinimaIntoAEL","ProcessHorizontals","topY","ProcessIntersections","ProcessEdgesAtTopOfScanbeam","Area","ReversePolyPtLinks","JoinCommonEdges","FixupOutPolygon","DoSimplePolygons","DisposeOutRec","index","DisposeOutPts","tmpPp","AddJoin","Op1","Op2","AddGhostJoin","Op","SetZ","lb","rb","InsertEdgeIntoAEL","SetWindingCount","IsContributing","AddOutPt","AddLocalMinPoly","AddEdgeToSEL","HorzSegmentsOverlap","IntersectEdges","edge","startEdge","E2InsertsBeforeE1","TopX","IsEvenOddFillType","IsEvenOddAltFillType","pft","pft2","Inside","CopyAELToSEL","SwapPositionsInAEL","edge1","edge2","next","prev","SwapPositionsInSEL","AddLocalMaxPoly","AppendPolygon","prevE","outPt","CreateOutRec","ToFront","newOp","SetHoleState","SwapPoints","Pt1a","Pt1b","Pt2a","Pt2b","InsertPolyPtBetween","p1","p2","isHole","GetDx","FirstIsBottomPt","btmPt1","btmPt2","dx1p","dx1n","dx2p","dx2n","GetBottomPt","dups","GetLowermostRec","outRec1","outRec2","bPt1","bPt2","Param1RightOfParam2","GetOutRec","idx","outrec","holeStateRec","p1_lft","p1_rt","p2_lft","p2_rt","side","OKIdx","ObsoleteIdx","pp1","SwapSides","SwapPolyIndexes","outIdx","protect","e1stops","e2stops","e1Contributing","e2Contributing","DeleteFromAEL","oldE1WindCnt","e1FillType","e2FillType","e1FillType2","e2FillType2","e1Wc","e2Wc","e1Wc2","e2Wc2","AelPrev","AelNext","DeleteFromSEL","SelPrev","SelNext","UpdateEdgeIntoAEL","isTopOfScanbeam","horzEdge","ProcessHorizontal","GetHorzDirection","HorzEdge","$var","Left","Right","Dir","PrepareHorzJoins","dir","horzLeft","horzRight","eLastHorz","eMaxPair","GetMaximaPair","IsLastHorz","GetNextInAEL","op1","op2","IsMinima","IsMaxima","IsIntermediate","BuildIntersectList","FixupIntersectionOrder","ProcessIntersectList","$$e2","isModified","IntersectPoint","newNode","EdgesAdjacent","inode","IntersectNodeSort","sort","iNode","R1","round","R2","R3","R4","currentY","ip","b1","b2","IsMaximaEdge","DoMaxima","ReversePaths","polys","len","reverse","Orientation","poly","PointCount","pts","polyg","pn","lastOK","DupOutPt","InsertAfter","GetOverlap","a1","a2","$val","JoinHorz","op1b","op2b","DiscardLeft","Dir1","Dir2","JoinPoints","isHorizontal","reverse1","reverse2","DiscardLeftSide","Reverse1","Reverse2","GetBounds","paths","GetBounds2","ops","opStart","PointInPolygon","path","ipNext","startOp","poly0x","poly0y","poly1x","poly1y","Poly2ContainsPoly1","outPt1","outPt2","res","FixupFirstLefts1","OldOutRec","NewOutRec","FixupFirstLefts2","$i2","$t2","$l2","ParseFirstLeft","join","UpdateOutPtIdxs","oRec","op3","op4","outrec2","OffsetPaths","delta","jointype","endtype","MiterLimit","co","ClipperOffset","SimplifyPolygon","fillType","SimplifyPolygons","DistanceSqrd","dx","dy","DistanceFromLineSqrd","ln1","ln2","A","B","C","SlopesNearCollinear","distSqrd","PointsAreClose","ExcludeOp","CleanPolygon","distance","outPts","CleanPolygons","Minkowski","pattern","IsSum","IsClosed","polyCnt","pathCnt","quads","quad","MinkowskiSum","pathIsClosed","pathFillType","MinkowskiDiff","PolyTreeToPaths","AddPolyNodeToPaths","NodeType","ntAny","polynode","nt","match","ntOpen","ntClosed","$i3","$t3","$l3","OpenPathsFromPolyTree","ClosedPathsFromPolyTree","miterLimit","arcTolerance","def_arc_tolerance","m_destPolys","m_srcPoly","m_destPoly","m_normals","m_delta","m_sinA","m_sin","m_cos","m_miterLim","m_StepsPerRad","m_lowest","m_polyNodes","ArcTolerance","two_pi","joinType","endType","FixOrientations","GetUnitNormal","sqrt","DoOffset","steps","acos","sin","cos","X2","OffsetPoint","DoSquare","DoRound","clpr","outer","splice","outerNode","DoMiter","tan","atan2","message","err","alert","JS","AreaOfPolygon","scale","AreaOfPolygons","area","BoundsOfPath","BoundsOfPaths","bounds","Clean","polygon","isPolygons","Clone","k_length","results","plen","Lighten","poly2","P","rem","addlast","bxax","byay","ax","ay","toleranceSq","pop","PerimeterOfPath","perimeter","p1x","p1y","p2x","p2y","PerimeterOfPaths","ScaleDownPath","ScaleDownPaths","ScaleUpPath","ScaleUpPaths","ExPolygons","ExPolygon","holes","AddOuterPolyNodeToExPolygons","expolygons","ep","childs","childs2","ExPolygonsToPaths","PolyTreeToExPolygons","opentype","argument","predicate","assert",2,"line","ctx","x1","y1","x2","y2","beginPath","moveTo","lineTo","stroke",3,"cffStandardStrings","cffStandardEncoding","cffExpertEncoding","standardNames","DefaultEncoding","font","charToGlyphIndex","glyphs","glyph","unicodes","CmapEncoding","cmap","glyphIndexMap","CffEncoding","encoding","charset","charName","GlyphNames","post","version","names","slice","numberOfGlyphs","glyphNameIndex","nameToGlyphIndex","name","glyphIndexToName","gid","addGlyphNames","tables","charCodes","keys","glyphIndex","addUnicode","cffEncoding","glyphNames",4,"sfnt","Font","options","familyName","styleName","designer","designerURL","manufacturer","manufacturerURL","license","licenseURL","description","copyright","trademark","unitsPerEm","ascender","descender","supported","hasChar","charToGlyph","stringToGlyphs","nameToGlyph","nametoGlyphIndex","getKerningValue","leftGlyph","rightGlyph","gposKerning","getGposKerningValue","kerningPairs","forEachGlyph","text","fontSize","callback","undefined","kerning","fontScale","advanceWidth","kerningValue","getPath","fullPath","gX","gY","gFontSize","glyphPath","extend","draw","drawPoints","drawMetrics","validate","warnings","_this","assertStringAttribute","attrName","trim","toTables","fontToTable","toBuffer","sfntTable","bytes","encode","buffer","ArrayBuffer","intArray","Uint8Array","download","fileName","replace","requestFileSystem","webkitRequestFileSystem","TEMPORARY","byteLength","fs","root","getFile","create","fileEntry","createWriter","writer","dataView","DataView","blob","Blob","type","write","addEventListener","location","href","toURL","./encoding","./path","./tables/sfnt",5,"check","Glyph","unicode","xMin","yMin","xMax","yMax","commands","cmd","quadraticCurveTo","curveTo","closePath","getContours","points","contours","currentContour","lastPointOfContour","getMetrics","xCoords","yCoords","metrics","apply","leftSideBearing","rightSideBearing","drawCircles","PI_SQ","arc","fill","blueCircles","redCircles","fillStyle","lineWidth","strokeStyle","./check","./draw",6,"_font","parse","cff","glyf","gpos","head","hhea","hmtx","kern","loca","maxp","_name","os2","toArrayBuffer","arrayBuffer","data","loadFromFile","readFile","loadFromUrl","url","request","XMLHttpRequest","open","responseType","onload","status","statusText","response","send","parseBuffer","indexToLocFormat","hmtxOffset","glyfOffset","locaOffset","cffOffset","kernOffset","gposOffset","getFixed","outlinesFormat","getTag","numTables","getUShort","tag","offset","getULong","numberOfHMetrics","numGlyphs","fontFamily","fontSubfamily","shortVersion","locaTable","load","loadFn","_parse","./font","./glyph","./parse","./tables/cff","./tables/cmap","./tables/glyf","./tables/gpos","./tables/head","./tables/hhea","./tables/hmtx","./tables/kern","./tables/loca","./tables/maxp","./tables/name","./tables/os2","./tables/post",7,"getByte","getUint8","getCard8","getUint16","getCard16","getShort","getInt16","getUint32","decimal","fraction","String","fromCharCode","getInt8","getOffset","offSize","getBytes","startOffset","endOffset","bytesToString","typeOffsets","byte","uShort","short","uLong","fixed","longDateTime","Parser","relativeOffset","parseByte","parseChar","parseCard8","parseUShort","parseCard16","parseSID","parseOffset16","parseShort","parseF2Dot14","parseULong","parseFixed","parseOffset16List","parseUShortList","count","offsets","parseString","string","parseTag","parseLongDateTime","parseVersion","major","minor","skip","amount",8,"strokeWidth","bezierCurveTo","quadTo","close","pathOrCommands","toPathData","decimalPlaces","floatToString","toFixed","packValues","toSVG","svg",9,"sizeOf","Table","tableName","fields","field","value","optionKeys","sizeOfFunction","TABLE","./types",10,"_glyph","table","isArray","parseCFFIndex","start","conversionFn","objects","objectOffset","offsetSize","pos","parseFloatOperand","parser","eof","lookup","n2","parseOperand","b0","b3","b4","entriesToObject","entries","key","values","hasOwnProperty","parseCFFDict","size","operands","getCFFString","strings","interpretDict","dict","meta","newDict","parseCFFHeader","header","formatMajor","formatMinor","TOP_DICT_META","PRIVATE_DICT_META","parseCFFTopDict","parseCFFPrivateDict","parseCFFCharset","nGlyphs","sid","format","parseCFFEncoding","enc","nCodes","nRanges","first","nLeft","parseCFFCharstring","c1x","c1y","c2x","c2y","stack","nStems","haveWidth","width","defaultWidthX","newContour","parseStems","hasWidthArg","shift","nominalWidthX","codeIndex","subrCode","jpx","jpy","c3x","c3y","c4x","c4y","subrsBias","subrs","console","gsubrsBias","gsubrs","calcCFFSubroutineBias","bias","parseCFFTable","nameIndex","topDictIndex","stringIndex","globalSubrIndex","topDictData","topDict","privateDictOffset","privateDict","subrOffset","subrIndex","charStringsIndex","charStrings","charString","encodeString","makeHeader","makeNameIndex","fontNames","makeDict","attrs","entry","makeTopDict","makeTopDictIndex","topDicts","makeStringIndex","makeGlobalSubrIndex","makeCharsets","glyphName","glyphSID","glyphToOps","_13","_23","dx1","dy1","dx2","dy2","makeCharStringsIndex","makePrivateDict","makePrivateDictIndex","privateDicts","makeCFFTable","fullName","weight","weightName","private","privateAttrs","postScriptName","charsets","privateDictIndex","make","../encoding","../glyph","../parse","../path","../table",11,"parseCmapTable","platformId","encodingId","language","segCount","endCountParser","startCountParser","idDeltaParser","idRangeOffsetParser","glyphIndexOffset","endCount","startCount","idDelta","idRangeOffset","addSegment","segments","end","addTerminatorSegment","makeCmapTable","segCountX2","searchRange","entrySelector","rangeShift","endCounts","startCounts","idDeltas","idRangeOffsets","glyphIds","segment","concat","glyphId","../check",12,"parseGlyphCoordinate","flag","previousValue","shortVectorBitMask","sameBitMask","parseGlyph","numberOfContours","flags","endPointIndices","instructionLength","instructions","numberOfCoordinates","repeatCount","point","onCurve","px","py","isComposite","components","moreComponents","component","xScale","scale01","scale10","yScale","transformPoints","transform","newPoints","newPt","contour","firstPt","lastPt","curvePt","realFirstPoint","prevPt","midPt","parseGlyfTable","nextOffset","componentGlyph","transformedPoints",13,"parseTaggedListTable","list","parseCoverageTable","coverage","begin","parseClassDefTable","startGlyph","glyphCount","classes","glyphID","rangeCount","startGlyphs","endGlyphs","classValues","parsePairPosSubTable","coverageOffset","valueFormat1","valueFormat2","value1","value2","sharedPairSets","pairSetCount","pairSet","pairSetOffsets","firstGlyph","pairSetOffset","sharedPairSet","pairValueCount","secondGlyph","pairs","classDef1Offset","classDef2Offset","class1Count","class2Count","getClass1","getClass2","kerningMatrix","kerningRow","covered","class1","class2","parseLookupTable","lookupType","lookupFlag","useMarkFilteringSet","subTableCount","subTableOffsets","markFilteringSet","subtables","parseGposTable","tableVersion","lookupListOffset","lookupCount","lookupTableOffsets","lookupListAbsoluteOffset",14,"parseHeadTable","fontRevision","checkSumAdjustment","magicNumber","created","modified","macStyle","lowestRecPPEM","fontDirectionHint","glyphDataFormat","makeHeadTable",15,"parseHheaTable","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","caretOffset","metricDataFormat","makeHheaTable",16,"parseHmtxTable","numMetrics","makeHmtxTable",17,"parseKernTable","subTableVersion","nPairs","leftIndex","rightIndex",18,"parseLocaTable","parseFn","glyphOffsets","glyphOffset",19,"parseMaxpTable","maxPoints","maxContours","maxCompositePoints","maxCompositeContours","maxZones","maxTwilightPoints","maxStorage","maxFunctionDefs","maxInstructionDefs","maxStackElements","maxSizeOfInstructions","maxComponentElements","maxComponentDepth","makeMaxpTable",20,"nameTableNames","parseNameTable","stringOffset","unknownCount","platformID","encodingID","languageID","nameID","property","codePoints","str","langTagCount","makeNameRecord","addMacintoshNameRecord","recordID","stringBytes","STRING","records","addWindowsNameRecord","utf16Bytes","UTF16","makeNameTable","../types",21,"unicodeRanges","getUnicodeRange","range","parseOS2Table","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","ulUnicodeRange1","ulUnicodeRange2","ulUnicodeRange3","ulUnicodeRange4","achVendID","fsSelection","usFirstCharIndex","usLastCharIndex","sTypoAscender","sTypoDescender","sTypoLineGap","usWinAscent","usWinDescent","ulCodePageRange1","ulCodePageRange2","sxHeight","sCapHeight","usDefaultChar","usBreakChar","usMaxContent","makeOS2Table",22,"parsePostTable","italicAngle","underlinePosition","underlineThickness","isFixedPitch","minMemType42","maxMemType42","minMemType1","maxMemType1","nameLength","makePostTable",23,"log2","computeCheckSum","sum","makeTableRecord","checkSum","makeSfntTable","highestPowerOf2","recordFields","tableFields","tableLength","tableRecord","isNaN","r1","metricsForChar","chars","notFoundMetrics","average","vs","fontToSfntTable","xMins","yMins","xMaxs","yMaxs","advanceWidths","leftSideBearings","rightSideBearings","firstCharIndex","lastCharIndex","position","globals","advanceWidthAvg","maxLeftSideBearing","headTable","hheaTable","maxpTable","os2Table","hmtxTable","cmapTable","nameTable","uniqueID","preferredFamily","preferredSubfamily","postTable","cffTable","checkSumAdjusted","./cff","./cmap","./head","./hhea","./hmtx","./maxp","./name","./os2","./post",24,"LIMIT16","LIMIT32","decode","constant","BYTE","CHAR","CHARARRAY","USHORT","SHORT","UINT24","ULONG","LONG","FIXED","FWORD","UFWORD","LONGDATETIME","TAG","Card8","Card16","OffSize","SID","NUMBER","NUMBER16","NUMBER32","NAME","INDEX","dataSize","OBJECT","encodedOffsets","offsetEncoder","encodedOffset","DICT","OPERAND","OPERATOR","OP","wmm","WeakMap","CHARSTRING","has","get","set","encodingFunction","LITERAL","paper","noCanvas","process","WorkerGlobalScope","Base","hidden","forEach","iter","bind","forIn","proto","__proto__","describe","obj","__lookupGetter__","__lookupSetter__","enumerable","configurable","writable","_define","desc","__defineGetter__","__defineSetter__","inject","dest","src","beans","preserve","beansNames","substring","isFunc","bean","base","isPlainObject","test","part","each","getLength","exclude","statics","ctor","initialize","constructor","pick","_id","_class","Formatter","instance","number","getClassName","exportJSON","toJSON","serialize","_set","dontCheck","orig","_filtering","obj1","obj2","checkKeys","o1","o2","read","peek","__index","readIndex","_readIndex","readNull","__read","remain","readAll","readNamed","getNamed","hasObject","filtered","_filtered","arg","_hasObject","hasNamed","isPlainValue","asString","compact","dictionary","formatter","precision","definitions","references","item","id","ref","unshift","_serialize","_compact","deserialize","json","_data","isRoot","isDictionary","args","JSON","stringify","importJSON","target","isTarget","Item","Layer","insert","items","remove","append","_index","removed","capitalize","toUpperCase","camelize","all","chr","hyphenate","Emitter","on","func","_eventTypes","handlers","_callbacks","install","off","uninstall","once","emit","event","stop","responds","attach","detach","fire","_installEvents","events","_events","types","isString","PaperScope","settings","applyMatrix","handleSize","hitTolerance","project","projects","tools","palettes","_scopes","support","CanvasProvider","getContext","nativeDash","nativeBlendModes","BlendMode","nativeModes","release","v1","v2","rv","versionNumber","webkit","atom","getView","getPaper","execute","PaperScript","View","updateFocus","scope","that","setup","element","Project","activate","clear","handleAttribute","el","attr","getAttribute","hasAttribute","PaperScopeItem","_scope","_list","_reference","isActive","multiplier","pair","separator","height","rectangle","Numerical","abscissas","weights","TOLERANCE","EPSILON","MACHINE_EPSILON","KAPPA","isZero","integrate","Ax","findRoot","df","fx","nx","solveQuadratic","roots","Infinity","D","gmC","mult","LOG10E","isFinite","R","solveCubic","c2","ec","x0","Point","arg0","arg1","hasY","angle","setAngle","setLength","_angle","getAngle","getAngleInRadians","setAngleInRadians","getAngleInDegrees","setAngleInDegrees","div","NaN","dot","getQuadrant","getDirectedAngle","cross","getDistance","squared","normalize","current","rotate","center","matrix","_transformPoint","modulo","isInside","Rectangle","contains","isClose","isColinear","isOrthogonal","point1","point2","LinkedPoint","owner","setter","_x","_y","_owner","_setter","_dontNotify","getX","setX","getY","setY","Size","hasHeight","size1","size2","LinkedSize","_width","_height","getWidth","setWidth","getHeight","setHeight","arg2","arg3","from","to","rect","rt","getPoint","_dontLink","setPoint","getSize","setSize","_fixX","_fixY","_fixW","_fixH","getLeft","setLeft","getTop","setTop","getRight","setRight","getBottom","setBottom","getCenterX","setCenterX","getCenterY","setCenterY","getCenter","setCenter","getArea","isEmpty","_containsRectangle","_containsPoint","intersects","touches","intersect","unite","include","expand","hor","ver","parts","xFirst","LinkedRectangle","internal","isSelected","_boundsSelected","setSelected","selected","_selectedSegmentState","Matrix","ok","_a","_c","_b","_d","_tx","_ty","reset","tx","ty","_changed","getValues","_applyMatrix","mx","recursively","_setApplyMatrix","isIdentity","translate","shear","skew","toRadians","concatenate","c1","tx2","ty2","preConcatenate","tx1","ty1","chain","orNullIfIdentity","isInvertible","_getDeterminant","isSingular","dst","_transformCoordinates","_transformCorners","coords","_transformBounds","inverseTransform","_inverseTransform","det","decompose","scaleX","scaleY","scaling","rotation","shearing","getTranslation","getScaling","getRotation","inverted","shiftless","applyToContext","prop","Line","arg4","asVector","_px","_py","_vx","_vy","getVector","isInfinite","getSide","getSignedDistance","apx","apy","avx","avy","bpx","bpy","bvx","bvy","ta","tb","vx","vy","v2x","v2y","ccw","layers","_activeLayer","symbols","_currentStyle","Style","_view","getCanvas","_selectedItems","_selectedItemCount","_updateVersion","getCurrentStyle","setCurrentStyle","style","getIndex","getOptions","getActiveLayer","getSelectedItems","isInserted","insertChild","_preserve","_remove","_setProject","_changes","NO_INSERT","addChild","_updateSelection","selectedItems","_selected","selectAll","setFullySelected","deselectAll","hitTest","HitResult","_hitTest","getItems","_getItems","getItem","layer","pixelRatio","save","param","viewMatrix","matrices","updateMatrix","restore","_drawSelection","Symbol","dontCenter","setDefinition","_definition","_clearBoundsCache","_needsUpdate","getDefinition","_dontCenter","_parentSymbol","setPosition","place","PlacedSymbol","symbol","definition","_serializeFields","_canApplyMatrix","_selectChildren","pivot","locked","visible","blendMode","opacity","guide","clipMask","_initialize","hasProps","_matrix","_style","_project","parent","setParent","mouseFlags","mousedown","mousedrag","click","doubleclick","mouseup","mousemove","mouseenter","mouseleave","mouseEvent","counters","_eventCounters","onFrame","_animateItem","onLoad","animate","Group","_defaults","cacheParent","_parent","_bounds","_position","_decomposed","_globalMatrix","_currentPath","_changesById","getId","getName","setName","unique","_removeNamed","children","_children","namedChildren","_namedChildren","getStyle","setStyle","_locked","_visible","_blendMode","_opacity","_guide","noChildren","isFullySelected","isClipMask","_clipMask","setClipMask","setFillColor","setStrokeColor","getData","setData","getPosition","_pivot","getBounds","getPivot","setPivot","getRegistration","setRegistration","getter","internalGetter","boundsGetter","_boundsGetter","_getCachedBounds","_getBounds","cacheItem","child","setBounds","cache","_boundsCache","ids","cached","_internal","other","_decompose","decomposed","setRotation","setScaling","getMatrix","setMatrix","getGlobalMatrix","_dontClone","updateVersion","getApplyMatrix","setApplyMatrix","getTransformContent","setTransformContent","getProject","installEvents","getLayer","getParent","getChildren","setChildren","removeChildren","addChildren","getFirstChild","getLastChild","getNextSibling","getPreviousSibling","_equals","_clone","copy","insertAbove","itemOrProject","rasterize","resolution","getStrokeBounds","getResolution","topLeft","getTopLeft","bottomRight","getBottomRight","canvas","raster","Raster","setCanvas","_contains","getInternalBounds","_asPathItem","getIntersections","guides","parentTotalMatrix","_totalMatrix","view","totalMatrix","tolerancePadding","_tolerancePadding","_getPenPadding","getInternalRoughBounds","checkSelf","class","checkBounds","opts","_getChildHitTestOptions","_hitTestSelf","hasFill","matches","compare","matchObject","RegExp","firstOnly","overlapping","inside","childMatrix","insertChildren","_proto","notifySelf","_insertSibling","insertBelow","sendToBack","bringToFront","appendTop","appendBottom","moveAbove","moveBelow","namedArray","notifyParent","replaceWith","reverseChildren","isEditable","hasStroke","hasShadow","_getOrder","getList","list1","list2","hasChildren","isAbove","isBelow","isParent","isChild","isDescendant","isAncestor","isGroupedWith","_applyRecursively","_transformContent","fillColor","getFillColor","strokeColor","getStrokeColor","decomp","applyRecursively","globalToLocal","localToGlobal","parentToLocal","localToParent","fitBounds","itemRatio","rectRatio","newBounds","_setStyles","shadowColor","getShadowColor","toCanvasStyle","getStrokeWidth","strokeJoin","getStrokeJoin","strokeCap","getStrokeCap","getMiterLimit","lineJoin","lineCap","dashArray","getDashArray","dashOffset","getDashOffset","setLineDash","lineDashOffset","mozDash","mozDashOffset","shadowBlur","getShadowBlur","getShadowOffset","shadowOffsetX","shadowOffsetY","parentStrokeMatrix","globalMatrix","getViewMatrix","normalBlend","nativeBlend","direct","dontStart","clip","_canComposite","mainCtx","itemOffset","prevOffset","strokeMatrix","getStrokeScaling","clipItem","globalAlpha","globalCompositeOperation","setTransform","_draw","dontFinish","_isUpdated","CompoundPath","updated","_drawSelected","color","getSelectedColor","half","fillRect","hash","removeOn","sets","_removeSets","_clipItem","_getClipItem","isClipped","setClipped","clipped","currentPath","Shape","radius","_type","_size","_radius","setType","setRadius","getType","getShape","setShape","getRadius","rad","toPath","dontPaint","untransformed","isCircle","rx","ry","kappa","cx","cy","getWindingRule","getCornerCenter","halfSize","corner","getEllipseRadius","hit","inner","createShape","Circle","Ellipse","ellipse","_readEllipse","source","object","setSource","setImage","_loaded","getSource","image","_image","_canvas","copyCanvas","drawImage","getElement","getPpi","getImage","complete","naturalWidth","naturalHeight","_context","modify","setContext","context","toDataURL","loaded","update","document","getElementById","Image","setTimeout","DomEvent","getSubCanvas","getSubRaster","getAverageColor","PathItem","sampleSize","_sampleContext","clearRect","pixels","getImageData","channels","total","alpha","Color","getPixel","setPixel","_convert","_alpha","imageData","createImageData","putImageData","setImageData","setSymbol","_symbol","getSymbol","handles","ends","Segment","arg5","handleIn","handleOut","SegmentPoint","isLinear","_point","_handleIn","_handleOut","_path","curves","_curves","curve","_closed","getHandleIn","setHandleIn","getHandleOut","setHandleOut","setLinear","linear","next1","getNext","next2","getPrevious","isArc","handle1","handle2","_selectionState","state","oldState","getCurve","_segments","getCurves","getLocation","CurveLocation","_segment1","removeSegment","interpolate","segment0","segment1","coef","dxPoint","dyPoint","dxHandleIn","dyHandleIn","dxHandleOut","dyHandleOut","change","Curve","arg6","arg7","_segment2","segment2","_length","getPoint1","setPoint1","getPoint2","setPoint2","getHandle1","setHandle1","getHandle2","setHandle2","getSegment1","getSegment2","getPoints","getPart","getPartLength","filterIntersections","_getParameter","isParameter","parameter","getParameterAt","ignoreLinear","subdivide","split","h1","h2","evaluate","bx","by","p3x","p3y","p4x","p4y","p5x","p5y","p6x","p6y","p7x","p7y","p8x","p8y","coord","getParameterOf","txs","tys","sx","sy","isFlatEnough","ux","uy","getEdgeSum","_addBounds","v0","v3","padding","tMin","tMax","getLocationAt","getLocationOf","getOffsetOf","loc","getNearestLocation","minDist","minT","refine","dist","step","getNearestPoint","getLengthIntegrand","getIterations","forward","rangeLength","guess","addLocation","locations","curve1","t1","curve2","t2","addCurveIntersections","uMin","uMax","oldTDiff","recursion","q0x","q0y","q3x","q3y","factor","dMin","dMax","dp0","dp1","dp2","dp3","tMinNew","tMaxNew","tDiff","hull","getConvexHull","tMinClip","tMaxClip","clipConvexHull","dq0","dq1","dq2","dq3","p0","p3","dist1","dist2","flip","pmax","distZero","hullTop","hullBottom","clipConvexHullPart","threshold","qx","qy","addCurveLineIntersections","vc","vl","lx1","ly1","lx2","ly2","ldx","ldy","rlx2","rvl","rvc","tc","tl","addLineIntersection","linear1","linear2","c1p1","c1p2","c2p1","c2p2","_expand","last","_curve","_curve2","_parameter","_parameter2","loc1","loc2","path1","path2","getParameter","getIntersection","_point2","_distance","getSegment","_preferFirst","_segment","_uncached","intersection","_intersection","_getOffset","getCurveOffset","getPointAt","curves1","curves2","matrix1","matrix2","length1","length2","values2","values1","seg1","seg2","setPathData","relative","previous","control","getCoord","command","lower","move","cubicCurveTo","arcTo","winding","_getWinding","setSegments","_clockwise","_monoCurves","getSegments","fullySelected","_add","getFirstSegment","getLastSegment","_countCurves","getFirstCurve","getLastCurve","isClosed","setClosed","getPathData","_precision","curX","curY","prevX","prevY","inX","inY","outX","outY","skipLine","isPolygon","segs","_adjustCurves","insertSegment","addSegments","insertSegments","removeSegments","_includeCurves","_selectSegments","newState","flatten","maxDistance","iterator","PathIterator","simplify","fitter","PathFitter","fit","isClockwise","setClockwise","last1","last2","first2","first1","path0","toShape","topCenter","shape","numSegments","strokePadding","cap","hitStroke","hitFill","hitCurves","isCloseEnough","checkSegmentPoint","seg","anchor","checkSegmentPoints","addToArea","checkSegmentStroke","_addBevelJoin","_addSquareCap","minLoc","drawHandles","drawHandle","hX","hY","pX","pY","drawSegments","drawSegment","handle","dashLength","drawPart","getFirstControlPoints","smooth","overlap","knots","f1","f2","ie","je","getCurrentSegment","moveBy","through","extent","vector","middle","large","epsilon","rxSq","rySq","xSq","ySq","l1","l2","throughSide","centerSide","ext","inc","out","_in","lineBy","curveBy","cubicCurveBy","quadraticCurveBy","arcBy","prevCoords","processSegment","joinBounds","addRound","addJoin","addCap","phi","atan","addPoint","normal1","getNormalAt","normal2","normal","getNormal","getHandleBounds","joinPadding","paddingX","paddingY","xn","xx","yn","yx","getRoughBounds","strokeRadius","joinRadius","ellipseSegments","createPath","createEllipse","bl","getBottomLeft","tr","getTopRight","br","hx","hy","RoundRectangle","Oval","Arc","RegularPolygon","sides","three","Star","radius1","radius2","compoundpath0","compoundpath1","getCurrentPath","operators","computeBoolean","operation","operator","preparePath","reorient","_path1","_path2","splitPath","monoCurves","collect","_getMonoCurves","_winding","startSeg","totalLength","windingSum","curveLength","getTangentAt","getWinding","tracePaths","intersections","linearHandles","resetLinear","newCurve","testContains","windLeft","windRight","yTop","yBottom","yBefore","yAfter","xBefore","xAfter","prevT","slope","selfOp","_visited","inter","startInterSeg","added","interSeg","c4","c3","t3","t4","w3","w4","nextCurve","nextSeg","firstSegment","lastSegment","prevCurve","insertCurve","handleCurve","y3","getInteriorPoint","xIntercepts","maxRecursion","minDifference","addCurve","computeParts","maxT","halfT","prevVal","prevLen","error","fitCubic","tan1","tan2","uPrime","chordLengthParameterize","maxError","generateBezier","findMaxError","reparameterize","V1","V2","tanCenter","detC0C1","alpha1","alpha2","detC0X","detXC1","c0","segLength","diff","degree","maxDist","TextItem","content","_content","_lines","setContent","getContent","getCharacterStyle","setCharacterStyle","getParagraphStyle","setParagraphStyle","PointText","lines","leading","getLeading","getFontStyle","textAlign","getJustification","fillText","strokeText","numLines","justification","getTextWidth","gray","rgb","hsb","hsl","gradient","componentParsers","colorCache","colorCtx","fromCSS","hsbIndices","converters","rgb-hsb","hsb-rgb","rgb-hsl","achromatic","hsl-rgb","t3s","rgb-gray","gray-rgb","gray-hsb","gray-hsl","gradient-rgb","rgb-gradient","properties","hasOverlap","_components","Gradient","_removeOwner","_addOwner","_properties","argType","parsers","stops","radial","getComponents","_canvasStyle","converter","getAlpha","setAlpha","hasAlpha","col","isGradient","toCSS","hex","_stops","origin","destination","canvasGradient","_radial","highlight","createRadialGradient","createLinearGradient","addColorStop","_rampPoint","_color","_types","components1","components2","acronym","setStops","setRadial","_owners","getStops","GradientStop","_defaultRamp","setRampPoint","getRadial","rampPoint","setColor","getRampPoint","getColor","defaults","strokeScaling","windingRule","shadowOffset","selectedColor","fontWeight","_textDefaults","isColor","isPoint","old","_values","_dontMerge","childValue","isStyle","getFontSize","getFontWeight","getFontFamily","getFont","setFont","getPixelSize","DomElement","handlePrefix","prefixes","suffix","prefix","getStyles","doc","nodeType","ownerDocument","defaultView","getComputedStyle","viewport","body","html","documentElement","getBoundingClientRect","clientLeft","clientTop","pageXOffset","scrollLeft","pageYOffset","scrollTop","getViewportBounds","innerWidth","clientWidth","innerHeight","clientHeight","isInvisible","isInView","getPrefixed","setPrefixed","removeEventListener","targetTouches","changedTouches","pageX","clientX","pageY","clientY","getTarget","srcElement","getRelatedTarget","relatedTarget","toElement","stopPropagation","preventDefault","requestAnimationFrame","nativeRequest","requested","callbacks","focused","timer","focus","blur","handleCallbacks","setInterval","_element","_pixelRatio","devicePixelRatio","setAttribute","_viewEvents","none","userSelect","touchAction","touchCallout","contentZooming","userDrag","tapHighlightColor","getCanvasSize","_windowEvents","resize","setViewSize","_setViewSize","Stats","_stats","stats","domElement","appendChild","_views","_viewsById","_viewSize","_zoom","_focused","_frameItems","_frameItemCount","_animate","play","pause","onResize","_time","_count","_requestFrame","_requested","_handleFrame","now","Date","_before","_handlingFrame","time","_handleFrameItems","_update","_transform","getPixelRatio","getViewSize","scrollBy","getZoom","setZoom","zoom","isVisible","projectToView","viewToProject","CanvasView","tool","prevFocus","tempFocus","dragging","handleMouseMove","_handleEvent","pointerEnabled","msPointerEnabled","viewEvents","selectstart dragstart","docEvents","mouseout","nodeName","scroll","HTMLCanvasElement","deviceRatio","backingStoreRatio","prevFont","measureText","downPoint","lastPoint","overPoint","downItem","lastItem","overItem","dragItem","dblClick","clickTime","callEvent","MouseEvent","isStopped","stopped","Event","isPrevented","getModifiers","Key","modifiers","KeyEvent","down","character","specialKeys",27,32,35,36,37,38,39,40,46,91,93,224,"specialChars","option","capsLock","space","charCodeMap","keyMap","downCode","handleKey","keyCode","charCode","specialKey","keydown","which","keypress","keyup","isDown","ToolEvent","_item","_choosePoint","toolPoint","getLastPoint","_lastPoint","setLastPoint","getDownPoint","_downPoint","setDownPoint","getMiddlePoint","_middlePoint","setMiddlePoint","middlePoint","getDelta","_delta","setDelta","getCount","_downCount","setCount","setItem","Tool","_firstMove","getMinDistance","_minDistance","setMinDistance","minDistance","_maxDistance","getMaxDistance","setMaxDistance","getFixedDistance","setFixedDistance","_updateEvent","needsChange","matchMaxDistance","_fireEvent","called","Http","method","xhr","ActiveXObject","overrideMimeType","onreadystatechange","readyState","responseText","canvases","createElement","sr","sg","sb","sa","bg","bb","ba","dr","dg","db","getLum","setLum","mn","lmn","ln","mxl","getSat","setSat","md","modes","screen","overlay","soft-light","hard-light","color-dodge","color-burn","darken","lighten","difference","exclusion","hue","saturation","luminosity","negation","mode","srcContext","dstContext","srcCanvas","dstData","SVGStyles","true","false","attribute","fromSVG","exportFilter","SVGNamespaces","xlink","setAttributes","namespace","setAttributeNS","createElementNS","getTransform","coordinates","trans","exportGroup","childNode","exportSVG","clip-path","exportRaster","exportPath","matchShapes","exportShape","exportCompoundPath","exportPlacedSymbol","symbolNode","viewBox","overflow","exportGradient","gradientNode","getGradient","getOrigin","getDestination","getHighlight","fy","gradientUnits","stopColor","stop-color","exportText","textContent","exporters","applyStyle","visibility","svgs","exportDefinitions","defs","insertBefore","firstChild","XMLSerializer","serializeToString","exporter","onExport","setOptions","xmlns","xmlns:xlink","getValue","allowNull","getAttributeNS","convertValue","map","importGroup","nodes","childNodes","isClip","currentStyle","applyAttributes","importSVG","importPoly","importPath","pathData","importGradient","isRadial","importers","#document","nextSibling","clippath","polyline","lineargradient","radialgradient","use","circle","applyTransform","transforms","applyOpacity","attributes","gradientTransform","fill-opacity","stroke-opacity","setVisible","display","stop-opacity","percentage","styles","group","parentNode","onLoadCallback","File","reader","FileReader","readAsText","DOMParser","parseFromString","importer","onImport","expandShapes","Collection","cb","wrapConstructor","useConstructed","wrapper","arr","params","rconstructor","constructorFilter","unwrapArg","isPlural","unwrapArgs","proxy","methodNames","filter","plural","fontinfo","ot","glyphMap","charMap","altMap","_subset","addGlyph","addGlyphs","fonts","addedFonts","delete","styleElement","styleSheet","styleSheets","ss","ownerNode","_lastSubset","normalizeSubset","lastIndexOf","getGlyphSubset","subset","setAlternateFor","font0","font1","updateSVGData","updateOTCommands","united","importOT","otFont","otGlyph","_URL","URL","webkitURL","addToFonts","fontface","FontFace","createObjectURL","fontObjectURL","revokeObjectURL","deleteRule","insertRule","onloadend","dispatchEvent","readAsDataURL","Outline","clipper","anchors","parentAnchors","addAnchor","addAnchors","addParentAnchor","glyph0","glyph1","svgData","StriclySimple","getPaths","unionedPath","constructedPath","isPrepared","addContour","fromPath","outline0","outline1","expandedFrom","skeleton","expandedTo","getSimplePath","defineProperties","firstNode","lastNode","_updateData","pushSimple","pushBezier","exportReversed","ctrl1","ctrl2","locationOnCurve","newPathToAdd","Node"],"mappings":"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AAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,OACA8D,MAAA,KAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,MAAA,MAAA9D,IAAA,QACA8D,M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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// rev 452\n/********************************************************************************\n *                                                                              *\n * Author    :  Angus Johnson                                                   *\n * Version   :  6.1.3a                                                          *\n * Date      :  22 January 2014                                                 *\n * Website   :  http://www.angusj.com                                           *\n * Copyright :  Angus Johnson 2010-2014                                         *\n *                                                                              *\n * License:                                                                     *\n * Use, modification & distribution is subject to Boost Software License Ver 1. *\n * http://www.boost.org/LICENSE_1_0.txt                                         *\n *                                                                              *\n * Attributions:                                                                *\n * The code in this library is an extension of Bala Vatti's clipping algorithm: *\n * \"A generic solution to polygon clipping\"                                     *\n * Communications of the ACM, Vol 35, Issue 7 (July 1992) pp 56-63.             *\n * http://portal.acm.org/citation.cfm?id=129906                                 *\n *                                                                              *\n * Computer graphics and geometric modeling: implementation and algorithms      *\n * By Max K. Agoston                                                            *\n * Springer; 1 edition (January 4, 2005)                                        *\n * http://books.google.com/books?q=vatti+clipping+agoston                       *\n *                                                                              *\n * See also:                                                                    *\n * \"Polygon Offsetting by Computing Winding Numbers\"                            *\n * Paper no. DETC2005-85513 pp. 565-575                                         *\n * ASME 2005 International Design Engineering Technical Conferences             *\n * and Computers and Information in Engineering Conference (IDETC/CIE2005)      *\n * September 24-28, 2005 , Long Beach, California, USA                          *\n * http://www.me.berkeley.edu/~mcmains/pubs/DAC05OffsetPolygon.pdf              *\n *                                                                              *\n *******************************************************************************/\n/*******************************************************************************\n *                                                                              *\n * Author    :  Timo                                                            *\n * Version   :  6.1.3.2                                                         *\n * Date      :  1 February 2014                                                 *\n *                                                                              *\n * This is a translation of the C# Clipper library to Javascript.               *\n * Int128 struct of C# is implemented using JSBN of Tom Wu.                     *\n * Because Javascript lacks support for 64-bit integers, the space              *\n * is a little more restricted than in C# version.                              *\n *                                                                              *\n * C# version has support for coordinate space:                                 *\n * +-4611686018427387903 ( sqrt(2^127 -1)/2 )                                   *\n * while Javascript version has support for space:                              *\n * +-4503599627370495 ( sqrt(2^106 -1)/2 )                                      *\n *                                                                              *\n * Tom Wu's JSBN proved to be the fastest big integer library:                  *\n * http://jsperf.com/big-integer-library-test                                   *\n *                                                                              *\n * This class can be made simpler when (if ever) 64-bit integer support comes.  *\n *                                                                              *\n *******************************************************************************/\n/*******************************************************************************\n *                                                                              *\n * Basic JavaScript BN library - subset useful for RSA encryption.              *\n * http://www-cs-students.stanford.edu/~tjw/jsbn/                               *\n * Copyright (c) 2005  Tom Wu                                                   *\n * All Rights Reserved.                                                         *\n * See \"LICENSE\" for details:                                                   *\n * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE                        *\n *                                                                              *\n *******************************************************************************/\n(function ()\n{\n  \"use strict\";\n  //use_int32: When enabled 32bit ints are used instead of 64bit ints. This\n  //improve performance but coordinate values are limited to the range +/- 46340\n  var use_int32 = false;\n  //use_xyz: adds a Z member to IntPoint. Adds a minor cost to performance.\n  var use_xyz = false;\n  //UseLines: Enables line clipping. Adds a very minor cost to performance.\n  var use_lines = true;\n  //use_deprecated: Enables support for the obsolete OffsetPaths() function\n  //which has been replace with the ClipperOffset class.\n  var use_deprecated = false;\n\n  var ClipperLib = {};\n  var isNode = false;\n  if (typeof module !== 'undefined' && module.exports)\n  {\n    module.exports = ClipperLib;\n    isNode = true;\n  }\n  else\n  {\n    if (typeof (document) !== \"undefined\") window.ClipperLib = ClipperLib;\n    else self['ClipperLib'] = ClipperLib;\n  }\n  var navigator_appName;\n  if (!isNode)\n  {\n    var nav = navigator.userAgent.toString().toLowerCase();\n    navigator_appName = navigator.appName;\n  }\n  else\n  {\n    var nav = \"chrome\"; // Node.js uses Chrome's V8 engine\n    navigator_appName = \"Netscape\"; // Firefox, Chrome and Safari returns \"Netscape\", so Node.js should also\n  }\n  // Browser test to speedup performance critical functions\n  var browser = {};\n  if (nav.indexOf(\"chrome\") != -1 && nav.indexOf(\"chromium\") == -1) browser.chrome = 1;\n  else browser.chrome = 0;\n  if (nav.indexOf(\"chromium\") != -1) browser.chromium = 1;\n  else browser.chromium = 0;\n  if (nav.indexOf(\"safari\") != -1 && nav.indexOf(\"chrome\") == -1 && nav.indexOf(\"chromium\") == -1) browser.safari = 1;\n  else browser.safari = 0;\n  if (nav.indexOf(\"firefox\") != -1) browser.firefox = 1;\n  else browser.firefox = 0;\n  if (nav.indexOf(\"firefox/17\") != -1) browser.firefox17 = 1;\n  else browser.firefox17 = 0;\n  if (nav.indexOf(\"firefox/15\") != -1) browser.firefox15 = 1;\n  else browser.firefox15 = 0;\n  if (nav.indexOf(\"firefox/3\") != -1) browser.firefox3 = 1;\n  else browser.firefox3 = 0;\n  if (nav.indexOf(\"opera\") != -1) browser.opera = 1;\n  else browser.opera = 0;\n  if (nav.indexOf(\"msie 10\") != -1) browser.msie10 = 1;\n  else browser.msie10 = 0;\n  if (nav.indexOf(\"msie 9\") != -1) browser.msie9 = 1;\n  else browser.msie9 = 0;\n  if (nav.indexOf(\"msie 8\") != -1) browser.msie8 = 1;\n  else browser.msie8 = 0;\n  if (nav.indexOf(\"msie 7\") != -1) browser.msie7 = 1;\n  else browser.msie7 = 0;\n  if (nav.indexOf(\"msie \") != -1) browser.msie = 1;\n  else browser.msie = 0;\n  ClipperLib.biginteger_used = null;\n  // Copyright (c) 2005  Tom Wu\n  // All Rights Reserved.\n  // See \"LICENSE\" for details.\n  // Basic JavaScript BN library - subset useful for RSA encryption.\n  // Bits per digit\n  var dbits;\n  // JavaScript engine analysis\n  var canary = 0xdeadbeefcafe;\n  var j_lm = ((canary & 0xffffff) == 0xefcafe);\n  // (public) Constructor\n  function BigInteger(a, b, c)\n  {\n    // This test variable can be removed,\n    // but at least for performance tests it is useful piece of knowledge\n    // This is the only ClipperLib related variable in BigInteger library\n    ClipperLib.biginteger_used = 1;\n    if (a != null)\n      if (\"number\" == typeof a && \"undefined\" == typeof (b)) this.fromInt(a); // faster conversion\n      else if (\"number\" == typeof a) this.fromNumber(a, b, c);\n    else if (b == null && \"string\" != typeof a) this.fromString(a, 256);\n    else this.fromString(a, b);\n  }\n  // return new, unset BigInteger\n  function nbi()\n  {\n    return new BigInteger(null);\n  }\n  // am: Compute w_j += (x*this_i), propagate carries,\n  // c is initial carry, returns final carry.\n  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n  // We need to select the fastest one that works in this environment.\n  // am1: use a single mult and divide to get the high bits,\n  // max digit bits should be 26 because\n  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n  function am1(i, x, w, j, c, n)\n  {\n    while (--n >= 0)\n    {\n      var v = x * this[i++] + w[j] + c;\n      c = Math.floor(v / 0x4000000);\n      w[j++] = v & 0x3ffffff;\n    }\n    return c;\n  }\n  // am2 avoids a big mult-and-extract completely.\n  // Max digit bits should be <= 30 because we do bitwise ops\n  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n  function am2(i, x, w, j, c, n)\n  {\n    var xl = x & 0x7fff,\n      xh = x >> 15;\n    while (--n >= 0)\n    {\n      var l = this[i] & 0x7fff;\n      var h = this[i++] >> 15;\n      var m = xh * l + h * xl;\n      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n      w[j++] = l & 0x3fffffff;\n    }\n    return c;\n  }\n  // Alternately, set max digit bits to 28 since some\n  // browsers slow down when dealing with 32-bit numbers.\n  function am3(i, x, w, j, c, n)\n  {\n    var xl = x & 0x3fff,\n      xh = x >> 14;\n    while (--n >= 0)\n    {\n      var l = this[i] & 0x3fff;\n      var h = this[i++] >> 14;\n      var m = xh * l + h * xl;\n      l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n      c = (l >> 28) + (m >> 14) + xh * h;\n      w[j++] = l & 0xfffffff;\n    }\n    return c;\n  }\n  if (j_lm && (navigator_appName == \"Microsoft Internet Explorer\"))\n  {\n    BigInteger.prototype.am = am2;\n    dbits = 30;\n  }\n  else if (j_lm && (navigator_appName != \"Netscape\"))\n  {\n    BigInteger.prototype.am = am1;\n    dbits = 26;\n  }\n  else\n  { // Mozilla/Netscape seems to prefer am3\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n  }\n  BigInteger.prototype.DB = dbits;\n  BigInteger.prototype.DM = ((1 << dbits) - 1);\n  BigInteger.prototype.DV = (1 << dbits);\n  var BI_FP = 52;\n  BigInteger.prototype.FV = Math.pow(2, BI_FP);\n  BigInteger.prototype.F1 = BI_FP - dbits;\n  BigInteger.prototype.F2 = 2 * dbits - BI_FP;\n  // Digit conversions\n  var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n  var BI_RC = new Array();\n  var rr, vv;\n  rr = \"0\".charCodeAt(0);\n  for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n  rr = \"a\".charCodeAt(0);\n  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n  rr = \"A\".charCodeAt(0);\n  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\n  function int2char(n)\n  {\n    return BI_RM.charAt(n);\n  }\n\n  function intAt(s, i)\n  {\n    var c = BI_RC[s.charCodeAt(i)];\n    return (c == null) ? -1 : c;\n  }\n  // (protected) copy this to r\n  function bnpCopyTo(r)\n  {\n    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n    r.t = this.t;\n    r.s = this.s;\n  }\n  // (protected) set from integer value x, -DV <= x < DV\n  function bnpFromInt(x)\n  {\n    this.t = 1;\n    this.s = (x < 0) ? -1 : 0;\n    if (x > 0) this[0] = x;\n    else if (x < -1) this[0] = x + this.DV;\n    else this.t = 0;\n  }\n  // return bigint initialized to value\n  function nbv(i)\n  {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n  }\n  // (protected) set from string and radix\n  function bnpFromString(s, b)\n  {\n    var k;\n    if (b == 16) k = 4;\n    else if (b == 8) k = 3;\n    else if (b == 256) k = 8; // byte array\n    else if (b == 2) k = 1;\n    else if (b == 32) k = 5;\n    else if (b == 4) k = 2;\n    else\n    {\n      this.fromRadix(s, b);\n      return;\n    }\n    this.t = 0;\n    this.s = 0;\n    var i = s.length,\n      mi = false,\n      sh = 0;\n    while (--i >= 0)\n    {\n      var x = (k == 8) ? s[i] & 0xff : intAt(s, i);\n      if (x < 0)\n      {\n        if (s.charAt(i) == \"-\") mi = true;\n        continue;\n      }\n      mi = false;\n      if (sh == 0)\n        this[this.t++] = x;\n      else if (sh + k > this.DB)\n      {\n        this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n        this[this.t++] = (x >> (this.DB - sh));\n      }\n      else\n        this[this.t - 1] |= x << sh;\n      sh += k;\n      if (sh >= this.DB) sh -= this.DB;\n    }\n    if (k == 8 && (s[0] & 0x80) != 0)\n    {\n      this.s = -1;\n      if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n    }\n    this.clamp();\n    if (mi) BigInteger.ZERO.subTo(this, this);\n  }\n  // (protected) clamp off excess high words\n  function bnpClamp()\n  {\n    var c = this.s & this.DM;\n    while (this.t > 0 && this[this.t - 1] == c)--this.t;\n  }\n  // (public) return string representation in given radix\n  function bnToString(b)\n  {\n    if (this.s < 0) return \"-\" + this.negate().toString(b);\n    var k;\n    if (b == 16) k = 4;\n    else if (b == 8) k = 3;\n    else if (b == 2) k = 1;\n    else if (b == 32) k = 5;\n    else if (b == 4) k = 2;\n    else return this.toRadix(b);\n    var km = (1 << k) - 1,\n      d, m = false,\n      r = \"\",\n      i = this.t;\n    var p = this.DB - (i * this.DB) % k;\n    if (i-- > 0)\n    {\n      if (p < this.DB && (d = this[i] >> p) > 0)\n      {\n        m = true;\n        r = int2char(d);\n      }\n      while (i >= 0)\n      {\n        if (p < k)\n        {\n          d = (this[i] & ((1 << p) - 1)) << (k - p);\n          d |= this[--i] >> (p += this.DB - k);\n        }\n        else\n        {\n          d = (this[i] >> (p -= k)) & km;\n          if (p <= 0)\n          {\n            p += this.DB;\n            --i;\n          }\n        }\n        if (d > 0) m = true;\n        if (m) r += int2char(d);\n      }\n    }\n    return m ? r : \"0\";\n  }\n  // (public) -this\n  function bnNegate()\n  {\n    var r = nbi();\n    BigInteger.ZERO.subTo(this, r);\n    return r;\n  }\n  // (public) |this|\n  function bnAbs()\n  {\n    return (this.s < 0) ? this.negate() : this;\n  }\n  // (public) return + if this > a, - if this < a, 0 if equal\n  function bnCompareTo(a)\n  {\n    var r = this.s - a.s;\n    if (r != 0) return r;\n    var i = this.t;\n    r = i - a.t;\n    if (r != 0) return (this.s < 0) ? -r : r;\n    while (--i >= 0)\n      if ((r = this[i] - a[i]) != 0) return r;\n    return 0;\n  }\n  // returns bit length of the integer x\n  function nbits(x)\n  {\n    var r = 1,\n      t;\n    if ((t = x >>> 16) != 0)\n    {\n      x = t;\n      r += 16;\n    }\n    if ((t = x >> 8) != 0)\n    {\n      x = t;\n      r += 8;\n    }\n    if ((t = x >> 4) != 0)\n    {\n      x = t;\n      r += 4;\n    }\n    if ((t = x >> 2) != 0)\n    {\n      x = t;\n      r += 2;\n    }\n    if ((t = x >> 1) != 0)\n    {\n      x = t;\n      r += 1;\n    }\n    return r;\n  }\n  // (public) return the number of bits in \"this\"\n  function bnBitLength()\n  {\n    if (this.t <= 0) return 0;\n    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n  }\n  // (protected) r = this << n*DB\n  function bnpDLShiftTo(n, r)\n  {\n    var i;\n    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n    for (i = n - 1; i >= 0; --i) r[i] = 0;\n    r.t = this.t + n;\n    r.s = this.s;\n  }\n  // (protected) r = this >> n*DB\n  function bnpDRShiftTo(n, r)\n  {\n    for (var i = n; i < this.t; ++i) r[i - n] = this[i];\n    r.t = Math.max(this.t - n, 0);\n    r.s = this.s;\n  }\n  // (protected) r = this << n\n  function bnpLShiftTo(n, r)\n  {\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << cbs) - 1;\n    var ds = Math.floor(n / this.DB),\n      c = (this.s << bs) & this.DM,\n      i;\n    for (i = this.t - 1; i >= 0; --i)\n    {\n      r[i + ds + 1] = (this[i] >> cbs) | c;\n      c = (this[i] & bm) << bs;\n    }\n    for (i = ds - 1; i >= 0; --i) r[i] = 0;\n    r[ds] = c;\n    r.t = this.t + ds + 1;\n    r.s = this.s;\n    r.clamp();\n  }\n  // (protected) r = this >> n\n  function bnpRShiftTo(n, r)\n  {\n    r.s = this.s;\n    var ds = Math.floor(n / this.DB);\n    if (ds >= this.t)\n    {\n      r.t = 0;\n      return;\n    }\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << bs) - 1;\n    r[0] = this[ds] >> bs;\n    for (var i = ds + 1; i < this.t; ++i)\n    {\n      r[i - ds - 1] |= (this[i] & bm) << cbs;\n      r[i - ds] = this[i] >> bs;\n    }\n    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n    r.t = this.t - ds;\n    r.clamp();\n  }\n  // (protected) r = this - a\n  function bnpSubTo(a, r)\n  {\n    var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n    while (i < m)\n    {\n      c += this[i] - a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    if (a.t < this.t)\n    {\n      c -= a.s;\n      while (i < this.t)\n      {\n        c += this[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      c += this.s;\n    }\n    else\n    {\n      c += this.s;\n      while (i < a.t)\n      {\n        c -= a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      c -= a.s;\n    }\n    r.s = (c < 0) ? -1 : 0;\n    if (c < -1) r[i++] = this.DV + c;\n    else if (c > 0) r[i++] = c;\n    r.t = i;\n    r.clamp();\n  }\n  // (protected) r = this * a, r != this,a (HAC 14.12)\n  // \"this\" should be the larger one if appropriate.\n  function bnpMultiplyTo(a, r)\n  {\n    var x = this.abs(),\n      y = a.abs();\n    var i = x.t;\n    r.t = i + y.t;\n    while (--i >= 0) r[i] = 0;\n    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n    r.s = 0;\n    r.clamp();\n    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n  }\n  // (protected) r = this^2, r != this (HAC 14.16)\n  function bnpSquareTo(r)\n  {\n    var x = this.abs();\n    var i = r.t = 2 * x.t;\n    while (--i >= 0) r[i] = 0;\n    for (i = 0; i < x.t - 1; ++i)\n    {\n      var c = x.am(i, x[i], r, 2 * i, 0, 1);\n      if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV)\n      {\n        r[i + x.t] -= x.DV;\n        r[i + x.t + 1] = 1;\n      }\n    }\n    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n    r.s = 0;\n    r.clamp();\n  }\n  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n  // r != q, this != m.  q or r may be null.\n  function bnpDivRemTo(m, q, r)\n  {\n    var pm = m.abs();\n    if (pm.t <= 0) return;\n    var pt = this.abs();\n    if (pt.t < pm.t)\n    {\n      if (q != null) q.fromInt(0);\n      if (r != null) this.copyTo(r);\n      return;\n    }\n    if (r == null) r = nbi();\n    var y = nbi(),\n      ts = this.s,\n      ms = m.s;\n    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n    if (nsh > 0)\n    {\n      pm.lShiftTo(nsh, y);\n      pt.lShiftTo(nsh, r);\n    }\n    else\n    {\n      pm.copyTo(y);\n      pt.copyTo(r);\n    }\n    var ys = y.t;\n    var y0 = y[ys - 1];\n    if (y0 == 0) return;\n    var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\n    var d1 = this.FV / yt,\n      d2 = (1 << this.F1) / yt,\n      e = 1 << this.F2;\n    var i = r.t,\n      j = i - ys,\n      t = (q == null) ? nbi() : q;\n    y.dlShiftTo(j, t);\n    if (r.compareTo(t) >= 0)\n    {\n      r[r.t++] = 1;\n      r.subTo(t, r);\n    }\n    BigInteger.ONE.dlShiftTo(ys, t);\n    t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n    while (y.t < ys) y[y.t++] = 0;\n    while (--j >= 0)\n    {\n      // Estimate quotient digit\n      var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd)\n      { // Try it out\n        y.dlShiftTo(j, t);\n        r.subTo(t, r);\n        while (r[i] < --qd) r.subTo(t, r);\n      }\n    }\n    if (q != null)\n    {\n      r.drShiftTo(ys, q);\n      if (ts != ms) BigInteger.ZERO.subTo(q, q);\n    }\n    r.t = ys;\n    r.clamp();\n    if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n    if (ts < 0) BigInteger.ZERO.subTo(r, r);\n  }\n  // (public) this mod a\n  function bnMod(a)\n  {\n    var r = nbi();\n    this.abs().divRemTo(a, null, r);\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n    return r;\n  }\n  // Modular reduction using \"classic\" algorithm\n  function Classic(m)\n  {\n    this.m = m;\n  }\n\n  function cConvert(x)\n  {\n    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n    else return x;\n  }\n\n  function cRevert(x)\n  {\n    return x;\n  }\n\n  function cReduce(x)\n  {\n    x.divRemTo(this.m, null, x);\n  }\n\n  function cMulTo(x, y, r)\n  {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }\n\n  function cSqrTo(x, r)\n  {\n    x.squareTo(r);\n    this.reduce(r);\n  }\n  Classic.prototype.convert = cConvert;\n  Classic.prototype.revert = cRevert;\n  Classic.prototype.reduce = cReduce;\n  Classic.prototype.mulTo = cMulTo;\n  Classic.prototype.sqrTo = cSqrTo;\n  // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n  // justification:\n  //         xy == 1 (mod m)\n  //         xy =  1+km\n  //   xy(2-xy) = (1+km)(1-km)\n  // x[y(2-xy)] = 1-k^2m^2\n  // x[y(2-xy)] == 1 (mod m^2)\n  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n  // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n  function bnpInvDigit()\n  {\n    if (this.t < 1) return 0;\n    var x = this[0];\n    if ((x & 1) == 0) return 0;\n    var y = x & 3; // y == 1/x mod 2^2\n    y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n    y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n    y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n    return (y > 0) ? this.DV - y : -y;\n  }\n  // Montgomery reduction\n  function Montgomery(m)\n  {\n    this.m = m;\n    this.mp = m.invDigit();\n    this.mpl = this.mp & 0x7fff;\n    this.mph = this.mp >> 15;\n    this.um = (1 << (m.DB - 15)) - 1;\n    this.mt2 = 2 * m.t;\n  }\n  // xR mod m\n  function montConvert(x)\n  {\n    var r = nbi();\n    x.abs().dlShiftTo(this.m.t, r);\n    r.divRemTo(this.m, null, r);\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n    return r;\n  }\n  // x/R mod m\n  function montRevert(x)\n  {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n  }\n  // x = x/R mod m (HAC 14.32)\n  function montReduce(x)\n  {\n    while (x.t <= this.mt2) // pad x so am has enough room later\n      x[x.t++] = 0;\n    for (var i = 0; i < this.m.t; ++i)\n    {\n      // faster way of calculating u0 = x[i]*mp mod DV\n      var j = x[i] & 0x7fff;\n      var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n      // use am to combine the multiply-shift-add into one call\n      j = i + this.m.t;\n      x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n      // propagate carry\n      while (x[j] >= x.DV)\n      {\n        x[j] -= x.DV;\n        x[++j]++;\n      }\n    }\n    x.clamp();\n    x.drShiftTo(this.m.t, x);\n    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n  }\n  // r = \"x^2/R mod m\"; x != r\n  function montSqrTo(x, r)\n  {\n    x.squareTo(r);\n    this.reduce(r);\n  }\n  // r = \"xy/R mod m\"; x,y != r\n  function montMulTo(x, y, r)\n  {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }\n  Montgomery.prototype.convert = montConvert;\n  Montgomery.prototype.revert = montRevert;\n  Montgomery.prototype.reduce = montReduce;\n  Montgomery.prototype.mulTo = montMulTo;\n  Montgomery.prototype.sqrTo = montSqrTo;\n  // (protected) true iff this is even\n  function bnpIsEven()\n  {\n    return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;\n  }\n  // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n  function bnpExp(e, z)\n  {\n    if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n    var r = nbi(),\n      r2 = nbi(),\n      g = z.convert(this),\n      i = nbits(e) - 1;\n    g.copyTo(r);\n    while (--i >= 0)\n    {\n      z.sqrTo(r, r2);\n      if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);\n      else\n      {\n        var t = r;\n        r = r2;\n        r2 = t;\n      }\n    }\n    return z.revert(r);\n  }\n  // (public) this^e % m, 0 <= e < 2^32\n  function bnModPowInt(e, m)\n  {\n    var z;\n    if (e < 256 || m.isEven()) z = new Classic(m);\n    else z = new Montgomery(m);\n    return this.exp(e, z);\n  }\n  // protected\n  BigInteger.prototype.copyTo = bnpCopyTo;\n  BigInteger.prototype.fromInt = bnpFromInt;\n  BigInteger.prototype.fromString = bnpFromString;\n  BigInteger.prototype.clamp = bnpClamp;\n  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n  BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n  BigInteger.prototype.lShiftTo = bnpLShiftTo;\n  BigInteger.prototype.rShiftTo = bnpRShiftTo;\n  BigInteger.prototype.subTo = bnpSubTo;\n  BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n  BigInteger.prototype.squareTo = bnpSquareTo;\n  BigInteger.prototype.divRemTo = bnpDivRemTo;\n  BigInteger.prototype.invDigit = bnpInvDigit;\n  BigInteger.prototype.isEven = bnpIsEven;\n  BigInteger.prototype.exp = bnpExp;\n  // public\n  BigInteger.prototype.toString = bnToString;\n  BigInteger.prototype.negate = bnNegate;\n  BigInteger.prototype.abs = bnAbs;\n  BigInteger.prototype.compareTo = bnCompareTo;\n  BigInteger.prototype.bitLength = bnBitLength;\n  BigInteger.prototype.mod = bnMod;\n  BigInteger.prototype.modPowInt = bnModPowInt;\n  // \"constants\"\n  BigInteger.ZERO = nbv(0);\n  BigInteger.ONE = nbv(1);\n  // Copyright (c) 2005-2009  Tom Wu\n  // All Rights Reserved.\n  // See \"LICENSE\" for details.\n  // Extended JavaScript BN functions, required for RSA private ops.\n  // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n  // Version 1.2: square() API, isProbablePrime fix\n  // (public)\n  function bnClone()\n  {\n    var r = nbi();\n    this.copyTo(r);\n    return r;\n  }\n  // (public) return value as integer\n  function bnIntValue()\n  {\n    if (this.s < 0)\n    {\n      if (this.t == 1) return this[0] - this.DV;\n      else if (this.t == 0) return -1;\n    }\n    else if (this.t == 1) return this[0];\n    else if (this.t == 0) return 0;\n    // assumes 16 < DB < 32\n    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n  }\n  // (public) return value as byte\n  function bnByteValue()\n  {\n    return (this.t == 0) ? this.s : (this[0] << 24) >> 24;\n  }\n  // (public) return value as short (assumes DB>=16)\n  function bnShortValue()\n  {\n    return (this.t == 0) ? this.s : (this[0] << 16) >> 16;\n  }\n  // (protected) return x s.t. r^x < DV\n  function bnpChunkSize(r)\n  {\n    return Math.floor(Math.LN2 * this.DB / Math.log(r));\n  }\n  // (public) 0 if this == 0, 1 if this > 0\n  function bnSigNum()\n  {\n    if (this.s < 0) return -1;\n    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n    else return 1;\n  }\n  // (protected) convert to radix string\n  function bnpToRadix(b)\n  {\n    if (b == null) b = 10;\n    if (this.signum() == 0 || b < 2 || b > 36) return \"0\";\n    var cs = this.chunkSize(b);\n    var a = Math.pow(b, cs);\n    var d = nbv(a),\n      y = nbi(),\n      z = nbi(),\n      r = \"\";\n    this.divRemTo(d, y, z);\n    while (y.signum() > 0)\n    {\n      r = (a + z.intValue()).toString(b).substr(1) + r;\n      y.divRemTo(d, y, z);\n    }\n    return z.intValue().toString(b) + r;\n  }\n  // (protected) convert from radix string\n  function bnpFromRadix(s, b)\n  {\n    this.fromInt(0);\n    if (b == null) b = 10;\n    var cs = this.chunkSize(b);\n    var d = Math.pow(b, cs),\n      mi = false,\n      j = 0,\n      w = 0;\n    for (var i = 0; i < s.length; ++i)\n    {\n      var x = intAt(s, i);\n      if (x < 0)\n      {\n        if (s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n        continue;\n      }\n      w = b * w + x;\n      if (++j >= cs)\n      {\n        this.dMultiply(d);\n        this.dAddOffset(w, 0);\n        j = 0;\n        w = 0;\n      }\n    }\n    if (j > 0)\n    {\n      this.dMultiply(Math.pow(b, j));\n      this.dAddOffset(w, 0);\n    }\n    if (mi) BigInteger.ZERO.subTo(this, this);\n  }\n  // (protected) alternate constructor\n  function bnpFromNumber(a, b, c)\n  {\n    if (\"number\" == typeof b)\n    {\n      // new BigInteger(int,int,RNG)\n      if (a < 2) this.fromInt(1);\n      else\n      {\n        this.fromNumber(a, c);\n        if (!this.testBit(a - 1)) // force MSB set\n          this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n        if (this.isEven()) this.dAddOffset(1, 0); // force odd\n        while (!this.isProbablePrime(b))\n        {\n          this.dAddOffset(2, 0);\n          if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n        }\n      }\n    }\n    else\n    {\n      // new BigInteger(int,RNG)\n      var x = new Array(),\n        t = a & 7;\n      x.length = (a >> 3) + 1;\n      b.nextBytes(x);\n      if (t > 0) x[0] &= ((1 << t) - 1);\n      else x[0] = 0;\n      this.fromString(x, 256);\n    }\n  }\n  // (public) convert to bigendian byte array\n  function bnToByteArray()\n  {\n    var i = this.t,\n      r = new Array();\n    r[0] = this.s;\n    var p = this.DB - (i * this.DB) % 8,\n      d, k = 0;\n    if (i-- > 0)\n    {\n      if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)\n        r[k++] = d | (this.s << (this.DB - p));\n      while (i >= 0)\n      {\n        if (p < 8)\n        {\n          d = (this[i] & ((1 << p) - 1)) << (8 - p);\n          d |= this[--i] >> (p += this.DB - 8);\n        }\n        else\n        {\n          d = (this[i] >> (p -= 8)) & 0xff;\n          if (p <= 0)\n          {\n            p += this.DB;\n            --i;\n          }\n        }\n        if ((d & 0x80) != 0) d |= -256;\n        if (k == 0 && (this.s & 0x80) != (d & 0x80))++k;\n        if (k > 0 || d != this.s) r[k++] = d;\n      }\n    }\n    return r;\n  }\n\n  function bnEquals(a)\n  {\n    return (this.compareTo(a) == 0);\n  }\n\n  function bnMin(a)\n  {\n    return (this.compareTo(a) < 0) ? this : a;\n  }\n\n  function bnMax(a)\n  {\n    return (this.compareTo(a) > 0) ? this : a;\n  }\n  // (protected) r = this op a (bitwise)\n  function bnpBitwiseTo(a, op, r)\n  {\n    var i, f, m = Math.min(a.t, this.t);\n    for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);\n    if (a.t < this.t)\n    {\n      f = a.s & this.DM;\n      for (i = m; i < this.t; ++i) r[i] = op(this[i], f);\n      r.t = this.t;\n    }\n    else\n    {\n      f = this.s & this.DM;\n      for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\n      r.t = a.t;\n    }\n    r.s = op(this.s, a.s);\n    r.clamp();\n  }\n  // (public) this & a\n  function op_and(x, y)\n  {\n    return x & y;\n  }\n\n  function bnAnd(a)\n  {\n    var r = nbi();\n    this.bitwiseTo(a, op_and, r);\n    return r;\n  }\n  // (public) this | a\n  function op_or(x, y)\n  {\n    return x | y;\n  }\n\n  function bnOr(a)\n  {\n    var r = nbi();\n    this.bitwiseTo(a, op_or, r);\n    return r;\n  }\n  // (public) this ^ a\n  function op_xor(x, y)\n  {\n    return x ^ y;\n  }\n\n  function bnXor(a)\n  {\n    var r = nbi();\n    this.bitwiseTo(a, op_xor, r);\n    return r;\n  }\n  // (public) this & ~a\n  function op_andnot(x, y)\n  {\n    return x & ~y;\n  }\n\n  function bnAndNot(a)\n  {\n    var r = nbi();\n    this.bitwiseTo(a, op_andnot, r);\n    return r;\n  }\n  // (public) ~this\n  function bnNot()\n  {\n    var r = nbi();\n    for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\n    r.t = this.t;\n    r.s = ~this.s;\n    return r;\n  }\n  // (public) this << n\n  function bnShiftLeft(n)\n  {\n    var r = nbi();\n    if (n < 0) this.rShiftTo(-n, r);\n    else this.lShiftTo(n, r);\n    return r;\n  }\n  // (public) this >> n\n  function bnShiftRight(n)\n  {\n    var r = nbi();\n    if (n < 0) this.lShiftTo(-n, r);\n    else this.rShiftTo(n, r);\n    return r;\n  }\n  // return index of lowest 1-bit in x, x < 2^31\n  function lbit(x)\n  {\n    if (x == 0) return -1;\n    var r = 0;\n    if ((x & 0xffff) == 0)\n    {\n      x >>= 16;\n      r += 16;\n    }\n    if ((x & 0xff) == 0)\n    {\n      x >>= 8;\n      r += 8;\n    }\n    if ((x & 0xf) == 0)\n    {\n      x >>= 4;\n      r += 4;\n    }\n    if ((x & 3) == 0)\n    {\n      x >>= 2;\n      r += 2;\n    }\n    if ((x & 1) == 0)++r;\n    return r;\n  }\n  // (public) returns index of lowest 1-bit (or -1 if none)\n  function bnGetLowestSetBit()\n  {\n    for (var i = 0; i < this.t; ++i)\n      if (this[i] != 0) return i * this.DB + lbit(this[i]);\n    if (this.s < 0) return this.t * this.DB;\n    return -1;\n  }\n  // return number of 1 bits in x\n  function cbit(x)\n  {\n    var r = 0;\n    while (x != 0)\n    {\n      x &= x - 1;\n      ++r;\n    }\n    return r;\n  }\n  // (public) return number of set bits\n  function bnBitCount()\n  {\n    var r = 0,\n      x = this.s & this.DM;\n    for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);\n    return r;\n  }\n  // (public) true iff nth bit is set\n  function bnTestBit(n)\n  {\n    var j = Math.floor(n / this.DB);\n    if (j >= this.t) return (this.s != 0);\n    return ((this[j] & (1 << (n % this.DB))) != 0);\n  }\n  // (protected) this op (1<<n)\n  function bnpChangeBit(n, op)\n  {\n    var r = BigInteger.ONE.shiftLeft(n);\n    this.bitwiseTo(r, op, r);\n    return r;\n  }\n  // (public) this | (1<<n)\n  function bnSetBit(n)\n  {\n    return this.changeBit(n, op_or);\n  }\n  // (public) this & ~(1<<n)\n  function bnClearBit(n)\n  {\n    return this.changeBit(n, op_andnot);\n  }\n  // (public) this ^ (1<<n)\n  function bnFlipBit(n)\n  {\n    return this.changeBit(n, op_xor);\n  }\n  // (protected) r = this + a\n  function bnpAddTo(a, r)\n  {\n    var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n    while (i < m)\n    {\n      c += this[i] + a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    if (a.t < this.t)\n    {\n      c += a.s;\n      while (i < this.t)\n      {\n        c += this[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      c += this.s;\n    }\n    else\n    {\n      c += this.s;\n      while (i < a.t)\n      {\n        c += a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      c += a.s;\n    }\n    r.s = (c < 0) ? -1 : 0;\n    if (c > 0) r[i++] = c;\n    else if (c < -1) r[i++] = this.DV + c;\n    r.t = i;\n    r.clamp();\n  }\n  // (public) this + a\n  function bnAdd(a)\n  {\n    var r = nbi();\n    this.addTo(a, r);\n    return r;\n  }\n  // (public) this - a\n  function bnSubtract(a)\n  {\n    var r = nbi();\n    this.subTo(a, r);\n    return r;\n  }\n  // (public) this * a\n  function bnMultiply(a)\n  {\n    var r = nbi();\n    this.multiplyTo(a, r);\n    return r;\n  }\n  // (public) this^2\n  function bnSquare()\n  {\n    var r = nbi();\n    this.squareTo(r);\n    return r;\n  }\n  // (public) this / a\n  function bnDivide(a)\n  {\n    var r = nbi();\n    this.divRemTo(a, r, null);\n    return r;\n  }\n  // (public) this % a\n  function bnRemainder(a)\n  {\n    var r = nbi();\n    this.divRemTo(a, null, r);\n    return r;\n  }\n  // (public) [this/a,this%a]\n  function bnDivideAndRemainder(a)\n  {\n    var q = nbi(),\n      r = nbi();\n    this.divRemTo(a, q, r);\n    return new Array(q, r);\n  }\n  // (protected) this *= n, this >= 0, 1 < n < DV\n  function bnpDMultiply(n)\n  {\n    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n    ++this.t;\n    this.clamp();\n  }\n  // (protected) this += n << w words, this >= 0\n  function bnpDAddOffset(n, w)\n  {\n    if (n == 0) return;\n    while (this.t <= w) this[this.t++] = 0;\n    this[w] += n;\n    while (this[w] >= this.DV)\n    {\n      this[w] -= this.DV;\n      if (++w >= this.t) this[this.t++] = 0;\n      ++this[w];\n    }\n  }\n  // A \"null\" reducer\n  function NullExp()\n  {}\n\n  function nNop(x)\n  {\n    return x;\n  }\n\n  function nMulTo(x, y, r)\n  {\n    x.multiplyTo(y, r);\n  }\n\n  function nSqrTo(x, r)\n  {\n    x.squareTo(r);\n  }\n  NullExp.prototype.convert = nNop;\n  NullExp.prototype.revert = nNop;\n  NullExp.prototype.mulTo = nMulTo;\n  NullExp.prototype.sqrTo = nSqrTo;\n  // (public) this^e\n  function bnPow(e)\n  {\n    return this.exp(e, new NullExp());\n  }\n  // (protected) r = lower n words of \"this * a\", a.t <= n\n  // \"this\" should be the larger one if appropriate.\n  function bnpMultiplyLowerTo(a, n, r)\n  {\n    var i = Math.min(this.t + a.t, n);\n    r.s = 0; // assumes a,this >= 0\n    r.t = i;\n    while (i > 0) r[--i] = 0;\n    var j;\n    for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\n    r.clamp();\n  }\n  // (protected) r = \"this * a\" without lower n words, n > 0\n  // \"this\" should be the larger one if appropriate.\n  function bnpMultiplyUpperTo(a, n, r)\n  {\n    --n;\n    var i = r.t = this.t + a.t - n;\n    r.s = 0; // assumes a,this >= 0\n    while (--i >= 0) r[i] = 0;\n    for (i = Math.max(n - this.t, 0); i < a.t; ++i)\n      r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n    r.clamp();\n    r.drShiftTo(1, r);\n  }\n  // Barrett modular reduction\n  function Barrett(m)\n  {\n    // setup Barrett\n    this.r2 = nbi();\n    this.q3 = nbi();\n    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n    this.mu = this.r2.divide(m);\n    this.m = m;\n  }\n\n  function barrettConvert(x)\n  {\n    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);\n    else if (x.compareTo(this.m) < 0) return x;\n    else\n    {\n      var r = nbi();\n      x.copyTo(r);\n      this.reduce(r);\n      return r;\n    }\n  }\n\n  function barrettRevert(x)\n  {\n    return x;\n  }\n  // x = x mod m (HAC 14.42)\n  function barrettReduce(x)\n  {\n    x.drShiftTo(this.m.t - 1, this.r2);\n    if (x.t > this.m.t + 1)\n    {\n      x.t = this.m.t + 1;\n      x.clamp();\n    }\n    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);\n    x.subTo(this.r2, x);\n    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n  }\n  // r = x^2 mod m; x != r\n  function barrettSqrTo(x, r)\n  {\n    x.squareTo(r);\n    this.reduce(r);\n  }\n  // r = x*y mod m; x,y != r\n  function barrettMulTo(x, y, r)\n  {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }\n  Barrett.prototype.convert = barrettConvert;\n  Barrett.prototype.revert = barrettRevert;\n  Barrett.prototype.reduce = barrettReduce;\n  Barrett.prototype.mulTo = barrettMulTo;\n  Barrett.prototype.sqrTo = barrettSqrTo;\n  // (public) this^e % m (HAC 14.85)\n  function bnModPow(e, m)\n  {\n    var i = e.bitLength(),\n      k, r = nbv(1),\n      z;\n    if (i <= 0) return r;\n    else if (i < 18) k = 1;\n    else if (i < 48) k = 3;\n    else if (i < 144) k = 4;\n    else if (i < 768) k = 5;\n    else k = 6;\n    if (i < 8)\n      z = new Classic(m);\n    else if (m.isEven())\n      z = new Barrett(m);\n    else\n      z = new Montgomery(m);\n    // precomputation\n    var g = new Array(),\n      n = 3,\n      k1 = k - 1,\n      km = (1 << k) - 1;\n    g[1] = z.convert(this);\n    if (k > 1)\n    {\n      var g2 = nbi();\n      z.sqrTo(g[1], g2);\n      while (n <= km)\n      {\n        g[n] = nbi();\n        z.mulTo(g2, g[n - 2], g[n]);\n        n += 2;\n      }\n    }\n    var j = e.t - 1,\n      w, is1 = true,\n      r2 = nbi(),\n      t;\n    i = nbits(e[j]) - 1;\n    while (j >= 0)\n    {\n      if (i >= k1) w = (e[j] >> (i - k1)) & km;\n      else\n      {\n        w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n        if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);\n      }\n      n = k;\n      while ((w & 1) == 0)\n      {\n        w >>= 1;\n        --n;\n      }\n      if ((i -= n) < 0)\n      {\n        i += this.DB;\n        --j;\n      }\n      if (is1)\n      { // ret == 1, don't bother squaring or multiplying it\n        g[w].copyTo(r);\n        is1 = false;\n      }\n      else\n      {\n        while (n > 1)\n        {\n          z.sqrTo(r, r2);\n          z.sqrTo(r2, r);\n          n -= 2;\n        }\n        if (n > 0) z.sqrTo(r, r2);\n        else\n        {\n          t = r;\n          r = r2;\n          r2 = t;\n        }\n        z.mulTo(r2, g[w], r);\n      }\n      while (j >= 0 && (e[j] & (1 << i)) == 0)\n      {\n        z.sqrTo(r, r2);\n        t = r;\n        r = r2;\n        r2 = t;\n        if (--i < 0)\n        {\n          i = this.DB - 1;\n          --j;\n        }\n      }\n    }\n    return z.revert(r);\n  }\n  // (public) gcd(this,a) (HAC 14.54)\n  function bnGCD(a)\n  {\n    var x = (this.s < 0) ? this.negate() : this.clone();\n    var y = (a.s < 0) ? a.negate() : a.clone();\n    if (x.compareTo(y) < 0)\n    {\n      var t = x;\n      x = y;\n      y = t;\n    }\n    var i = x.getLowestSetBit(),\n      g = y.getLowestSetBit();\n    if (g < 0) return x;\n    if (i < g) g = i;\n    if (g > 0)\n    {\n      x.rShiftTo(g, x);\n      y.rShiftTo(g, y);\n    }\n    while (x.signum() > 0)\n    {\n      if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n      if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n      if (x.compareTo(y) >= 0)\n      {\n        x.subTo(y, x);\n        x.rShiftTo(1, x);\n      }\n      else\n      {\n        y.subTo(x, y);\n        y.rShiftTo(1, y);\n      }\n    }\n    if (g > 0) y.lShiftTo(g, y);\n    return y;\n  }\n  // (protected) this % n, n < 2^26\n  function bnpModInt(n)\n  {\n    if (n <= 0) return 0;\n    var d = this.DV % n,\n      r = (this.s < 0) ? n - 1 : 0;\n    if (this.t > 0)\n      if (d == 0) r = this[0] % n;\n      else\n        for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;\n    return r;\n  }\n  // (public) 1/this % m (HAC 14.61)\n  function bnModInverse(m)\n  {\n    var ac = m.isEven();\n    if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n    var u = m.clone(),\n      v = this.clone();\n    var a = nbv(1),\n      b = nbv(0),\n      c = nbv(0),\n      d = nbv(1);\n    while (u.signum() != 0)\n    {\n      while (u.isEven())\n      {\n        u.rShiftTo(1, u);\n        if (ac)\n        {\n          if (!a.isEven() || !b.isEven())\n          {\n            a.addTo(this, a);\n            b.subTo(m, b);\n          }\n          a.rShiftTo(1, a);\n        }\n        else if (!b.isEven()) b.subTo(m, b);\n        b.rShiftTo(1, b);\n      }\n      while (v.isEven())\n      {\n        v.rShiftTo(1, v);\n        if (ac)\n        {\n          if (!c.isEven() || !d.isEven())\n          {\n            c.addTo(this, c);\n            d.subTo(m, d);\n          }\n          c.rShiftTo(1, c);\n        }\n        else if (!d.isEven()) d.subTo(m, d);\n        d.rShiftTo(1, d);\n      }\n      if (u.compareTo(v) >= 0)\n      {\n        u.subTo(v, u);\n        if (ac) a.subTo(c, a);\n        b.subTo(d, b);\n      }\n      else\n      {\n        v.subTo(u, v);\n        if (ac) c.subTo(a, c);\n        d.subTo(b, d);\n      }\n    }\n    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n    if (d.compareTo(m) >= 0) return d.subtract(m);\n    if (d.signum() < 0) d.addTo(m, d);\n    else return d;\n    if (d.signum() < 0) return d.add(m);\n    else return d;\n  }\n  var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n  // (public) test primality with certainty >= 1-.5^t\n  function bnIsProbablePrime(t)\n  {\n    var i, x = this.abs();\n    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1])\n    {\n      for (i = 0; i < lowprimes.length; ++i)\n        if (x[0] == lowprimes[i]) return true;\n      return false;\n    }\n    if (x.isEven()) return false;\n    i = 1;\n    while (i < lowprimes.length)\n    {\n      var m = lowprimes[i],\n        j = i + 1;\n      while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n      m = x.modInt(m);\n      while (i < j)\n        if (m % lowprimes[i++] == 0) return false;\n    }\n    return x.millerRabin(t);\n  }\n  // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n  function bnpMillerRabin(t)\n  {\n    var n1 = this.subtract(BigInteger.ONE);\n    var k = n1.getLowestSetBit();\n    if (k <= 0) return false;\n    var r = n1.shiftRight(k);\n    t = (t + 1) >> 1;\n    if (t > lowprimes.length) t = lowprimes.length;\n    var a = nbi();\n    for (var i = 0; i < t; ++i)\n    {\n      //Pick bases at random, instead of starting at 2\n      a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n      var y = a.modPow(r, this);\n      if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0)\n      {\n        var j = 1;\n        while (j++ < k && y.compareTo(n1) != 0)\n        {\n          y = y.modPowInt(2, this);\n          if (y.compareTo(BigInteger.ONE) == 0) return false;\n        }\n        if (y.compareTo(n1) != 0) return false;\n      }\n    }\n    return true;\n  }\n  // protected\n  BigInteger.prototype.chunkSize = bnpChunkSize;\n  BigInteger.prototype.toRadix = bnpToRadix;\n  BigInteger.prototype.fromRadix = bnpFromRadix;\n  BigInteger.prototype.fromNumber = bnpFromNumber;\n  BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n  BigInteger.prototype.changeBit = bnpChangeBit;\n  BigInteger.prototype.addTo = bnpAddTo;\n  BigInteger.prototype.dMultiply = bnpDMultiply;\n  BigInteger.prototype.dAddOffset = bnpDAddOffset;\n  BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n  BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n  BigInteger.prototype.modInt = bnpModInt;\n  BigInteger.prototype.millerRabin = bnpMillerRabin;\n  // public\n  BigInteger.prototype.clone = bnClone;\n  BigInteger.prototype.intValue = bnIntValue;\n  BigInteger.prototype.byteValue = bnByteValue;\n  BigInteger.prototype.shortValue = bnShortValue;\n  BigInteger.prototype.signum = bnSigNum;\n  BigInteger.prototype.toByteArray = bnToByteArray;\n  BigInteger.prototype.equals = bnEquals;\n  BigInteger.prototype.min = bnMin;\n  BigInteger.prototype.max = bnMax;\n  BigInteger.prototype.and = bnAnd;\n  BigInteger.prototype.or = bnOr;\n  BigInteger.prototype.xor = bnXor;\n  BigInteger.prototype.andNot = bnAndNot;\n  BigInteger.prototype.not = bnNot;\n  BigInteger.prototype.shiftLeft = bnShiftLeft;\n  BigInteger.prototype.shiftRight = bnShiftRight;\n  BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n  BigInteger.prototype.bitCount = bnBitCount;\n  BigInteger.prototype.testBit = bnTestBit;\n  BigInteger.prototype.setBit = bnSetBit;\n  BigInteger.prototype.clearBit = bnClearBit;\n  BigInteger.prototype.flipBit = bnFlipBit;\n  BigInteger.prototype.add = bnAdd;\n  BigInteger.prototype.subtract = bnSubtract;\n  BigInteger.prototype.multiply = bnMultiply;\n  BigInteger.prototype.divide = bnDivide;\n  BigInteger.prototype.remainder = bnRemainder;\n  BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n  BigInteger.prototype.modPow = bnModPow;\n  BigInteger.prototype.modInverse = bnModInverse;\n  BigInteger.prototype.pow = bnPow;\n  BigInteger.prototype.gcd = bnGCD;\n  BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n  // JSBN-specific extension\n  BigInteger.prototype.square = bnSquare;\n  var Int128 = BigInteger;\n  // BigInteger interfaces not implemented in jsbn:\n  // BigInteger(int signum, byte[] magnitude)\n  // double doubleValue()\n  // float floatValue()\n  // int hashCode()\n  // long longValue()\n  // static BigInteger valueOf(long val)\n  // Helper functions to make BigInteger functions callable with two parameters\n  // as in original C# Clipper\n  Int128.prototype.IsNegative = function ()\n  {\n    if (this.compareTo(Int128.ZERO) == -1) return true;\n    else return false;\n  };\n  Int128.op_Equality = function (val1, val2)\n  {\n    if (val1.compareTo(val2) == 0) return true;\n    else return false;\n  };\n  Int128.op_Inequality = function (val1, val2)\n  {\n    if (val1.compareTo(val2) != 0) return true;\n    else return false;\n  };\n  Int128.op_GreaterThan = function (val1, val2)\n  {\n    if (val1.compareTo(val2) > 0) return true;\n    else return false;\n  };\n  Int128.op_LessThan = function (val1, val2)\n  {\n    if (val1.compareTo(val2) < 0) return true;\n    else return false;\n  };\n  Int128.op_Addition = function (lhs, rhs)\n  {\n    return new Int128(lhs).add(new Int128(rhs));\n  };\n  Int128.op_Subtraction = function (lhs, rhs)\n  {\n    return new Int128(lhs).subtract(new Int128(rhs));\n  };\n  Int128.Int128Mul = function (lhs, rhs)\n  {\n    return new Int128(lhs).multiply(new Int128(rhs));\n  };\n  Int128.op_Division = function (lhs, rhs)\n  {\n    return lhs.divide(rhs);\n  };\n  Int128.prototype.ToDouble = function ()\n  {\n    return parseFloat(this.toString()); // This could be something faster\n  };\n  // end of Int128 section\n  /*\n  // Uncomment the following two lines if you want to use Int128 outside ClipperLib\n  if (typeof(document) !== \"undefined\") window.Int128 = Int128;\n  else self.Int128 = Int128;\n  */\n  // ---------------------------------------------  \n  // Here starts the actual Clipper library:\n  // Helper function to support Inheritance in Javascript\n  if (typeof (Inherit) == 'undefined')\n  {\n    var Inherit = function (ce, ce2)\n    {\n      var p;\n      if (typeof (Object.getOwnPropertyNames) == 'undefined')\n      {\n        for (p in ce2.prototype)\n          if (typeof (ce.prototype[p]) == 'undefined' || ce.prototype[p] == Object.prototype[p]) ce.prototype[p] = ce2.prototype[p];\n        for (p in ce2)\n          if (typeof (ce[p]) == 'undefined') ce[p] = ce2[p];\n        ce.$baseCtor = ce2;\n      }\n      else\n      {\n        var props = Object.getOwnPropertyNames(ce2.prototype);\n        for (var i = 0; i < props.length; i++)\n          if (typeof (Object.getOwnPropertyDescriptor(ce.prototype, props[i])) == 'undefined') Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));\n        for (p in ce2)\n          if (typeof (ce[p]) == 'undefined') ce[p] = ce2[p];\n        ce.$baseCtor = ce2;\n      }\n    };\n  }\n  ClipperLib.Path = function ()\n  {\n    return [];\n  };\n  ClipperLib.Paths = function ()\n  {\n    return []; // Was previously [[]], but caused problems when pushed\n  };\n  // Preserves the calling way of original C# Clipper\n  // Is essential due to compatibility, because DoublePoint is public class in original C# version\n  ClipperLib.DoublePoint = function ()\n  {\n    var a = arguments;\n    this.X = 0;\n    this.Y = 0;\n    // public DoublePoint(DoublePoint dp)\n    // public DoublePoint(IntPoint ip)\n    if (a.length == 1)\n    {\n      this.X = a[0].X;\n      this.Y = a[0].Y;\n    }\n    else if (a.length == 2)\n    {\n      this.X = a[0];\n      this.Y = a[1];\n    }\n  }; // This is internal faster function when called without arguments\n  ClipperLib.DoublePoint0 = function ()\n  {\n    this.X = 0;\n    this.Y = 0;\n  };\n  // This is internal faster function when called with 1 argument (dp or ip)\n  ClipperLib.DoublePoint1 = function (dp)\n  {\n    this.X = dp.X;\n    this.Y = dp.Y;\n  };\n  // This is internal faster function when called with 2 arguments (x and y)\n  ClipperLib.DoublePoint2 = function (x, y)\n  {\n    this.X = x;\n    this.Y = y;\n  };\n  // PolyTree & PolyNode start\n  // -------------------------------\n  ClipperLib.PolyNode = function ()\n  {\n    this.m_Parent = null;\n    this.m_polygon = new ClipperLib.Path();\n    this.m_Index = 0;\n    this.m_jointype = 0;\n    this.m_endtype = 0;\n    this.m_Childs = [];\n    this.IsOpen = false;\n  };\n  ClipperLib.PolyNode.prototype.IsHoleNode = function ()\n  {\n    var result = true;\n    var node = this.m_Parent;\n    while (node !== null)\n    {\n      result = !result;\n      node = node.m_Parent;\n    }\n    return result;\n  };\n  ClipperLib.PolyNode.prototype.ChildCount = function ()\n  {\n    return this.m_Childs.length;\n  };\n  ClipperLib.PolyNode.prototype.Contour = function ()\n  {\n    return this.m_polygon;\n  };\n  ClipperLib.PolyNode.prototype.AddChild = function (Child)\n  {\n    var cnt = this.m_Childs.length;\n    this.m_Childs.push(Child);\n    Child.m_Parent = this;\n    Child.m_Index = cnt;\n  };\n  ClipperLib.PolyNode.prototype.GetNext = function ()\n  {\n    if (this.m_Childs.length > 0)\n      return this.m_Childs[0];\n    else\n      return this.GetNextSiblingUp();\n  };\n  ClipperLib.PolyNode.prototype.GetNextSiblingUp = function ()\n  {\n    if (this.m_Parent === null)\n      return null;\n    else if (this.m_Index == this.m_Parent.m_Childs.length - 1)\n      return this.m_Parent.GetNextSiblingUp();\n    else\n      return this.m_Parent.m_Childs[this.m_Index + 1];\n  };\n  ClipperLib.PolyNode.prototype.Childs = function ()\n  {\n    return this.m_Childs;\n  };\n  ClipperLib.PolyNode.prototype.Parent = function ()\n  {\n    return this.m_Parent;\n  };\n  ClipperLib.PolyNode.prototype.IsHole = function ()\n  {\n    return this.IsHoleNode();\n  };\n  // PolyTree : PolyNode\n  ClipperLib.PolyTree = function ()\n  {\n    this.m_AllPolys = [];\n    ClipperLib.PolyNode.call(this);\n  };\n  ClipperLib.PolyTree.prototype.Clear = function ()\n  {\n    for (var i = 0, ilen = this.m_AllPolys.length; i < ilen; i++)\n      this.m_AllPolys[i] = null;\n    this.m_AllPolys.length = 0;\n    this.m_Childs.length = 0;\n  };\n  ClipperLib.PolyTree.prototype.GetFirst = function ()\n  {\n    if (this.m_Childs.length > 0)\n      return this.m_Childs[0];\n    else\n      return null;\n  };\n  ClipperLib.PolyTree.prototype.Total = function ()\n  {\n    return this.m_AllPolys.length;\n  };\n  Inherit(ClipperLib.PolyTree, ClipperLib.PolyNode);\n  // -------------------------------\n  // PolyTree & PolyNode end\n  ClipperLib.Math_Abs_Int64 = ClipperLib.Math_Abs_Int32 = ClipperLib.Math_Abs_Double = function (a)\n  {\n    return Math.abs(a);\n  };\n  ClipperLib.Math_Max_Int32_Int32 = function (a, b)\n  {\n    return Math.max(a, b);\n  };\n  /*\n  -----------------------------------\n  cast_32 speedtest: http://jsperf.com/truncate-float-to-integer/2\n  -----------------------------------\n  */\n  if (browser.msie || browser.opera || browser.safari) ClipperLib.Cast_Int32 = function (a)\n  {\n    return a | 0;\n  };\n  else ClipperLib.Cast_Int32 = function (a)\n  { // eg. browser.chrome || browser.chromium || browser.firefox\n    return~~ a;\n  };\n  /*\n  --------------------------\n  cast_64 speedtests: http://jsperf.com/truncate-float-to-integer\n  Chrome: bitwise_not_floor\n  Firefox17: toInteger (typeof test)\n  IE9: bitwise_or_floor\n  IE7 and IE8: to_parseint\n  Chromium: to_floor_or_ceil\n  Firefox3: to_floor_or_ceil\n  Firefox15: to_floor_or_ceil\n  Opera: to_floor_or_ceil\n  Safari: to_floor_or_ceil\n  --------------------------\n  */\n  if (browser.chrome) ClipperLib.Cast_Int64 = function (a)\n  {\n    if (a < -2147483648 || a > 2147483647)\n      return a < 0 ? Math.ceil(a) : Math.floor(a);\n    else return~~ a;\n  };\n  else if (browser.firefox && typeof (Number.toInteger) == \"function\") ClipperLib.Cast_Int64 = function (a)\n  {\n    return Number.toInteger(a);\n  };\n  else if (browser.msie7 || browser.msie8) ClipperLib.Cast_Int64 = function (a)\n  {\n    return parseInt(a, 10);\n  };\n  else if (browser.msie) ClipperLib.Cast_Int64 = function (a)\n  {\n    if (a < -2147483648 || a > 2147483647)\n      return a < 0 ? Math.ceil(a) : Math.floor(a);\n    return a | 0;\n  };\n  // eg. browser.chromium || browser.firefox || browser.opera || browser.safari\n  else ClipperLib.Cast_Int64 = function (a)\n  {\n    return a < 0 ? Math.ceil(a) : Math.floor(a);\n  };\n  ClipperLib.Clear = function (a)\n  {\n    a.length = 0;\n  };\n  //ClipperLib.MaxSteps = 64; // How many steps at maximum in arc in BuildArc() function\n  ClipperLib.PI = 3.141592653589793;\n  ClipperLib.PI2 = 2 * 3.141592653589793;\n  ClipperLib.IntPoint = function ()\n  {\n    var a = arguments,\n      alen = a.length;\n    this.X = 0;\n    this.Y = 0;\n    if (use_xyz)\n    {\n      this.Z = 0;\n      if (alen == 3) // public IntPoint(cInt x, cInt y, cInt z = 0)\n      {\n        this.X = a[0];\n        this.Y = a[1];\n        this.Z = a[2];\n      }\n      else if (alen == 2) // public IntPoint(cInt x, cInt y)\n      {\n        this.X = a[0];\n        this.Y = a[1];\n        this.Z = 0;\n      }\n      else if (alen == 1)\n      {\n        if (a[0] instanceof ClipperLib.DoublePoint) // public IntPoint(DoublePoint dp)\n        {\n          var dp = a[0];\n          this.X = ClipperLib.Clipper.Round(dp.X);\n          this.Y = ClipperLib.Clipper.Round(dp.Y);\n          this.Z = 0;\n        }\n        else // public IntPoint(IntPoint pt)\n        {\n          var pt = a[0];\n          if (typeof (pt.Z) == \"undefined\") pt.Z = 0;\n          this.X = pt.X;\n          this.Y = pt.Y;\n          this.Z = pt.Z;\n        }\n      }\n      else // public IntPoint()\n      {\n        this.X = 0;\n        this.Y = 0;\n        this.Z = 0;\n      }\n    }\n    else // if (!use_xyz)\n    {\n      if (alen == 2) // public IntPoint(cInt X, cInt Y)\n      {\n        this.X = a[0];\n        this.Y = a[1];\n      }\n      else if (alen == 1)\n      {\n        if (a[0] instanceof ClipperLib.DoublePoint) // public IntPoint(DoublePoint dp)\n        {\n          var dp = a[0];\n          this.X = ClipperLib.Clipper.Round(dp.X);\n          this.Y = ClipperLib.Clipper.Round(dp.Y);\n        }\n        else // public IntPoint(IntPoint pt)\n        {\n          var pt = a[0];\n          this.X = pt.X;\n          this.Y = pt.Y;\n        }\n      }\n      else // public IntPoint(IntPoint pt)\n      {\n        this.X = 0;\n        this.Y = 0;\n      }\n    }\n  };\n  ClipperLib.IntPoint.op_Equality = function (a, b)\n  {\n    //return a == b;\n    return a.X == b.X && a.Y == b.Y;\n  };\n  ClipperLib.IntPoint.op_Inequality = function (a, b)\n  {\n    //return a != b;\n    return a.X != b.X || a.Y != b.Y;\n  };\n  /*\n  ClipperLib.IntPoint.prototype.Equals = function (obj)\n  {\n    if (obj === null)\n        return false;\n    if (obj instanceof ClipperLib.IntPoint)\n    {\n        var a = Cast(obj, ClipperLib.IntPoint);\n        return (this.X == a.X) && (this.Y == a.Y);\n    }\n    else\n        return false;\n  };\n*/\n  if (use_xyz)\n  {\n    ClipperLib.IntPoint0 = function ()\n    {\n      this.X = 0;\n      this.Y = 0;\n      this.Z = 0;\n    };\n    ClipperLib.IntPoint1 = function (pt)\n    {\n      this.X = pt.X;\n      this.Y = pt.Y;\n      this.Z = pt.Z;\n    };\n    ClipperLib.IntPoint1dp = function (dp)\n    {\n      this.X = ClipperLib.Clipper.Round(dp.X);\n      this.Y = ClipperLib.Clipper.Round(dp.Y);\n      this.Z = 0;\n    };\n    ClipperLib.IntPoint2 = function (x, y)\n    {\n      this.X = x;\n      this.Y = y;\n      this.Z = 0;\n    };\n    ClipperLib.IntPoint3 = function (x, y, z)\n    {\n      this.X = x;\n      this.Y = y;\n      this.Z = z;\n    };\n  }\n  else // if (!use_xyz)\n  {\n    ClipperLib.IntPoint0 = function ()\n    {\n      this.X = 0;\n      this.Y = 0;\n    };\n    ClipperLib.IntPoint1 = function (pt)\n    {\n      this.X = pt.X;\n      this.Y = pt.Y;\n    };\n    ClipperLib.IntPoint1dp = function (dp)\n    {\n      this.X = ClipperLib.Clipper.Round(dp.X);\n      this.Y = ClipperLib.Clipper.Round(dp.Y);\n    };\n    ClipperLib.IntPoint2 = function (x, y)\n    {\n      this.X = x;\n      this.Y = y;\n    };\n  }\n  ClipperLib.IntRect = function ()\n  {\n    var a = arguments,\n      alen = a.length;\n    if (alen == 4) // function (l, t, r, b)\n    {\n      this.left = a[0];\n      this.top = a[1];\n      this.right = a[2];\n      this.bottom = a[3];\n    }\n    else if (alen == 1) // function (ir)\n    {\n      this.left = ir.left;\n      this.top = ir.top;\n      this.right = ir.right;\n      this.bottom = ir.bottom;\n    }\n    else // function ()\n    {\n      this.left = 0;\n      this.top = 0;\n      this.right = 0;\n      this.bottom = 0;\n    }\n  };\n  ClipperLib.IntRect0 = function ()\n  {\n    this.left = 0;\n    this.top = 0;\n    this.right = 0;\n    this.bottom = 0;\n  };\n  ClipperLib.IntRect1 = function (ir)\n  {\n    this.left = ir.left;\n    this.top = ir.top;\n    this.right = ir.right;\n    this.bottom = ir.bottom;\n  };\n  ClipperLib.IntRect4 = function (l, t, r, b)\n  {\n    this.left = l;\n    this.top = t;\n    this.right = r;\n    this.bottom = b;\n  };\n  ClipperLib.ClipType = {\n    ctIntersection: 0,\n    ctUnion: 1,\n    ctDifference: 2,\n    ctXor: 3\n  };\n  ClipperLib.PolyType = {\n    ptSubject: 0,\n    ptClip: 1\n  };\n  ClipperLib.PolyFillType = {\n    pftEvenOdd: 0,\n    pftNonZero: 1,\n    pftPositive: 2,\n    pftNegative: 3\n  };\n  ClipperLib.JoinType = {\n    jtSquare: 0,\n    jtRound: 1,\n    jtMiter: 2\n  };\n  ClipperLib.EndType = {\n    etOpenSquare: 0,\n    etOpenRound: 1,\n    etOpenButt: 2,\n    etClosedLine: 3,\n    etClosedPolygon: 4\n  };\n  if (use_deprecated)\n    ClipperLib.EndType_ = {\n      etSquare: 0,\n      etRound: 1,\n      etButt: 2,\n      etClosed: 3\n    };\n  ClipperLib.EdgeSide = {\n    esLeft: 0,\n    esRight: 1\n  };\n  ClipperLib.Direction = {\n    dRightToLeft: 0,\n    dLeftToRight: 1\n  };\n  ClipperLib.TEdge = function ()\n  {\n    this.Bot = new ClipperLib.IntPoint();\n    this.Curr = new ClipperLib.IntPoint();\n    this.Top = new ClipperLib.IntPoint();\n    this.Delta = new ClipperLib.IntPoint();\n    this.Dx = 0;\n    this.PolyTyp = ClipperLib.PolyType.ptSubject;\n    this.Side = ClipperLib.EdgeSide.esLeft;\n    this.WindDelta = 0;\n    this.WindCnt = 0;\n    this.WindCnt2 = 0;\n    this.OutIdx = 0;\n    this.Next = null;\n    this.Prev = null;\n    this.NextInLML = null;\n    this.NextInAEL = null;\n    this.PrevInAEL = null;\n    this.NextInSEL = null;\n    this.PrevInSEL = null;\n  };\n  ClipperLib.IntersectNode = function ()\n  {\n    this.Edge1 = null;\n    this.Edge2 = null;\n    this.Pt = new ClipperLib.IntPoint();\n  };\n  ClipperLib.MyIntersectNodeSort = function () {};\n  ClipperLib.MyIntersectNodeSort.Compare = function (node1, node2)\n  {\n    return (node2.Pt.Y - node1.Pt.Y);\n  };\n  ClipperLib.LocalMinima = function ()\n  {\n    this.Y = 0;\n    this.LeftBound = null;\n    this.RightBound = null;\n    this.Next = null;\n  };\n  ClipperLib.Scanbeam = function ()\n  {\n    this.Y = 0;\n    this.Next = null;\n  };\n  ClipperLib.OutRec = function ()\n  {\n    this.Idx = 0;\n    this.IsHole = false;\n    this.IsOpen = false;\n    this.FirstLeft = null;\n    this.Pts = null;\n    this.BottomPt = null;\n    this.PolyNode = null;\n  };\n  ClipperLib.OutPt = function ()\n  {\n    this.Idx = 0;\n    this.Pt = new ClipperLib.IntPoint();\n    this.Next = null;\n    this.Prev = null;\n  };\n  ClipperLib.Join = function ()\n  {\n    this.OutPt1 = null;\n    this.OutPt2 = null;\n    this.OffPt = new ClipperLib.IntPoint();\n  };\n  ClipperLib.ClipperBase = function ()\n  {\n    this.m_MinimaList = null;\n    this.m_CurrentLM = null;\n    this.m_edges = new Array();\n    this.m_UseFullRange = false;\n    this.m_HasOpenPaths = false;\n    this.PreserveCollinear = false;\n    this.m_MinimaList = null;\n    this.m_CurrentLM = null;\n    this.m_UseFullRange = false;\n    this.m_HasOpenPaths = false;\n  };\n  // Ranges are in original C# too high for Javascript (in current state 2013 september):\n  // protected const double horizontal = -3.4E+38;\n  // internal const cInt loRange = 0x3FFFFFFF; // = 1073741823 = sqrt(2^63 -1)/2\n  // internal const cInt hiRange = 0x3FFFFFFFFFFFFFFFL; // = 4611686018427387903 = sqrt(2^127 -1)/2\n  // So had to adjust them to more suitable for Javascript.\n  // If JS some day supports truly 64-bit integers, then these ranges can be as in C#\n  // and biginteger library can be more simpler (as then 128bit can be represented as two 64bit numbers)\n  ClipperLib.ClipperBase.horizontal = -9007199254740992; //-2^53\n  ClipperLib.ClipperBase.Skip = -2;\n  ClipperLib.ClipperBase.Unassigned = -1;\n  ClipperLib.ClipperBase.tolerance = 1E-20;\n  if (use_int32)\n  {\n    ClipperLib.ClipperBase.loRange = 46340;\n    ClipperLib.ClipperBase.hiRange = 46340;\n  }\n  else\n  {\n    ClipperLib.ClipperBase.loRange = 47453132; // sqrt(2^53 -1)/2\n    ClipperLib.ClipperBase.hiRange = 4503599627370495; // sqrt(2^106 -1)/2\n  }\n  ClipperLib.ClipperBase.near_zero = function (val)\n  {\n    return (val > -ClipperLib.ClipperBase.tolerance) && (val < ClipperLib.ClipperBase.tolerance);\n  };\n  ClipperLib.ClipperBase.IsHorizontal = function (e)\n  {\n    return e.Delta.Y === 0;\n  };\n  ClipperLib.ClipperBase.prototype.PointIsVertex = function (pt, pp)\n  {\n    var pp2 = pp;\n    do {\n      if (ClipperLib.IntPoint.op_Equality(pp2.Pt, pt))\n        return true;\n      pp2 = pp2.Next;\n    }\n    while (pp2 != pp)\n    return false;\n  };\n  ClipperLib.ClipperBase.prototype.PointOnLineSegment = function (pt, linePt1, linePt2, UseFullRange)\n  {\n    if (UseFullRange)\n      return ((pt.X == linePt1.X) && (pt.Y == linePt1.Y)) ||\n        ((pt.X == linePt2.X) && (pt.Y == linePt2.Y)) ||\n        (((pt.X > linePt1.X) == (pt.X < linePt2.X)) &&\n        ((pt.Y > linePt1.Y) == (pt.Y < linePt2.Y)) &&\n        (Int128.op_Equality(Int128.Int128Mul((pt.X - linePt1.X), (linePt2.Y - linePt1.Y)),\n          Int128.Int128Mul((linePt2.X - linePt1.X), (pt.Y - linePt1.Y)))));\n    else\n      return ((pt.X == linePt1.X) && (pt.Y == linePt1.Y)) || ((pt.X == linePt2.X) && (pt.Y == linePt2.Y)) || (((pt.X > linePt1.X) == (pt.X < linePt2.X)) && ((pt.Y > linePt1.Y) == (pt.Y < linePt2.Y)) && ((pt.X - linePt1.X) * (linePt2.Y - linePt1.Y) == (linePt2.X - linePt1.X) * (pt.Y - linePt1.Y)));\n  };\n  ClipperLib.ClipperBase.prototype.PointOnPolygon = function (pt, pp, UseFullRange)\n  {\n    var pp2 = pp;\n    while (true)\n    {\n      if (this.PointOnLineSegment(pt, pp2.Pt, pp2.Next.Pt, UseFullRange))\n        return true;\n      pp2 = pp2.Next;\n      if (pp2 == pp)\n        break;\n    }\n    return false;\n  };\n  ClipperLib.ClipperBase.prototype.SlopesEqual = ClipperLib.ClipperBase.SlopesEqual = function ()\n  {\n    var a = arguments,\n      alen = a.length;\n    var e1, e2, pt1, pt2, pt3, pt4, UseFullRange;\n    if (alen == 3) // function (e1, e2, UseFullRange)\n    {\n      e1 = a[0];\n      e2 = a[1];\n      UseFullRange = a[2];\n      if (UseFullRange)\n        return Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));\n      else\n        return ClipperLib.Cast_Int64((e1.Delta.Y) * (e2.Delta.X)) == ClipperLib.Cast_Int64((e1.Delta.X) * (e2.Delta.Y));\n    }\n    else if (alen == 4) // function (pt1, pt2, pt3, UseFullRange)\n    {\n      pt1 = a[0];\n      pt2 = a[1];\n      pt3 = a[2];\n      UseFullRange = a[3];\n      if (UseFullRange)\n        return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));\n      else\n        return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;\n    }\n    else // function (pt1, pt2, pt3, pt4, UseFullRange)\n    {\n      pt1 = a[0];\n      pt2 = a[1];\n      pt3 = a[2];\n      pt4 = a[3];\n      UseFullRange = a[4];\n      if (UseFullRange)\n        return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));\n      else\n        return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;\n    }\n  };\n  ClipperLib.ClipperBase.SlopesEqual3 = function (e1, e2, UseFullRange)\n  {\n    if (UseFullRange)\n      return Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));\n    else\n      return ClipperLib.Cast_Int64((e1.Delta.Y) * (e2.Delta.X)) == ClipperLib.Cast_Int64((e1.Delta.X) * (e2.Delta.Y));\n  };\n  ClipperLib.ClipperBase.SlopesEqual4 = function (pt1, pt2, pt3, UseFullRange)\n  {\n    if (UseFullRange)\n      return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));\n    else\n      return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;\n  };\n  ClipperLib.ClipperBase.SlopesEqual5 = function (pt1, pt2, pt3, pt4, UseFullRange)\n  {\n    if (UseFullRange)\n      return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));\n    else\n      return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;\n  };\n  ClipperLib.ClipperBase.prototype.Clear = function ()\n  {\n    this.DisposeLocalMinimaList();\n    for (var i = 0, ilen = this.m_edges.length; i < ilen; ++i)\n    {\n      for (var j = 0, jlen = this.m_edges[i].length; j < jlen; ++j)\n        this.m_edges[i][j] = null;\n      ClipperLib.Clear(this.m_edges[i]);\n    }\n    ClipperLib.Clear(this.m_edges);\n    this.m_UseFullRange = false;\n    this.m_HasOpenPaths = false;\n  };\n  ClipperLib.ClipperBase.prototype.DisposeLocalMinimaList = function ()\n  {\n    while (this.m_MinimaList !== null)\n    {\n      var tmpLm = this.m_MinimaList.Next;\n      this.m_MinimaList = null;\n      this.m_MinimaList = tmpLm;\n    }\n    this.m_CurrentLM = null;\n  };\n  ClipperLib.ClipperBase.prototype.RangeTest = function (Pt, useFullRange)\n  {\n    if (useFullRange.Value)\n    {\n      if (Pt.X > ClipperLib.ClipperBase.hiRange || Pt.Y > ClipperLib.ClipperBase.hiRange || -Pt.X > ClipperLib.ClipperBase.hiRange || -Pt.Y > ClipperLib.ClipperBase.hiRange)\n        ClipperLib.Error(\"Coordinate outside allowed range in RangeTest().\");\n    }\n    else if (Pt.X > ClipperLib.ClipperBase.loRange || Pt.Y > ClipperLib.ClipperBase.loRange || -Pt.X > ClipperLib.ClipperBase.loRange || -Pt.Y > ClipperLib.ClipperBase.loRange)\n    {\n      useFullRange.Value = true;\n      this.RangeTest(Pt, useFullRange);\n    }\n  };\n  ClipperLib.ClipperBase.prototype.InitEdge = function (e, eNext, ePrev, pt)\n  {\n    e.Next = eNext;\n    e.Prev = ePrev;\n    //e.Curr = pt;\n    e.Curr.X = pt.X;\n    e.Curr.Y = pt.Y;\n    e.OutIdx = -1;\n  };\n  ClipperLib.ClipperBase.prototype.InitEdge2 = function (e, polyType)\n  {\n    if (e.Curr.Y >= e.Next.Curr.Y)\n    {\n      //e.Bot = e.Curr;\n      e.Bot.X = e.Curr.X;\n      e.Bot.Y = e.Curr.Y;\n      //e.Top = e.Next.Curr;\n      e.Top.X = e.Next.Curr.X;\n      e.Top.Y = e.Next.Curr.Y;\n    }\n    else\n    {\n      //e.Top = e.Curr;\n      e.Top.X = e.Curr.X;\n      e.Top.Y = e.Curr.Y;\n      //e.Bot = e.Next.Curr;\n      e.Bot.X = e.Next.Curr.X;\n      e.Bot.Y = e.Next.Curr.Y;\n    }\n    this.SetDx(e);\n    e.PolyTyp = polyType;\n  };\n  ClipperLib.ClipperBase.prototype.FindNextLocMin = function (E)\n  {\n    var E2;\n    for (;;)\n    {\n      while (ClipperLib.IntPoint.op_Inequality(E.Bot, E.Prev.Bot) || ClipperLib.IntPoint.op_Equality(E.Curr, E.Top))\n        E = E.Next;\n      if (E.Dx != ClipperLib.ClipperBase.horizontal && E.Prev.Dx != ClipperLib.ClipperBase.horizontal)\n        break;\n      while (E.Prev.Dx == ClipperLib.ClipperBase.horizontal)\n        E = E.Prev;\n      E2 = E;\n      while (E.Dx == ClipperLib.ClipperBase.horizontal)\n        E = E.Next;\n      if (E.Top.Y == E.Prev.Bot.Y)\n        continue;\n      //ie just an intermediate horz.\n      if (E2.Prev.Bot.X < E.Bot.X)\n        E = E2;\n      break;\n    }\n    return E;\n  };\n  ClipperLib.ClipperBase.prototype.ProcessBound = function (E, IsClockwise)\n  {\n    var EStart = E,\n      Result = E;\n    var Horz;\n    var StartX;\n    if (E.Dx == ClipperLib.ClipperBase.horizontal)\n    {\n      //it's possible for adjacent overlapping horz edges to start heading left\n      //before finishing right, so ...\n      if (IsClockwise)\n        StartX = E.Prev.Bot.X;\n      else\n        StartX = E.Next.Bot.X;\n      if (E.Bot.X != StartX)\n        this.ReverseHorizontal(E);\n    }\n    if (Result.OutIdx != ClipperLib.ClipperBase.Skip)\n    {\n      if (IsClockwise)\n      {\n        while (Result.Top.Y == Result.Next.Bot.Y && Result.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n          Result = Result.Next;\n        if (Result.Dx == ClipperLib.ClipperBase.horizontal && Result.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n        {\n          //nb: at the top of a bound, horizontals are added to the bound\n          //only when the preceding edge attaches to the horizontal's left vertex\n          //unless a Skip edge is encountered when that becomes the top divide\n          Horz = Result;\n          while (Horz.Prev.Dx == ClipperLib.ClipperBase.horizontal)\n            Horz = Horz.Prev;\n          if (Horz.Prev.Top.X == Result.Next.Top.X)\n          {\n            if (!IsClockwise)\n              Result = Horz.Prev;\n          }\n          else if (Horz.Prev.Top.X > Result.Next.Top.X)\n            Result = Horz.Prev;\n        }\n        while (E != Result)\n        {\n          E.NextInLML = E.Next;\n          if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Prev.Top.X)\n            this.ReverseHorizontal(E);\n          E = E.Next;\n        }\n        if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Prev.Top.X)\n          this.ReverseHorizontal(E);\n        Result = Result.Next;\n        //move to the edge just beyond current bound\n      }\n      else\n      {\n        while (Result.Top.Y == Result.Prev.Bot.Y && Result.Prev.OutIdx != ClipperLib.ClipperBase.Skip)\n          Result = Result.Prev;\n        if (Result.Dx == ClipperLib.ClipperBase.horizontal && Result.Prev.OutIdx != ClipperLib.ClipperBase.Skip)\n        {\n          Horz = Result;\n          while (Horz.Next.Dx == ClipperLib.ClipperBase.horizontal)\n            Horz = Horz.Next;\n          if (Horz.Next.Top.X == Result.Prev.Top.X)\n          {\n            if (!IsClockwise)\n              Result = Horz.Next;\n          }\n          else if (Horz.Next.Top.X > Result.Prev.Top.X)\n            Result = Horz.Next;\n        }\n        while (E != Result)\n        {\n          E.NextInLML = E.Prev;\n          if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Next.Top.X)\n            this.ReverseHorizontal(E);\n          E = E.Prev;\n        }\n        if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Next.Top.X)\n          this.ReverseHorizontal(E);\n        Result = Result.Prev;\n        //move to the edge just beyond current bound\n      }\n    }\n    if (Result.OutIdx == ClipperLib.ClipperBase.Skip)\n    {\n      //if edges still remain in the current bound beyond the skip edge then\n      //create another LocMin and call ProcessBound once more\n      E = Result;\n      if (IsClockwise)\n      {\n        while (E.Top.Y == E.Next.Bot.Y)\n          E = E.Next;\n        //don't include top horizontals when parsing a bound a second time,\n        //they will be contained in the opposite bound ...\n        while (E != Result && E.Dx == ClipperLib.ClipperBase.horizontal)\n          E = E.Prev;\n      }\n      else\n      {\n        while (E.Top.Y == E.Prev.Bot.Y)\n          E = E.Prev;\n        while (E != Result && E.Dx == ClipperLib.ClipperBase.horizontal)\n          E = E.Next;\n      }\n      if (E == Result)\n      {\n        if (IsClockwise)\n          Result = E.Next;\n        else\n          Result = E.Prev;\n      }\n      else\n      {\n        //there are more edges in the bound beyond result starting with E\n        if (IsClockwise)\n          E = Result.Next;\n        else\n          E = Result.Prev;\n        var locMin = new ClipperLib.LocalMinima();\n        locMin.Next = null;\n        locMin.Y = E.Bot.Y;\n        locMin.LeftBound = null;\n        locMin.RightBound = E;\n        locMin.RightBound.WindDelta = 0;\n        Result = this.ProcessBound(locMin.RightBound, IsClockwise);\n        this.InsertLocalMinima(locMin);\n      }\n    }\n    return Result;\n  };\n  ClipperLib.ClipperBase.prototype.AddPath = function (pg, polyType, Closed)\n  {\n    if (use_lines)\n    {\n      if (!Closed && polyType == ClipperLib.PolyType.ptClip)\n        ClipperLib.Error(\"AddPath: Open paths must be subject.\");\n    }\n    else\n    {\n      if (!Closed)\n        ClipperLib.Error(\"AddPath: Open paths have been disabled.\");\n    }\n    var highI = pg.length - 1;\n    if (Closed)\n      while (highI > 0 && (ClipperLib.IntPoint.op_Equality(pg[highI], pg[0])))\n    --highI;\n    while (highI > 0 && (ClipperLib.IntPoint.op_Equality(pg[highI], pg[highI - 1])))\n    --highI;\n    if ((Closed && highI < 2) || (!Closed && highI < 1))\n      return false;\n    //create a new edge array ...\n    var edges = new Array();\n    for (var i = 0; i <= highI; i++)\n      edges.push(new ClipperLib.TEdge());\n    var IsFlat = true;\n    //1. Basic (first) edge initialization ...\n\n    //edges[1].Curr = pg[1];\n    edges[1].Curr.X = pg[1].X;\n    edges[1].Curr.Y = pg[1].Y;\n\n    var $1 = {Value: this.m_UseFullRange};\n    this.RangeTest(pg[0], $1);\n    this.m_UseFullRange = $1.Value;\n\n    $1.Value = this.m_UseFullRange;\n    this.RangeTest(pg[highI], $1);\n    this.m_UseFullRange = $1.Value;\n\n    this.InitEdge(edges[0], edges[1], edges[highI], pg[0]);\n    this.InitEdge(edges[highI], edges[0], edges[highI - 1], pg[highI]);\n    for (var i = highI - 1; i >= 1; --i)\n    {\n      $1.Value = this.m_UseFullRange;\n      this.RangeTest(pg[i], $1);\n      this.m_UseFullRange = $1.Value;\n\n      this.InitEdge(edges[i], edges[i + 1], edges[i - 1], pg[i]);\n    }\n\n    var eStart = edges[0];\n    //2. Remove duplicate vertices, and (when closed) collinear edges ...\n    var E = eStart,\n      eLoopStop = eStart;\n    for (;;)\n    {\n      if (ClipperLib.IntPoint.op_Equality(E.Curr, E.Next.Curr))\n      {\n        if (E == E.Next)\n          break;\n        if (E == eStart)\n          eStart = E.Next;\n        E = this.RemoveEdge(E);\n        eLoopStop = E;\n        continue;\n      }\n      if (E.Prev == E.Next)\n        break;\n      else if (Closed && ClipperLib.ClipperBase.SlopesEqual(E.Prev.Curr, E.Curr, E.Next.Curr, this.m_UseFullRange) && (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(E.Prev.Curr, E.Curr, E.Next.Curr)))\n      {\n        //Collinear edges are allowed for open paths but in closed paths\n        //the default is to merge adjacent collinear edges into a single edge.\n        //However, if the PreserveCollinear property is enabled, only overlapping\n        //collinear edges (ie spikes) will be removed from closed paths.\n        if (E == eStart)\n          eStart = E.Next;\n        E = this.RemoveEdge(E);\n        E = E.Prev;\n        eLoopStop = E;\n        continue;\n      }\n      E = E.Next;\n      if (E == eLoopStop)\n        break;\n    }\n    if ((!Closed && (E == E.Next)) || (Closed && (E.Prev == E.Next)))\n      return false;\n    if (!Closed)\n    {\n      this.m_HasOpenPaths = true;\n      eStart.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n    }\n    //3. Do second stage of edge initialization ...\n    var eHighest = eStart;\n    E = eStart;\n    do {\n      this.InitEdge2(E, polyType);\n      E = E.Next;\n      if (IsFlat && E.Curr.Y != eStart.Curr.Y)\n        IsFlat = false;\n    }\n    while (E != eStart)\n    //4. Finally, add edge bounds to LocalMinima list ...\n    //Totally flat paths must be handled differently when adding them\n    //to LocalMinima list to avoid endless loops etc ...\n    if (IsFlat)\n    {\n      if (Closed)\n        return false;\n      E.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n      if (E.Prev.Bot.X < E.Prev.Top.X)\n        this.ReverseHorizontal(E.Prev);\n      var locMin = new ClipperLib.LocalMinima();\n      locMin.Next = null;\n      locMin.Y = E.Bot.Y;\n      locMin.LeftBound = null;\n      locMin.RightBound = E;\n      locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n      locMin.RightBound.WindDelta = 0;\n      while (E.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n      {\n        E.NextInLML = E.Next;\n        if (E.Bot.X != E.Prev.Top.X)\n          this.ReverseHorizontal(E);\n        E = E.Next;\n      }\n      this.InsertLocalMinima(locMin);\n      this.m_edges.push(edges);\n      return true;\n    }\n    this.m_edges.push(edges);\n    var clockwise;\n    var EMin = null;\n    for (;;)\n    {\n      E = this.FindNextLocMin(E);\n      if (E == EMin)\n        break;\n      else if (EMin == null)\n        EMin = E;\n      //E and E.Prev now share a local minima (left aligned if horizontal).\n      //Compare their slopes to find which starts which bound ...\n      var locMin = new ClipperLib.LocalMinima();\n      locMin.Next = null;\n      locMin.Y = E.Bot.Y;\n      if (E.Dx < E.Prev.Dx)\n      {\n        locMin.LeftBound = E.Prev;\n        locMin.RightBound = E;\n        clockwise = false;\n        //Q.nextInLML = Q.prev\n      }\n      else\n      {\n        locMin.LeftBound = E;\n        locMin.RightBound = E.Prev;\n        clockwise = true;\n        //Q.nextInLML = Q.next\n      }\n      locMin.LeftBound.Side = ClipperLib.EdgeSide.esLeft;\n      locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n      if (!Closed)\n        locMin.LeftBound.WindDelta = 0;\n      else if (locMin.LeftBound.Next == locMin.RightBound)\n        locMin.LeftBound.WindDelta = -1;\n      else\n        locMin.LeftBound.WindDelta = 1;\n      locMin.RightBound.WindDelta = -locMin.LeftBound.WindDelta;\n      E = this.ProcessBound(locMin.LeftBound, clockwise);\n      var E2 = this.ProcessBound(locMin.RightBound, !clockwise);\n      if (locMin.LeftBound.OutIdx == ClipperLib.ClipperBase.Skip)\n        locMin.LeftBound = null;\n      else if (locMin.RightBound.OutIdx == ClipperLib.ClipperBase.Skip)\n        locMin.RightBound = null;\n      this.InsertLocalMinima(locMin);\n      if (!clockwise)\n        E = E2;\n    }\n    return true;\n  };\n  ClipperLib.ClipperBase.prototype.AddPaths = function (ppg, polyType, closed)\n  {\n    //  console.log(\"-------------------------------------------\");\n    //  console.log(JSON.stringify(ppg));\n    var result = false;\n    for (var i = 0, ilen = ppg.length; i < ilen; ++i)\n      if (this.AddPath(ppg[i], polyType, closed))\n        result = true;\n    return result;\n  };\n  //------------------------------------------------------------------------------\n  ClipperLib.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3 = function (pt1, pt2, pt3)\n  {\n    if ((ClipperLib.IntPoint.op_Equality(pt1, pt3)) || (ClipperLib.IntPoint.op_Equality(pt1, pt2)) ||\n      (ClipperLib.IntPoint.op_Equality(pt3, pt2)))\n      return false;\n    else if (pt1.X != pt3.X)\n      return (pt2.X > pt1.X) == (pt2.X < pt3.X);\n    else\n      return (pt2.Y > pt1.Y) == (pt2.Y < pt3.Y);\n  };\n  ClipperLib.ClipperBase.prototype.RemoveEdge = function (e)\n  {\n    //removes e from double_linked_list (but without removing from memory)\n    e.Prev.Next = e.Next;\n    e.Next.Prev = e.Prev;\n    var result = e.Next;\n    e.Prev = null; //flag as removed (see ClipperBase.Clear)\n    return result;\n  };\n  ClipperLib.ClipperBase.prototype.SetDx = function (e)\n  {\n    e.Delta.X = (e.Top.X - e.Bot.X);\n    e.Delta.Y = (e.Top.Y - e.Bot.Y);\n    if (e.Delta.Y === 0) e.Dx = ClipperLib.ClipperBase.horizontal;\n    else e.Dx = (e.Delta.X) / (e.Delta.Y);\n  };\n  ClipperLib.ClipperBase.prototype.InsertLocalMinima = function (newLm)\n  {\n    if (this.m_MinimaList === null)\n    {\n      this.m_MinimaList = newLm;\n    }\n    else if (newLm.Y >= this.m_MinimaList.Y)\n    {\n      newLm.Next = this.m_MinimaList;\n      this.m_MinimaList = newLm;\n    }\n    else\n    {\n      var tmpLm = this.m_MinimaList;\n      while (tmpLm.Next !== null && (newLm.Y < tmpLm.Next.Y))\n        tmpLm = tmpLm.Next;\n      newLm.Next = tmpLm.Next;\n      tmpLm.Next = newLm;\n    }\n  };\n  ClipperLib.ClipperBase.prototype.PopLocalMinima = function ()\n  {\n    if (this.m_CurrentLM === null)\n      return;\n    this.m_CurrentLM = this.m_CurrentLM.Next;\n  };\n  ClipperLib.ClipperBase.prototype.ReverseHorizontal = function (e)\n  {\n    //swap horizontal edges' top and bottom x's so they follow the natural\n    //progression of the bounds - ie so their xbots will align with the\n    //adjoining lower edge. [Helpful in the ProcessHorizontal() method.]\n    var tmp = e.Top.X;\n    e.Top.X = e.Bot.X;\n    e.Bot.X = tmp;\n    if (use_xyz)\n    {\n      tmp = e.Top.Z;\n      e.Top.Z = e.Bot.Z;\n      e.Bot.Z = tmp;\n    }\n  };\n  ClipperLib.ClipperBase.prototype.Reset = function ()\n  {\n    this.m_CurrentLM = this.m_MinimaList;\n    if (this.m_CurrentLM == null)\n      return;\n    //ie nothing to process\n    //reset all edges ...\n    var lm = this.m_MinimaList;\n    while (lm != null)\n    {\n      var e = lm.LeftBound;\n      if (e != null)\n      {\n        //e.Curr = e.Bot;\n        e.Curr.X = e.Bot.X;\n        e.Curr.Y = e.Bot.Y;\n        e.Side = ClipperLib.EdgeSide.esLeft;\n        e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n      }\n      e = lm.RightBound;\n      if (e != null)\n      {\n        //e.Curr = e.Bot;\n        e.Curr.X = e.Bot.X;\n        e.Curr.Y = e.Bot.Y;\n        e.Side = ClipperLib.EdgeSide.esRight;\n        e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n      }\n      lm = lm.Next;\n    }\n  };\n  ClipperLib.Clipper = function (InitOptions) // public Clipper(int InitOptions = 0)\n  {\n    if (typeof (InitOptions) == \"undefined\") InitOptions = 0;\n    this.m_PolyOuts = null;\n    this.m_ClipType = ClipperLib.ClipType.ctIntersection;\n    this.m_Scanbeam = null;\n    this.m_ActiveEdges = null;\n    this.m_SortedEdges = null;\n    this.m_IntersectList = null;\n    this.m_IntersectNodeComparer = null;\n    this.m_ExecuteLocked = false;\n    this.m_ClipFillType = ClipperLib.PolyFillType.pftEvenOdd;\n    this.m_SubjFillType = ClipperLib.PolyFillType.pftEvenOdd;\n    this.m_Joins = null;\n    this.m_GhostJoins = null;\n    this.m_UsingPolyTree = false;\n    this.ReverseSolution = false;\n    this.StrictlySimple = false;\n    ClipperLib.ClipperBase.call(this);\n    this.m_Scanbeam = null;\n    this.m_ActiveEdges = null;\n    this.m_SortedEdges = null;\n    this.m_IntersectList = new Array();\n    this.m_IntersectNodeComparer = ClipperLib.MyIntersectNodeSort.Compare;\n    this.m_ExecuteLocked = false;\n    this.m_UsingPolyTree = false;\n    this.m_PolyOuts = new Array();\n    this.m_Joins = new Array();\n    this.m_GhostJoins = new Array();\n    this.ReverseSolution = (1 & InitOptions) !== 0;\n    this.StrictlySimple = (2 & InitOptions) !== 0;\n    this.PreserveCollinear = (4 & InitOptions) !== 0;\n    if (use_xyz)\n    {\n      this.ZFillFunction = null; // function (IntPoint vert1, IntPoint vert2, ref IntPoint intersectPt);\n    }\n  };\n  ClipperLib.Clipper.ioReverseSolution = 1;\n  ClipperLib.Clipper.ioStrictlySimple = 2;\n  ClipperLib.Clipper.ioPreserveCollinear = 4;\n\n  ClipperLib.Clipper.prototype.Clear = function ()\n  {\n    if (this.m_edges.length === 0)\n      return;\n    //avoids problems with ClipperBase destructor\n    this.DisposeAllPolyPts();\n    ClipperLib.ClipperBase.prototype.Clear.call(this);\n  };\n\n  ClipperLib.Clipper.prototype.DisposeScanbeamList = function ()\n  {\n    while (this.m_Scanbeam !== null)\n    {\n      var sb2 = this.m_Scanbeam.Next;\n      this.m_Scanbeam = null;\n      this.m_Scanbeam = sb2;\n    }\n  };\n  ClipperLib.Clipper.prototype.Reset = function ()\n  {\n    ClipperLib.ClipperBase.prototype.Reset.call(this);\n    this.m_Scanbeam = null;\n    this.m_ActiveEdges = null;\n    this.m_SortedEdges = null;\n\n    var lm = this.m_MinimaList;\n    while (lm !== null)\n    {\n      this.InsertScanbeam(lm.Y);\n      lm = lm.Next;\n    }\n  };\n  ClipperLib.Clipper.prototype.InsertScanbeam = function (Y)\n  {\n    if (this.m_Scanbeam === null)\n    {\n      this.m_Scanbeam = new ClipperLib.Scanbeam();\n      this.m_Scanbeam.Next = null;\n      this.m_Scanbeam.Y = Y;\n    }\n    else if (Y > this.m_Scanbeam.Y)\n    {\n      var newSb = new ClipperLib.Scanbeam();\n      newSb.Y = Y;\n      newSb.Next = this.m_Scanbeam;\n      this.m_Scanbeam = newSb;\n    }\n    else\n    {\n      var sb2 = this.m_Scanbeam;\n      while (sb2.Next !== null && (Y <= sb2.Next.Y))\n        sb2 = sb2.Next;\n      if (Y == sb2.Y)\n        return;\n      //ie ignores duplicates\n      var newSb = new ClipperLib.Scanbeam();\n      newSb.Y = Y;\n      newSb.Next = sb2.Next;\n      sb2.Next = newSb;\n    }\n  };\n  // ************************************\n  ClipperLib.Clipper.prototype.Execute = function ()\n  {\n    var a = arguments,\n      alen = a.length,\n      ispolytree = a[1] instanceof ClipperLib.PolyTree;\n    if (alen == 4 && !ispolytree) // function (clipType, solution, subjFillType, clipFillType)\n    {\n      var clipType = a[0],\n        solution = a[1],\n        subjFillType = a[2],\n        clipFillType = a[3];\n      if (this.m_ExecuteLocked)\n        return false;\n      if (this.m_HasOpenPaths)\n        ClipperLib.Error(\"Error: PolyTree struct is need for open path clipping.\");\n      this.m_ExecuteLocked = true;\n      ClipperLib.Clear(solution);\n      this.m_SubjFillType = subjFillType;\n      this.m_ClipFillType = clipFillType;\n      this.m_ClipType = clipType;\n      this.m_UsingPolyTree = false;\n      try\n      {\n        var succeeded = this.ExecuteInternal();\n        //build the return polygons ...\n        if (succeeded) this.BuildResult(solution);\n      }\n      finally\n      {\n        this.DisposeAllPolyPts();\n        this.m_ExecuteLocked = false;\n      }\n      return succeeded;\n    }\n    else if (alen == 4 && ispolytree) // function (clipType, polytree, subjFillType, clipFillType)\n    {\n      var clipType = a[0],\n        polytree = a[1],\n        subjFillType = a[2],\n        clipFillType = a[3];\n      if (this.m_ExecuteLocked)\n        return false;\n      this.m_ExecuteLocked = true;\n      this.m_SubjFillType = subjFillType;\n      this.m_ClipFillType = clipFillType;\n      this.m_ClipType = clipType;\n      this.m_UsingPolyTree = true;\n      try\n      {\n        var succeeded = this.ExecuteInternal();\n        //build the return polygons ...\n        if (succeeded) this.BuildResult2(polytree);\n      }\n      finally\n      {\n        this.DisposeAllPolyPts();\n        this.m_ExecuteLocked = false;\n      }\n      return succeeded;\n    }\n    else if (alen == 2 && !ispolytree) // function (clipType, solution)\n    {\n      var clipType = a[0],\n        solution = a[1];\n      return this.Execute(clipType, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n    }\n    else if (alen == 2 && ispolytree) // function (clipType, polytree)\n    {\n      var clipType = a[0],\n        polytree = a[1];\n      return this.Execute(clipType, polytree, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n    }\n  };\n  ClipperLib.Clipper.prototype.FixHoleLinkage = function (outRec)\n  {\n    //skip if an outermost polygon or\n    //already already points to the correct FirstLeft ...\n    if (outRec.FirstLeft === null || (outRec.IsHole != outRec.FirstLeft.IsHole && outRec.FirstLeft.Pts !== null))\n      return;\n    var orfl = outRec.FirstLeft;\n    while (orfl !== null && ((orfl.IsHole == outRec.IsHole) || orfl.Pts === null))\n      orfl = orfl.FirstLeft;\n    outRec.FirstLeft = orfl;\n  };\n  ClipperLib.Clipper.prototype.ExecuteInternal = function ()\n  {\n    try\n    {\n      this.Reset();\n      if (this.m_CurrentLM === null)\n        return false;\n      var botY = this.PopScanbeam();\n      do {\n        this.InsertLocalMinimaIntoAEL(botY);\n        ClipperLib.Clear(this.m_GhostJoins);\n        this.ProcessHorizontals(false);\n        if (this.m_Scanbeam === null)\n          break;\n        var topY = this.PopScanbeam();\n        //console.log(\"botY:\" + botY + \", topY:\" + topY);\n        if (!this.ProcessIntersections(botY, topY))\n          return false;\n        this.ProcessEdgesAtTopOfScanbeam(topY);\n        botY = topY;\n      }\n      while (this.m_Scanbeam !== null || this.m_CurrentLM !== null)\n      //fix orientations ...\n      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n      {\n        var outRec = this.m_PolyOuts[i];\n        if (outRec.Pts === null || outRec.IsOpen)\n          continue;\n        if ((outRec.IsHole ^ this.ReverseSolution) == (this.Area(outRec) > 0))\n          this.ReversePolyPtLinks(outRec.Pts);\n      }\n      this.JoinCommonEdges();\n      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n      {\n        var outRec = this.m_PolyOuts[i];\n        if (outRec.Pts !== null && !outRec.IsOpen)\n          this.FixupOutPolygon(outRec);\n      }\n      if (this.StrictlySimple)\n        this.DoSimplePolygons();\n      return true;\n    }\n    finally\n    {\n      ClipperLib.Clear(this.m_Joins);\n      ClipperLib.Clear(this.m_GhostJoins);\n    }\n  };\n  ClipperLib.Clipper.prototype.PopScanbeam = function ()\n  {\n    var Y = this.m_Scanbeam.Y;\n    var sb2 = this.m_Scanbeam;\n    this.m_Scanbeam = this.m_Scanbeam.Next;\n    sb2 = null;\n    return Y;\n  };\n  ClipperLib.Clipper.prototype.DisposeAllPolyPts = function ()\n  {\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; ++i)\n      this.DisposeOutRec(i);\n    ClipperLib.Clear(this.m_PolyOuts);\n  };\n  ClipperLib.Clipper.prototype.DisposeOutRec = function (index)\n  {\n    var outRec = this.m_PolyOuts[index];\n    if (outRec.Pts !== null)\n      this.DisposeOutPts(outRec.Pts);\n    outRec = null;\n    this.m_PolyOuts[index] = null;\n  };\n  ClipperLib.Clipper.prototype.DisposeOutPts = function (pp)\n  {\n    if (pp === null)\n      return;\n    var tmpPp = null;\n    pp.Prev.Next = null;\n    while (pp !== null)\n    {\n      tmpPp = pp;\n      pp = pp.Next;\n      tmpPp = null;\n    }\n  };\n  ClipperLib.Clipper.prototype.AddJoin = function (Op1, Op2, OffPt)\n  {\n    var j = new ClipperLib.Join();\n    j.OutPt1 = Op1;\n    j.OutPt2 = Op2;\n    //j.OffPt = OffPt;\n    j.OffPt.X = OffPt.X;\n    j.OffPt.Y = OffPt.Y;\n    this.m_Joins.push(j);\n  };\n  ClipperLib.Clipper.prototype.AddGhostJoin = function (Op, OffPt)\n  {\n    var j = new ClipperLib.Join();\n    j.OutPt1 = Op;\n    //j.OffPt = OffPt;\n    j.OffPt.X = OffPt.X;\n    j.OffPt.Y = OffPt.Y;\n    this.m_GhostJoins.push(j);\n  };\n  if (use_xyz)\n  {\n    ClipperLib.Clipper.prototype.SetZ = function (pt, e)\n    {\n      pt.Z = 0;\n      if (this.ZFillFunction !== null)\n      {\n        //put the 'preferred' point as first parameter ...\n        if (e.OutIdx < 0)\n          this.ZFillFunction(e.Bot, e.Top, pt); //outside a path so presume entering\n        else\n          this.ZFillFunction(e.Top, e.Bot, pt); //inside a path so presume exiting\n      }\n    };\n    //------------------------------------------------------------------------------\n  }\n  ClipperLib.Clipper.prototype.InsertLocalMinimaIntoAEL = function (botY)\n  {\n    while (this.m_CurrentLM !== null && (this.m_CurrentLM.Y == botY))\n    {\n      var lb = this.m_CurrentLM.LeftBound;\n      var rb = this.m_CurrentLM.RightBound;\n      this.PopLocalMinima();\n      var Op1 = null;\n      if (lb === null)\n      {\n        this.InsertEdgeIntoAEL(rb, null);\n        this.SetWindingCount(rb);\n        if (this.IsContributing(rb))\n          Op1 = this.AddOutPt(rb, rb.Bot);\n      }\n      else if (rb == null)\n      {\n        this.InsertEdgeIntoAEL(lb, null);\n        this.SetWindingCount(lb);\n        if (this.IsContributing(lb))\n          Op1 = this.AddOutPt(lb, lb.Bot);\n        this.InsertScanbeam(lb.Top.Y);\n      }\n      else\n      {\n        this.InsertEdgeIntoAEL(lb, null);\n        this.InsertEdgeIntoAEL(rb, lb);\n        this.SetWindingCount(lb);\n        rb.WindCnt = lb.WindCnt;\n        rb.WindCnt2 = lb.WindCnt2;\n        if (this.IsContributing(lb))\n          Op1 = this.AddLocalMinPoly(lb, rb, lb.Bot);\n        this.InsertScanbeam(lb.Top.Y);\n      }\n      if (rb != null)\n      {\n        if (ClipperLib.ClipperBase.IsHorizontal(rb))\n          this.AddEdgeToSEL(rb);\n        else\n          this.InsertScanbeam(rb.Top.Y);\n      }\n      if (lb == null || rb == null) continue;\n      //if output polygons share an Edge with a horizontal rb, they'll need joining later ...\n      if (Op1 !== null && ClipperLib.ClipperBase.IsHorizontal(rb) && this.m_GhostJoins.length > 0 && rb.WindDelta !== 0)\n      {\n        for (var i = 0, ilen = this.m_GhostJoins.length; i < ilen; i++)\n        {\n          //if the horizontal Rb and a 'ghost' horizontal overlap, then convert\n          //the 'ghost' join to a real join ready for later ...\n          var j = this.m_GhostJoins[i];\n          if (this.HorzSegmentsOverlap(j.OutPt1.Pt, j.OffPt, rb.Bot, rb.Top))\n            this.AddJoin(j.OutPt1, Op1, j.OffPt);\n        }\n      }\n      if (lb.OutIdx >= 0 && lb.PrevInAEL !== null &&\n        lb.PrevInAEL.Curr.X == lb.Bot.X &&\n        lb.PrevInAEL.OutIdx >= 0 &&\n        ClipperLib.ClipperBase.SlopesEqual(lb.PrevInAEL, lb, this.m_UseFullRange) &&\n        lb.WindDelta !== 0 && lb.PrevInAEL.WindDelta !== 0)\n      {\n        var Op2 = this.AddOutPt(lb.PrevInAEL, lb.Bot);\n        this.AddJoin(Op1, Op2, lb.Top);\n      }\n      if (lb.NextInAEL != rb)\n      {\n        if (rb.OutIdx >= 0 && rb.PrevInAEL.OutIdx >= 0 &&\n          ClipperLib.ClipperBase.SlopesEqual(rb.PrevInAEL, rb, this.m_UseFullRange) &&\n          rb.WindDelta !== 0 && rb.PrevInAEL.WindDelta !== 0)\n        {\n          var Op2 = this.AddOutPt(rb.PrevInAEL, rb.Bot);\n          this.AddJoin(Op1, Op2, rb.Top);\n        }\n        var e = lb.NextInAEL;\n        if (e !== null)\n          while (e != rb)\n          {\n            //nb: For calculating winding counts etc, IntersectEdges() assumes\n            //that param1 will be to the right of param2 ABOVE the intersection ...\n            this.IntersectEdges(rb, e, lb.Curr, false);\n            //order important here\n            e = e.NextInAEL;\n          }\n      }\n    }\n  };\n  ClipperLib.Clipper.prototype.InsertEdgeIntoAEL = function (edge, startEdge)\n  {\n    if (this.m_ActiveEdges === null)\n    {\n      edge.PrevInAEL = null;\n      edge.NextInAEL = null;\n      this.m_ActiveEdges = edge;\n    }\n    else if (startEdge === null && this.E2InsertsBeforeE1(this.m_ActiveEdges, edge))\n    {\n      edge.PrevInAEL = null;\n      edge.NextInAEL = this.m_ActiveEdges;\n      this.m_ActiveEdges.PrevInAEL = edge;\n      this.m_ActiveEdges = edge;\n    }\n    else\n    {\n      if (startEdge === null)\n        startEdge = this.m_ActiveEdges;\n      while (startEdge.NextInAEL !== null && !this.E2InsertsBeforeE1(startEdge.NextInAEL, edge))\n        startEdge = startEdge.NextInAEL;\n      edge.NextInAEL = startEdge.NextInAEL;\n      if (startEdge.NextInAEL !== null)\n        startEdge.NextInAEL.PrevInAEL = edge;\n      edge.PrevInAEL = startEdge;\n      startEdge.NextInAEL = edge;\n    }\n  };\n  ClipperLib.Clipper.prototype.E2InsertsBeforeE1 = function (e1, e2)\n  {\n    if (e2.Curr.X == e1.Curr.X)\n    {\n      if (e2.Top.Y > e1.Top.Y)\n        return e2.Top.X < ClipperLib.Clipper.TopX(e1, e2.Top.Y);\n      else\n        return e1.Top.X > ClipperLib.Clipper.TopX(e2, e1.Top.Y);\n    }\n    else\n      return e2.Curr.X < e1.Curr.X;\n  };\n  ClipperLib.Clipper.prototype.IsEvenOddFillType = function (edge)\n  {\n    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n      return this.m_SubjFillType == ClipperLib.PolyFillType.pftEvenOdd;\n    else\n      return this.m_ClipFillType == ClipperLib.PolyFillType.pftEvenOdd;\n  };\n  ClipperLib.Clipper.prototype.IsEvenOddAltFillType = function (edge)\n  {\n    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n      return this.m_ClipFillType == ClipperLib.PolyFillType.pftEvenOdd;\n    else\n      return this.m_SubjFillType == ClipperLib.PolyFillType.pftEvenOdd;\n  };\n  ClipperLib.Clipper.prototype.IsContributing = function (edge)\n  {\n    var pft, pft2;\n    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n    {\n      pft = this.m_SubjFillType;\n      pft2 = this.m_ClipFillType;\n    }\n    else\n    {\n      pft = this.m_ClipFillType;\n      pft2 = this.m_SubjFillType;\n    }\n    switch (pft)\n    {\n    case ClipperLib.PolyFillType.pftEvenOdd:\n      if (edge.WindDelta === 0 && edge.WindCnt != 1)\n        return false;\n      break;\n    case ClipperLib.PolyFillType.pftNonZero:\n      if (Math.abs(edge.WindCnt) != 1)\n        return false;\n      break;\n    case ClipperLib.PolyFillType.pftPositive:\n      if (edge.WindCnt != 1)\n        return false;\n      break;\n    default:\n      if (edge.WindCnt != -1)\n        return false;\n      break;\n    }\n    switch (this.m_ClipType)\n    {\n    case ClipperLib.ClipType.ctIntersection:\n      switch (pft2)\n      {\n      case ClipperLib.PolyFillType.pftEvenOdd:\n      case ClipperLib.PolyFillType.pftNonZero:\n        return (edge.WindCnt2 !== 0);\n      case ClipperLib.PolyFillType.pftPositive:\n        return (edge.WindCnt2 > 0);\n      default:\n        return (edge.WindCnt2 < 0);\n      }\n    case ClipperLib.ClipType.ctUnion:\n      switch (pft2)\n      {\n      case ClipperLib.PolyFillType.pftEvenOdd:\n      case ClipperLib.PolyFillType.pftNonZero:\n        return (edge.WindCnt2 === 0);\n      case ClipperLib.PolyFillType.pftPositive:\n        return (edge.WindCnt2 <= 0);\n      default:\n        return (edge.WindCnt2 >= 0);\n      }\n    case ClipperLib.ClipType.ctDifference:\n      if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n        switch (pft2)\n        {\n        case ClipperLib.PolyFillType.pftEvenOdd:\n        case ClipperLib.PolyFillType.pftNonZero:\n          return (edge.WindCnt2 === 0);\n        case ClipperLib.PolyFillType.pftPositive:\n          return (edge.WindCnt2 <= 0);\n        default:\n          return (edge.WindCnt2 >= 0);\n        }\n      else\n        switch (pft2)\n        {\n        case ClipperLib.PolyFillType.pftEvenOdd:\n        case ClipperLib.PolyFillType.pftNonZero:\n          return (edge.WindCnt2 !== 0);\n        case ClipperLib.PolyFillType.pftPositive:\n          return (edge.WindCnt2 > 0);\n        default:\n          return (edge.WindCnt2 < 0);\n        }\n    case ClipperLib.ClipType.ctXor:\n      if (edge.WindDelta === 0)\n        switch (pft2)\n        {\n        case ClipperLib.PolyFillType.pftEvenOdd:\n        case ClipperLib.PolyFillType.pftNonZero:\n          return (edge.WindCnt2 === 0);\n        case ClipperLib.PolyFillType.pftPositive:\n          return (edge.WindCnt2 <= 0);\n        default:\n          return (edge.WindCnt2 >= 0);\n        }\n      else\n        return true;\n    }\n    return true;\n  };\n  ClipperLib.Clipper.prototype.SetWindingCount = function (edge)\n  {\n    var e = edge.PrevInAEL;\n    //find the edge of the same polytype that immediately preceeds 'edge' in AEL\n    while (e !== null && ((e.PolyTyp != edge.PolyTyp) || (e.WindDelta === 0)))\n      e = e.PrevInAEL;\n    if (e === null)\n    {\n      edge.WindCnt = (edge.WindDelta === 0 ? 1 : edge.WindDelta);\n      edge.WindCnt2 = 0;\n      e = this.m_ActiveEdges;\n      //ie get ready to calc WindCnt2\n    }\n    else if (edge.WindDelta === 0 && this.m_ClipType != ClipperLib.ClipType.ctUnion)\n    {\n      edge.WindCnt = 1;\n      edge.WindCnt2 = e.WindCnt2;\n      e = e.NextInAEL;\n      //ie get ready to calc WindCnt2\n    }\n    else if (this.IsEvenOddFillType(edge))\n    {\n      //EvenOdd filling ...\n      if (edge.WindDelta === 0)\n      {\n        //are we inside a subj polygon ...\n        var Inside = true;\n        var e2 = e.PrevInAEL;\n        while (e2 !== null)\n        {\n          if (e2.PolyTyp == e.PolyTyp && e2.WindDelta !== 0)\n            Inside = !Inside;\n          e2 = e2.PrevInAEL;\n        }\n        edge.WindCnt = (Inside ? 0 : 1);\n      }\n      else\n      {\n        edge.WindCnt = edge.WindDelta;\n      }\n      edge.WindCnt2 = e.WindCnt2;\n      e = e.NextInAEL;\n      //ie get ready to calc WindCnt2\n    }\n    else\n    {\n      //nonZero, Positive or Negative filling ...\n      if (e.WindCnt * e.WindDelta < 0)\n      {\n        //prev edge is 'decreasing' WindCount (WC) toward zero\n        //so we're outside the previous polygon ...\n        if (Math.abs(e.WindCnt) > 1)\n        {\n          //outside prev poly but still inside another.\n          //when reversing direction of prev poly use the same WC \n          if (e.WindDelta * edge.WindDelta < 0)\n            edge.WindCnt = e.WindCnt;\n          else\n            edge.WindCnt = e.WindCnt + edge.WindDelta;\n        }\n        else\n          edge.WindCnt = (edge.WindDelta === 0 ? 1 : edge.WindDelta);\n      }\n      else\n      {\n        //prev edge is 'increasing' WindCount (WC) away from zero\n        //so we're inside the previous polygon ...\n        if (edge.WindDelta === 0)\n          edge.WindCnt = (e.WindCnt < 0 ? e.WindCnt - 1 : e.WindCnt + 1);\n        else if (e.WindDelta * edge.WindDelta < 0)\n          edge.WindCnt = e.WindCnt;\n        else\n          edge.WindCnt = e.WindCnt + edge.WindDelta;\n      }\n      edge.WindCnt2 = e.WindCnt2;\n      e = e.NextInAEL;\n      //ie get ready to calc WindCnt2\n    }\n    //update WindCnt2 ...\n    if (this.IsEvenOddAltFillType(edge))\n    {\n      //EvenOdd filling ...\n      while (e != edge)\n      {\n        if (e.WindDelta !== 0)\n          edge.WindCnt2 = (edge.WindCnt2 === 0 ? 1 : 0);\n        e = e.NextInAEL;\n      }\n    }\n    else\n    {\n      //nonZero, Positive or Negative filling ...\n      while (e != edge)\n      {\n        edge.WindCnt2 += e.WindDelta;\n        e = e.NextInAEL;\n      }\n    }\n  };\n  ClipperLib.Clipper.prototype.AddEdgeToSEL = function (edge)\n  {\n    //SEL pointers in PEdge are reused to build a list of horizontal edges.\n    //However, we don't need to worry about order with horizontal edge processing.\n    if (this.m_SortedEdges === null)\n    {\n      this.m_SortedEdges = edge;\n      edge.PrevInSEL = null;\n      edge.NextInSEL = null;\n    }\n    else\n    {\n      edge.NextInSEL = this.m_SortedEdges;\n      edge.PrevInSEL = null;\n      this.m_SortedEdges.PrevInSEL = edge;\n      this.m_SortedEdges = edge;\n    }\n  };\n  ClipperLib.Clipper.prototype.CopyAELToSEL = function ()\n  {\n    var e = this.m_ActiveEdges;\n    this.m_SortedEdges = e;\n    while (e !== null)\n    {\n      e.PrevInSEL = e.PrevInAEL;\n      e.NextInSEL = e.NextInAEL;\n      e = e.NextInAEL;\n    }\n  };\n  ClipperLib.Clipper.prototype.SwapPositionsInAEL = function (edge1, edge2)\n  {\n    //check that one or other edge hasn't already been removed from AEL ...\n    if (edge1.NextInAEL == edge1.PrevInAEL || edge2.NextInAEL == edge2.PrevInAEL)\n      return;\n    if (edge1.NextInAEL == edge2)\n    {\n      var next = edge2.NextInAEL;\n      if (next !== null)\n        next.PrevInAEL = edge1;\n      var prev = edge1.PrevInAEL;\n      if (prev !== null)\n        prev.NextInAEL = edge2;\n      edge2.PrevInAEL = prev;\n      edge2.NextInAEL = edge1;\n      edge1.PrevInAEL = edge2;\n      edge1.NextInAEL = next;\n    }\n    else if (edge2.NextInAEL == edge1)\n    {\n      var next = edge1.NextInAEL;\n      if (next !== null)\n        next.PrevInAEL = edge2;\n      var prev = edge2.PrevInAEL;\n      if (prev !== null)\n        prev.NextInAEL = edge1;\n      edge1.PrevInAEL = prev;\n      edge1.NextInAEL = edge2;\n      edge2.PrevInAEL = edge1;\n      edge2.NextInAEL = next;\n    }\n    else\n    {\n      var next = edge1.NextInAEL;\n      var prev = edge1.PrevInAEL;\n      edge1.NextInAEL = edge2.NextInAEL;\n      if (edge1.NextInAEL !== null)\n        edge1.NextInAEL.PrevInAEL = edge1;\n      edge1.PrevInAEL = edge2.PrevInAEL;\n      if (edge1.PrevInAEL !== null)\n        edge1.PrevInAEL.NextInAEL = edge1;\n      edge2.NextInAEL = next;\n      if (edge2.NextInAEL !== null)\n        edge2.NextInAEL.PrevInAEL = edge2;\n      edge2.PrevInAEL = prev;\n      if (edge2.PrevInAEL !== null)\n        edge2.PrevInAEL.NextInAEL = edge2;\n    }\n    if (edge1.PrevInAEL === null)\n      this.m_ActiveEdges = edge1;\n    else if (edge2.PrevInAEL === null)\n      this.m_ActiveEdges = edge2;\n  };\n  ClipperLib.Clipper.prototype.SwapPositionsInSEL = function (edge1, edge2)\n  {\n    if (edge1.NextInSEL === null && edge1.PrevInSEL === null)\n      return;\n    if (edge2.NextInSEL === null && edge2.PrevInSEL === null)\n      return;\n    if (edge1.NextInSEL == edge2)\n    {\n      var next = edge2.NextInSEL;\n      if (next !== null)\n        next.PrevInSEL = edge1;\n      var prev = edge1.PrevInSEL;\n      if (prev !== null)\n        prev.NextInSEL = edge2;\n      edge2.PrevInSEL = prev;\n      edge2.NextInSEL = edge1;\n      edge1.PrevInSEL = edge2;\n      edge1.NextInSEL = next;\n    }\n    else if (edge2.NextInSEL == edge1)\n    {\n      var next = edge1.NextInSEL;\n      if (next !== null)\n        next.PrevInSEL = edge2;\n      var prev = edge2.PrevInSEL;\n      if (prev !== null)\n        prev.NextInSEL = edge1;\n      edge1.PrevInSEL = prev;\n      edge1.NextInSEL = edge2;\n      edge2.PrevInSEL = edge1;\n      edge2.NextInSEL = next;\n    }\n    else\n    {\n      var next = edge1.NextInSEL;\n      var prev = edge1.PrevInSEL;\n      edge1.NextInSEL = edge2.NextInSEL;\n      if (edge1.NextInSEL !== null)\n        edge1.NextInSEL.PrevInSEL = edge1;\n      edge1.PrevInSEL = edge2.PrevInSEL;\n      if (edge1.PrevInSEL !== null)\n        edge1.PrevInSEL.NextInSEL = edge1;\n      edge2.NextInSEL = next;\n      if (edge2.NextInSEL !== null)\n        edge2.NextInSEL.PrevInSEL = edge2;\n      edge2.PrevInSEL = prev;\n      if (edge2.PrevInSEL !== null)\n        edge2.PrevInSEL.NextInSEL = edge2;\n    }\n    if (edge1.PrevInSEL === null)\n      this.m_SortedEdges = edge1;\n    else if (edge2.PrevInSEL === null)\n      this.m_SortedEdges = edge2;\n  };\n  ClipperLib.Clipper.prototype.AddLocalMaxPoly = function (e1, e2, pt)\n  {\n    this.AddOutPt(e1, pt);\n    if (e2.WindDelta == 0) this.AddOutPt(e2, pt);\n    if (e1.OutIdx == e2.OutIdx)\n    {\n      e1.OutIdx = -1;\n      e2.OutIdx = -1;\n    }\n    else if (e1.OutIdx < e2.OutIdx)\n      this.AppendPolygon(e1, e2);\n    else\n      this.AppendPolygon(e2, e1);\n  };\n  ClipperLib.Clipper.prototype.AddLocalMinPoly = function (e1, e2, pt)\n  {\n    var result;\n    var e, prevE;\n    if (ClipperLib.ClipperBase.IsHorizontal(e2) || (e1.Dx > e2.Dx))\n    {\n      result = this.AddOutPt(e1, pt);\n      e2.OutIdx = e1.OutIdx;\n      e1.Side = ClipperLib.EdgeSide.esLeft;\n      e2.Side = ClipperLib.EdgeSide.esRight;\n      e = e1;\n      if (e.PrevInAEL == e2)\n        prevE = e2.PrevInAEL;\n      else\n        prevE = e.PrevInAEL;\n    }\n    else\n    {\n      result = this.AddOutPt(e2, pt);\n      e1.OutIdx = e2.OutIdx;\n      e1.Side = ClipperLib.EdgeSide.esRight;\n      e2.Side = ClipperLib.EdgeSide.esLeft;\n      e = e2;\n      if (e.PrevInAEL == e1)\n        prevE = e1.PrevInAEL;\n      else\n        prevE = e.PrevInAEL;\n    }\n    if (prevE !== null && prevE.OutIdx >= 0 && (ClipperLib.Clipper.TopX(prevE, pt.Y) == ClipperLib.Clipper.TopX(e, pt.Y)) && ClipperLib.ClipperBase.SlopesEqual(e, prevE, this.m_UseFullRange) && (e.WindDelta !== 0) && (prevE.WindDelta !== 0))\n    {\n      var outPt = this.AddOutPt(prevE, pt);\n      this.AddJoin(result, outPt, e.Top);\n    }\n    return result;\n  };\n  ClipperLib.Clipper.prototype.CreateOutRec = function ()\n  {\n    var result = new ClipperLib.OutRec();\n    result.Idx = -1;\n    result.IsHole = false;\n    result.IsOpen = false;\n    result.FirstLeft = null;\n    result.Pts = null;\n    result.BottomPt = null;\n    result.PolyNode = null;\n    this.m_PolyOuts.push(result);\n    result.Idx = this.m_PolyOuts.length - 1;\n    return result;\n  };\n  ClipperLib.Clipper.prototype.AddOutPt = function (e, pt)\n  {\n    var ToFront = (e.Side == ClipperLib.EdgeSide.esLeft);\n    if (e.OutIdx < 0)\n    {\n      var outRec = this.CreateOutRec();\n      outRec.IsOpen = (e.WindDelta === 0);\n      var newOp = new ClipperLib.OutPt();\n      outRec.Pts = newOp;\n      newOp.Idx = outRec.Idx;\n      //newOp.Pt = pt;\n      newOp.Pt.X = pt.X;\n      newOp.Pt.Y = pt.Y;\n      newOp.Next = newOp;\n      newOp.Prev = newOp;\n      if (!outRec.IsOpen)\n        this.SetHoleState(e, outRec);\n      if (use_xyz)\n      {\n        if (ClipperLib.IntPoint.op_Equality(pt, e.Bot))\n        {\n          //newOp.Pt = e.Bot;\n          newOp.Pt.X = e.Bot.X;\n          newOp.Pt.Y = e.Bot.Y;\n          newOp.Pt.Z = e.Bot.Z;\n        }\n        else if (ClipperLib.IntPoint.op_Equality(pt, e.Top))\n        {\n          //newOp.Pt = e.Top;\n          newOp.Pt.X = e.Top.X;\n          newOp.Pt.Y = e.Top.Y;\n          newOp.Pt.Z = e.Top.Z;\n        }\n        else\n          this.SetZ(newOp.Pt, e);\n      }\n      e.OutIdx = outRec.Idx;\n      //nb: do this after SetZ !\n      return newOp;\n    }\n    else\n    {\n      var outRec = this.m_PolyOuts[e.OutIdx];\n      //OutRec.Pts is the 'Left-most' point & OutRec.Pts.Prev is the 'Right-most'\n      var op = outRec.Pts;\n      if (ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Pt))\n        return op;\n      else if (!ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Prev.Pt))\n        return op.Prev;\n      var newOp = new ClipperLib.OutPt();\n      newOp.Idx = outRec.Idx;\n      //newOp.Pt = pt;\n      newOp.Pt.X = pt.X;\n      newOp.Pt.Y = pt.Y;\n      newOp.Next = op;\n      newOp.Prev = op.Prev;\n      newOp.Prev.Next = newOp;\n      op.Prev = newOp;\n      if (ToFront)\n        outRec.Pts = newOp;\n      if (use_xyz)\n      {\n        if (ClipperLib.IntPoint.op_Equality(pt, e.Bot))\n        {\n          //newOp.Pt = e.Bot;\n          newOp.Pt.X = e.Bot.X;\n          newOp.Pt.Y = e.Bot.Y;\n          newOp.Pt.Z = e.Bot.Z;\n        }\n        else if (ClipperLib.IntPoint.op_Equality(pt, e.Top))\n        {\n          //newOp.Pt = e.Top;\n          newOp.Pt.X = e.Top.X;\n          newOp.Pt.Y = e.Top.Y;\n          newOp.Pt.Z = e.Top.Z;\n        }\n        else\n          this.SetZ(newOp.Pt, e);\n      }\n      return newOp;\n    }\n  };\n  ClipperLib.Clipper.prototype.SwapPoints = function (pt1, pt2)\n  {\n    var tmp = new ClipperLib.IntPoint(pt1.Value);\n    //pt1.Value = pt2.Value;\n    pt1.Value.X = pt2.Value.X;\n    pt1.Value.Y = pt2.Value.Y;\n    //pt2.Value = tmp;\n    pt2.Value.X = tmp.X;\n    pt2.Value.Y = tmp.Y;\n  };\n  ClipperLib.Clipper.prototype.HorzSegmentsOverlap = function (Pt1a, Pt1b, Pt2a, Pt2b)\n  {\n    //precondition: both segments are horizontal\n    if ((Pt1a.X > Pt2a.X) == (Pt1a.X < Pt2b.X))\n      return true;\n    else if ((Pt1b.X > Pt2a.X) == (Pt1b.X < Pt2b.X))\n      return true;\n    else if ((Pt2a.X > Pt1a.X) == (Pt2a.X < Pt1b.X))\n      return true;\n    else if ((Pt2b.X > Pt1a.X) == (Pt2b.X < Pt1b.X))\n      return true;\n    else if ((Pt1a.X == Pt2a.X) && (Pt1b.X == Pt2b.X))\n      return true;\n    else if ((Pt1a.X == Pt2b.X) && (Pt1b.X == Pt2a.X))\n      return true;\n    else\n      return false;\n  };\n  ClipperLib.Clipper.prototype.InsertPolyPtBetween = function (p1, p2, pt)\n  {\n    var result = new ClipperLib.OutPt();\n    //result.Pt = pt;\n    result.Pt.X = pt.X;\n    result.Pt.Y = pt.Y;\n    if (p2 == p1.Next)\n    {\n      p1.Next = result;\n      p2.Prev = result;\n      result.Next = p2;\n      result.Prev = p1;\n    }\n    else\n    {\n      p2.Next = result;\n      p1.Prev = result;\n      result.Next = p1;\n      result.Prev = p2;\n    }\n    return result;\n  };\n  ClipperLib.Clipper.prototype.SetHoleState = function (e, outRec)\n  {\n    var isHole = false;\n    var e2 = e.PrevInAEL;\n    while (e2 !== null)\n    {\n      if (e2.OutIdx >= 0 && e2.WindDelta != 0)\n      {\n        isHole = !isHole;\n        if (outRec.FirstLeft === null)\n          outRec.FirstLeft = this.m_PolyOuts[e2.OutIdx];\n      }\n      e2 = e2.PrevInAEL;\n    }\n    if (isHole)\n      outRec.IsHole = true;\n  };\n  ClipperLib.Clipper.prototype.GetDx = function (pt1, pt2)\n  {\n    if (pt1.Y == pt2.Y)\n      return ClipperLib.ClipperBase.horizontal;\n    else\n      return (pt2.X - pt1.X) / (pt2.Y - pt1.Y);\n  };\n  ClipperLib.Clipper.prototype.FirstIsBottomPt = function (btmPt1, btmPt2)\n  {\n    var p = btmPt1.Prev;\n    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p != btmPt1))\n      p = p.Prev;\n    var dx1p = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n    p = btmPt1.Next;\n    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p != btmPt1))\n      p = p.Next;\n    var dx1n = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n    p = btmPt2.Prev;\n    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p != btmPt2))\n      p = p.Prev;\n    var dx2p = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n    p = btmPt2.Next;\n    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p != btmPt2))\n      p = p.Next;\n    var dx2n = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n    return (dx1p >= dx2p && dx1p >= dx2n) || (dx1n >= dx2p && dx1n >= dx2n);\n  };\n  ClipperLib.Clipper.prototype.GetBottomPt = function (pp)\n  {\n    var dups = null;\n    var p = pp.Next;\n    while (p != pp)\n    {\n      if (p.Pt.Y > pp.Pt.Y)\n      {\n        pp = p;\n        dups = null;\n      }\n      else if (p.Pt.Y == pp.Pt.Y && p.Pt.X <= pp.Pt.X)\n      {\n        if (p.Pt.X < pp.Pt.X)\n        {\n          dups = null;\n          pp = p;\n        }\n        else\n        {\n          if (p.Next != pp && p.Prev != pp)\n            dups = p;\n        }\n      }\n      p = p.Next;\n    }\n    if (dups !== null)\n    {\n      //there appears to be at least 2 vertices at bottomPt so ...\n      while (dups != p)\n      {\n        if (!this.FirstIsBottomPt(p, dups))\n          pp = dups;\n        dups = dups.Next;\n        while (ClipperLib.IntPoint.op_Inequality(dups.Pt, pp.Pt))\n          dups = dups.Next;\n      }\n    }\n    return pp;\n  };\n  ClipperLib.Clipper.prototype.GetLowermostRec = function (outRec1, outRec2)\n  {\n    //work out which polygon fragment has the correct hole state ...\n    if (outRec1.BottomPt === null)\n      outRec1.BottomPt = this.GetBottomPt(outRec1.Pts);\n    if (outRec2.BottomPt === null)\n      outRec2.BottomPt = this.GetBottomPt(outRec2.Pts);\n    var bPt1 = outRec1.BottomPt;\n    var bPt2 = outRec2.BottomPt;\n    if (bPt1.Pt.Y > bPt2.Pt.Y)\n      return outRec1;\n    else if (bPt1.Pt.Y < bPt2.Pt.Y)\n      return outRec2;\n    else if (bPt1.Pt.X < bPt2.Pt.X)\n      return outRec1;\n    else if (bPt1.Pt.X > bPt2.Pt.X)\n      return outRec2;\n    else if (bPt1.Next == bPt1)\n      return outRec2;\n    else if (bPt2.Next == bPt2)\n      return outRec1;\n    else if (this.FirstIsBottomPt(bPt1, bPt2))\n      return outRec1;\n    else\n      return outRec2;\n  };\n  ClipperLib.Clipper.prototype.Param1RightOfParam2 = function (outRec1, outRec2)\n  {\n    do {\n      outRec1 = outRec1.FirstLeft;\n      if (outRec1 == outRec2)\n        return true;\n    }\n    while (outRec1 !== null)\n    return false;\n  };\n  ClipperLib.Clipper.prototype.GetOutRec = function (idx)\n  {\n    var outrec = this.m_PolyOuts[idx];\n    while (outrec != this.m_PolyOuts[outrec.Idx])\n      outrec = this.m_PolyOuts[outrec.Idx];\n    return outrec;\n  };\n  ClipperLib.Clipper.prototype.AppendPolygon = function (e1, e2)\n  {\n    //get the start and ends of both output polygons ...\n    var outRec1 = this.m_PolyOuts[e1.OutIdx];\n    var outRec2 = this.m_PolyOuts[e2.OutIdx];\n    var holeStateRec;\n    if (this.Param1RightOfParam2(outRec1, outRec2))\n      holeStateRec = outRec2;\n    else if (this.Param1RightOfParam2(outRec2, outRec1))\n      holeStateRec = outRec1;\n    else\n      holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n    var p1_lft = outRec1.Pts;\n    var p1_rt = p1_lft.Prev;\n    var p2_lft = outRec2.Pts;\n    var p2_rt = p2_lft.Prev;\n    var side;\n    //join e2 poly onto e1 poly and delete pointers to e2 ...\n    if (e1.Side == ClipperLib.EdgeSide.esLeft)\n    {\n      if (e2.Side == ClipperLib.EdgeSide.esLeft)\n      {\n        //z y x a b c\n        this.ReversePolyPtLinks(p2_lft);\n        p2_lft.Next = p1_lft;\n        p1_lft.Prev = p2_lft;\n        p1_rt.Next = p2_rt;\n        p2_rt.Prev = p1_rt;\n        outRec1.Pts = p2_rt;\n      }\n      else\n      {\n        //x y z a b c\n        p2_rt.Next = p1_lft;\n        p1_lft.Prev = p2_rt;\n        p2_lft.Prev = p1_rt;\n        p1_rt.Next = p2_lft;\n        outRec1.Pts = p2_lft;\n      }\n      side = ClipperLib.EdgeSide.esLeft;\n    }\n    else\n    {\n      if (e2.Side == ClipperLib.EdgeSide.esRight)\n      {\n        //a b c z y x\n        this.ReversePolyPtLinks(p2_lft);\n        p1_rt.Next = p2_rt;\n        p2_rt.Prev = p1_rt;\n        p2_lft.Next = p1_lft;\n        p1_lft.Prev = p2_lft;\n      }\n      else\n      {\n        //a b c x y z\n        p1_rt.Next = p2_lft;\n        p2_lft.Prev = p1_rt;\n        p1_lft.Prev = p2_rt;\n        p2_rt.Next = p1_lft;\n      }\n      side = ClipperLib.EdgeSide.esRight;\n    }\n    outRec1.BottomPt = null;\n    if (holeStateRec == outRec2)\n    {\n      if (outRec2.FirstLeft != outRec1)\n        outRec1.FirstLeft = outRec2.FirstLeft;\n      outRec1.IsHole = outRec2.IsHole;\n    }\n    outRec2.Pts = null;\n    outRec2.BottomPt = null;\n    outRec2.FirstLeft = outRec1;\n    var OKIdx = e1.OutIdx;\n    var ObsoleteIdx = e2.OutIdx;\n    e1.OutIdx = -1;\n    //nb: safe because we only get here via AddLocalMaxPoly\n    e2.OutIdx = -1;\n    var e = this.m_ActiveEdges;\n    while (e !== null)\n    {\n      if (e.OutIdx == ObsoleteIdx)\n      {\n        e.OutIdx = OKIdx;\n        e.Side = side;\n        break;\n      }\n      e = e.NextInAEL;\n    }\n    outRec2.Idx = outRec1.Idx;\n  };\n  ClipperLib.Clipper.prototype.ReversePolyPtLinks = function (pp)\n  {\n    if (pp === null)\n      return;\n    var pp1;\n    var pp2;\n    pp1 = pp;\n    do {\n      pp2 = pp1.Next;\n      pp1.Next = pp1.Prev;\n      pp1.Prev = pp2;\n      pp1 = pp2;\n    }\n    while (pp1 != pp)\n  };\n  ClipperLib.Clipper.SwapSides = function (edge1, edge2)\n  {\n    var side = edge1.Side;\n    edge1.Side = edge2.Side;\n    edge2.Side = side;\n  };\n  ClipperLib.Clipper.SwapPolyIndexes = function (edge1, edge2)\n  {\n    var outIdx = edge1.OutIdx;\n    edge1.OutIdx = edge2.OutIdx;\n    edge2.OutIdx = outIdx;\n  };\n  ClipperLib.Clipper.prototype.IntersectEdges = function (e1, e2, pt, protect)\n  {\n    //e1 will be to the left of e2 BELOW the intersection. Therefore e1 is before\n    //e2 in AEL except when e1 is being inserted at the intersection point ...\n    var e1stops = !protect && e1.NextInLML === null &&\n      e1.Top.X == pt.X && e1.Top.Y == pt.Y;\n    var e2stops = !protect && e2.NextInLML === null &&\n      e2.Top.X == pt.X && e2.Top.Y == pt.Y;\n    var e1Contributing = (e1.OutIdx >= 0);\n    var e2Contributing = (e2.OutIdx >= 0);\n    if (use_lines)\n    {\n      //if either edge is on an OPEN path ...\n      if (e1.WindDelta === 0 || e2.WindDelta === 0)\n      {\n        //ignore subject-subject open path intersections UNLESS they\n        //are both open paths, AND they are both 'contributing maximas' ...\n        if (e1.WindDelta === 0 && e2.WindDelta === 0)\n        {\n          if ((e1stops || e2stops) && e1Contributing && e2Contributing)\n            this.AddLocalMaxPoly(e1, e2, pt);\n        }\n        //if intersecting a subj line with a subj poly ...\n        else if (e1.PolyTyp == e2.PolyTyp &&\n          e1.WindDelta != e2.WindDelta && this.m_ClipType == ClipperLib.ClipType.ctUnion)\n        {\n          if (e1.WindDelta === 0)\n          {\n            if (e2Contributing)\n            {\n              this.AddOutPt(e1, pt);\n              if (e1Contributing)\n                e1.OutIdx = -1;\n            }\n          }\n          else\n          {\n            if (e1Contributing)\n            {\n              this.AddOutPt(e2, pt);\n              if (e2Contributing)\n                e2.OutIdx = -1;\n            }\n          }\n        }\n        else if (e1.PolyTyp != e2.PolyTyp)\n        {\n          if ((e1.WindDelta === 0) && Math.abs(e2.WindCnt) == 1 &&\n            (this.m_ClipType != ClipperLib.ClipType.ctUnion || e2.WindCnt2 === 0))\n          {\n            this.AddOutPt(e1, pt);\n            if (e1Contributing)\n              e1.OutIdx = -1;\n          }\n          else if ((e2.WindDelta === 0) && (Math.abs(e1.WindCnt) == 1) &&\n            (this.m_ClipType != ClipperLib.ClipType.ctUnion || e1.WindCnt2 === 0))\n          {\n            this.AddOutPt(e2, pt);\n            if (e2Contributing)\n              e2.OutIdx = -1;\n          }\n        }\n        if (e1stops)\n          if (e1.OutIdx < 0)\n            this.DeleteFromAEL(e1);\n          else\n            ClipperLib.Error(\"Error intersecting polylines\");\n        if (e2stops)\n          if (e2.OutIdx < 0)\n            this.DeleteFromAEL(e2);\n          else\n            ClipperLib.Error(\"Error intersecting polylines\");\n        return;\n      }\n    }\n    //update winding counts...\n    //assumes that e1 will be to the Right of e2 ABOVE the intersection\n    if (e1.PolyTyp == e2.PolyTyp)\n    {\n      if (this.IsEvenOddFillType(e1))\n      {\n        var oldE1WindCnt = e1.WindCnt;\n        e1.WindCnt = e2.WindCnt;\n        e2.WindCnt = oldE1WindCnt;\n      }\n      else\n      {\n        if (e1.WindCnt + e2.WindDelta === 0)\n          e1.WindCnt = -e1.WindCnt;\n        else\n          e1.WindCnt += e2.WindDelta;\n        if (e2.WindCnt - e1.WindDelta === 0)\n          e2.WindCnt = -e2.WindCnt;\n        else\n          e2.WindCnt -= e1.WindDelta;\n      }\n    }\n    else\n    {\n      if (!this.IsEvenOddFillType(e2))\n        e1.WindCnt2 += e2.WindDelta;\n      else\n        e1.WindCnt2 = (e1.WindCnt2 === 0) ? 1 : 0;\n      if (!this.IsEvenOddFillType(e1))\n        e2.WindCnt2 -= e1.WindDelta;\n      else\n        e2.WindCnt2 = (e2.WindCnt2 === 0) ? 1 : 0;\n    }\n    var e1FillType, e2FillType, e1FillType2, e2FillType2;\n    if (e1.PolyTyp == ClipperLib.PolyType.ptSubject)\n    {\n      e1FillType = this.m_SubjFillType;\n      e1FillType2 = this.m_ClipFillType;\n    }\n    else\n    {\n      e1FillType = this.m_ClipFillType;\n      e1FillType2 = this.m_SubjFillType;\n    }\n    if (e2.PolyTyp == ClipperLib.PolyType.ptSubject)\n    {\n      e2FillType = this.m_SubjFillType;\n      e2FillType2 = this.m_ClipFillType;\n    }\n    else\n    {\n      e2FillType = this.m_ClipFillType;\n      e2FillType2 = this.m_SubjFillType;\n    }\n    var e1Wc, e2Wc;\n    switch (e1FillType)\n    {\n    case ClipperLib.PolyFillType.pftPositive:\n      e1Wc = e1.WindCnt;\n      break;\n    case ClipperLib.PolyFillType.pftNegative:\n      e1Wc = -e1.WindCnt;\n      break;\n    default:\n      e1Wc = Math.abs(e1.WindCnt);\n      break;\n    }\n    switch (e2FillType)\n    {\n    case ClipperLib.PolyFillType.pftPositive:\n      e2Wc = e2.WindCnt;\n      break;\n    case ClipperLib.PolyFillType.pftNegative:\n      e2Wc = -e2.WindCnt;\n      break;\n    default:\n      e2Wc = Math.abs(e2.WindCnt);\n      break;\n    }\n    if (e1Contributing && e2Contributing)\n    {\n      if (e1stops || e2stops || (e1Wc !== 0 && e1Wc != 1) || (e2Wc !== 0 && e2Wc != 1) ||\n        (e1.PolyTyp != e2.PolyTyp && this.m_ClipType != ClipperLib.ClipType.ctXor))\n        this.AddLocalMaxPoly(e1, e2, pt);\n      else\n      {\n        this.AddOutPt(e1, pt);\n        this.AddOutPt(e2, pt);\n        ClipperLib.Clipper.SwapSides(e1, e2);\n        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n      }\n    }\n    else if (e1Contributing)\n    {\n      if (e2Wc === 0 || e2Wc == 1)\n      {\n        this.AddOutPt(e1, pt);\n        ClipperLib.Clipper.SwapSides(e1, e2);\n        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n      }\n    }\n    else if (e2Contributing)\n    {\n      if (e1Wc === 0 || e1Wc == 1)\n      {\n        this.AddOutPt(e2, pt);\n        ClipperLib.Clipper.SwapSides(e1, e2);\n        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n      }\n    }\n    else if ((e1Wc === 0 || e1Wc == 1) &&\n      (e2Wc === 0 || e2Wc == 1) && !e1stops && !e2stops)\n    {\n      //neither edge is currently contributing ...\n      var e1Wc2, e2Wc2;\n      switch (e1FillType2)\n      {\n      case ClipperLib.PolyFillType.pftPositive:\n        e1Wc2 = e1.WindCnt2;\n        break;\n      case ClipperLib.PolyFillType.pftNegative:\n        e1Wc2 = -e1.WindCnt2;\n        break;\n      default:\n        e1Wc2 = Math.abs(e1.WindCnt2);\n        break;\n      }\n      switch (e2FillType2)\n      {\n      case ClipperLib.PolyFillType.pftPositive:\n        e2Wc2 = e2.WindCnt2;\n        break;\n      case ClipperLib.PolyFillType.pftNegative:\n        e2Wc2 = -e2.WindCnt2;\n        break;\n      default:\n        e2Wc2 = Math.abs(e2.WindCnt2);\n        break;\n      }\n      if (e1.PolyTyp != e2.PolyTyp)\n        this.AddLocalMinPoly(e1, e2, pt);\n      else if (e1Wc == 1 && e2Wc == 1)\n        switch (this.m_ClipType)\n        {\n        case ClipperLib.ClipType.ctIntersection:\n          if (e1Wc2 > 0 && e2Wc2 > 0)\n            this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctUnion:\n          if (e1Wc2 <= 0 && e2Wc2 <= 0)\n            this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctDifference:\n          if (((e1.PolyTyp == ClipperLib.PolyType.ptClip) && (e1Wc2 > 0) && (e2Wc2 > 0)) ||\n            ((e1.PolyTyp == ClipperLib.PolyType.ptSubject) && (e1Wc2 <= 0) && (e2Wc2 <= 0)))\n            this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctXor:\n          this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        }\n      else\n        ClipperLib.Clipper.SwapSides(e1, e2);\n    }\n    if ((e1stops != e2stops) &&\n      ((e1stops && (e1.OutIdx >= 0)) || (e2stops && (e2.OutIdx >= 0))))\n    {\n      ClipperLib.Clipper.SwapSides(e1, e2);\n      ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n    }\n    //finally, delete any non-contributing maxima edges  ...\n    if (e1stops)\n      this.DeleteFromAEL(e1);\n    if (e2stops)\n      this.DeleteFromAEL(e2);\n  };\n  ClipperLib.Clipper.prototype.DeleteFromAEL = function (e)\n  {\n    var AelPrev = e.PrevInAEL;\n    var AelNext = e.NextInAEL;\n    if (AelPrev === null && AelNext === null && (e != this.m_ActiveEdges))\n      return;\n    //already deleted\n    if (AelPrev !== null)\n      AelPrev.NextInAEL = AelNext;\n    else\n      this.m_ActiveEdges = AelNext;\n    if (AelNext !== null)\n      AelNext.PrevInAEL = AelPrev;\n    e.NextInAEL = null;\n    e.PrevInAEL = null;\n  };\n  ClipperLib.Clipper.prototype.DeleteFromSEL = function (e)\n  {\n    var SelPrev = e.PrevInSEL;\n    var SelNext = e.NextInSEL;\n    if (SelPrev === null && SelNext === null && (e != this.m_SortedEdges))\n      return;\n    //already deleted\n    if (SelPrev !== null)\n      SelPrev.NextInSEL = SelNext;\n    else\n      this.m_SortedEdges = SelNext;\n    if (SelNext !== null)\n      SelNext.PrevInSEL = SelPrev;\n    e.NextInSEL = null;\n    e.PrevInSEL = null;\n  };\n  ClipperLib.Clipper.prototype.UpdateEdgeIntoAEL = function (e)\n  {\n    if (e.NextInLML === null)\n      ClipperLib.Error(\"UpdateEdgeIntoAEL: invalid call\");\n    var AelPrev = e.PrevInAEL;\n    var AelNext = e.NextInAEL;\n    e.NextInLML.OutIdx = e.OutIdx;\n    if (AelPrev !== null)\n      AelPrev.NextInAEL = e.NextInLML;\n    else\n      this.m_ActiveEdges = e.NextInLML;\n    if (AelNext !== null)\n      AelNext.PrevInAEL = e.NextInLML;\n    e.NextInLML.Side = e.Side;\n    e.NextInLML.WindDelta = e.WindDelta;\n    e.NextInLML.WindCnt = e.WindCnt;\n    e.NextInLML.WindCnt2 = e.WindCnt2;\n    e = e.NextInLML;\n    //    e.Curr = e.Bot;\n    e.Curr.X = e.Bot.X;\n    e.Curr.Y = e.Bot.Y;\n    e.PrevInAEL = AelPrev;\n    e.NextInAEL = AelNext;\n    if (!ClipperLib.ClipperBase.IsHorizontal(e))\n      this.InsertScanbeam(e.Top.Y);\n    return e;\n  };\n  ClipperLib.Clipper.prototype.ProcessHorizontals = function (isTopOfScanbeam)\n  {\n    var horzEdge = this.m_SortedEdges;\n    while (horzEdge !== null)\n    {\n      this.DeleteFromSEL(horzEdge);\n      this.ProcessHorizontal(horzEdge, isTopOfScanbeam);\n      horzEdge = this.m_SortedEdges;\n    }\n  };\n  ClipperLib.Clipper.prototype.GetHorzDirection = function (HorzEdge, $var)\n  {\n    if (HorzEdge.Bot.X < HorzEdge.Top.X)\n    {\n        $var.Left = HorzEdge.Bot.X;\n        $var.Right = HorzEdge.Top.X;\n        $var.Dir = ClipperLib.Direction.dLeftToRight;\n    }\n    else\n    {\n        $var.Left = HorzEdge.Top.X;\n        $var.Right = HorzEdge.Bot.X;\n        $var.Dir = ClipperLib.Direction.dRightToLeft;\n    }\n  };\n  ClipperLib.Clipper.prototype.PrepareHorzJoins = function (horzEdge, isTopOfScanbeam)\n  {\n    //get the last Op for this horizontal edge\n    //the point may be anywhere along the horizontal ...\n    var outPt = this.m_PolyOuts[horzEdge.OutIdx].Pts;\n    if (horzEdge.Side != ClipperLib.EdgeSide.esLeft)\n      outPt = outPt.Prev;\n    //First, match up overlapping horizontal edges (eg when one polygon's\n    //intermediate horz edge overlaps an intermediate horz edge of another, or\n    //when one polygon sits on top of another) ...\n    //for (var i = 0, ilen = this.m_GhostJoins.length; i < ilen; ++i) {\n    //  var j = this.m_GhostJoins[i];\n    //  if (this.HorzSegmentsOverlap(j.OutPt1.Pt, j.OffPt, horzEdge.Bot, horzEdge.Top))\n    //    this.AddJoin(j.OutPt1, outPt, j.OffPt);\n    //}\n\n    //Also, since horizontal edges at the top of one SB are often removed from\n    //the AEL before we process the horizontal edges at the bottom of the next,\n    //we need to create 'ghost' Join records of 'contrubuting' horizontals that\n    //we can compare with horizontals at the bottom of the next SB.\n    if (isTopOfScanbeam)\n      if (ClipperLib.IntPoint.op_Equality(outPt.Pt, horzEdge.Top))\n        this.AddGhostJoin(outPt, horzEdge.Bot);\n      else\n        this.AddGhostJoin(outPt, horzEdge.Top);\n  };\n  ClipperLib.Clipper.prototype.ProcessHorizontal = function (horzEdge, isTopOfScanbeam)\n  {\n    var $var = {Dir: null, Left: null, Right: null};\n    this.GetHorzDirection(horzEdge, $var);\n    var dir = $var.Dir;\n    var horzLeft = $var.Left;\n    var horzRight = $var.Right;\n\n    var eLastHorz = horzEdge,\n      eMaxPair = null;\n    while (eLastHorz.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(eLastHorz.NextInLML))\n      eLastHorz = eLastHorz.NextInLML;\n    if (eLastHorz.NextInLML === null)\n      eMaxPair = this.GetMaximaPair(eLastHorz);\n    for (;;)\n    {\n      var IsLastHorz = (horzEdge == eLastHorz);\n      var e = this.GetNextInAEL(horzEdge, dir);\n      while (e !== null)\n      {\n        //Break if we've got to the end of an intermediate horizontal edge ...\n        //nb: Smaller Dx's are to the right of larger Dx's ABOVE the horizontal.\n        if (e.Curr.X == horzEdge.Top.X && horzEdge.NextInLML !== null && e.Dx < horzEdge.NextInLML.Dx)\n          break;\n        var eNext = this.GetNextInAEL(e, dir);\n        //saves eNext for later\n        if ((dir == ClipperLib.Direction.dLeftToRight && e.Curr.X <= horzRight) || (dir == ClipperLib.Direction.dRightToLeft && e.Curr.X >= horzLeft))\n        {\n\n          if (horzEdge.OutIdx >= 0 && horzEdge.WindDelta != 0)\n            this.PrepareHorzJoins(horzEdge, isTopOfScanbeam);\n\n          //so far we're still in range of the horizontal Edge  but make sure\n          //we're at the last of consec. horizontals when matching with eMaxPair\n          if (e == eMaxPair && IsLastHorz)\n          {\n            if (dir == ClipperLib.Direction.dLeftToRight)\n              this.IntersectEdges(horzEdge, e, e.Top, false);\n            else\n              this.IntersectEdges(e, horzEdge, e.Top, false);\n            if (eMaxPair.OutIdx >= 0)\n              ClipperLib.Error(\"ProcessHorizontal error\");\n            return;\n          }\n          else if (dir == ClipperLib.Direction.dLeftToRight)\n          {\n            var Pt = new ClipperLib.IntPoint(e.Curr.X, horzEdge.Curr.Y);\n            this.IntersectEdges(horzEdge, e, Pt, true);\n          }\n          else\n          {\n            var Pt = new ClipperLib.IntPoint(e.Curr.X, horzEdge.Curr.Y);\n            this.IntersectEdges(e, horzEdge, Pt, true);\n          }\n          this.SwapPositionsInAEL(horzEdge, e);\n        }\n        else if ((dir == ClipperLib.Direction.dLeftToRight && e.Curr.X >= horzRight) || (dir == ClipperLib.Direction.dRightToLeft && e.Curr.X <= horzLeft))\n          break;\n        e = eNext;\n      }\n      //end while\n      if (horzEdge.OutIdx >= 0 && horzEdge.WindDelta !== 0)\n        this.PrepareHorzJoins(horzEdge, isTopOfScanbeam);\n      if (horzEdge.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(horzEdge.NextInLML))\n      {\n        horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n        if (horzEdge.OutIdx >= 0)\n          this.AddOutPt(horzEdge, horzEdge.Bot);\n          \n          var $var = {Dir: dir, Left: horzLeft, Right: horzRight};\n          this.GetHorzDirection(horzEdge, $var);\n          dir = $var.Dir;\n          horzLeft = $var.Left;\n          horzRight = $var.Right;\n      }\n      else\n        break;\n    }\n    //end for (;;)\n    if (horzEdge.NextInLML !== null)\n    {\n      if (horzEdge.OutIdx >= 0)\n      {\n        var op1 = this.AddOutPt(horzEdge, horzEdge.Top);\n        horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n        if (horzEdge.WindDelta === 0)\n          return;\n        //nb: HorzEdge is no longer horizontal here\n        var ePrev = horzEdge.PrevInAEL;\n        var eNext = horzEdge.NextInAEL;\n        if (ePrev !== null && ePrev.Curr.X == horzEdge.Bot.X &&\n          ePrev.Curr.Y == horzEdge.Bot.Y && ePrev.WindDelta !== 0 &&\n          (ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y &&\n            ClipperLib.ClipperBase.SlopesEqual(horzEdge, ePrev, this.m_UseFullRange)))\n        {\n          var op2 = this.AddOutPt(ePrev, horzEdge.Bot);\n          this.AddJoin(op1, op2, horzEdge.Top);\n        }\n        else if (eNext !== null && eNext.Curr.X == horzEdge.Bot.X &&\n          eNext.Curr.Y == horzEdge.Bot.Y && eNext.WindDelta !== 0 &&\n          eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y &&\n          ClipperLib.ClipperBase.SlopesEqual(horzEdge, eNext, this.m_UseFullRange))\n        {\n          var op2 = this.AddOutPt(eNext, horzEdge.Bot);\n          this.AddJoin(op1, op2, horzEdge.Top);\n        }\n      }\n      else horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n    }\n    else if (eMaxPair !== null)\n    {\n      if (eMaxPair.OutIdx >= 0)\n      {\n        if (dir == ClipperLib.Direction.dLeftToRight)\n          this.IntersectEdges(horzEdge, eMaxPair, horzEdge.Top, false);\n        else\n          this.IntersectEdges(eMaxPair, horzEdge, horzEdge.Top, false);\n        if (eMaxPair.OutIdx >= 0)\n          ClipperLib.Error(\"ProcessHorizontal error\");\n      }\n      else\n      {\n        this.DeleteFromAEL(horzEdge);\n        this.DeleteFromAEL(eMaxPair);\n      }\n    }\n    else\n    {\n      if (horzEdge.OutIdx >= 0)\n        this.AddOutPt(horzEdge, horzEdge.Top);\n      this.DeleteFromAEL(horzEdge);\n    }\n  };\n  ClipperLib.Clipper.prototype.GetNextInAEL = function (e, Direction)\n  {\n    return Direction == ClipperLib.Direction.dLeftToRight ? e.NextInAEL : e.PrevInAEL;\n  };\n  ClipperLib.Clipper.prototype.IsMinima = function (e)\n  {\n    return e !== null && (e.Prev.NextInLML != e) && (e.Next.NextInLML != e);\n  };\n  ClipperLib.Clipper.prototype.IsMaxima = function (e, Y)\n  {\n    return (e !== null && e.Top.Y == Y && e.NextInLML === null);\n  };\n  ClipperLib.Clipper.prototype.IsIntermediate = function (e, Y)\n  {\n    return (e.Top.Y == Y && e.NextInLML !== null);\n  };\n  ClipperLib.Clipper.prototype.GetMaximaPair = function (e)\n  {\n    var result = null;\n    if ((ClipperLib.IntPoint.op_Equality(e.Next.Top, e.Top)) && e.Next.NextInLML === null)\n      result = e.Next;\n    else if ((ClipperLib.IntPoint.op_Equality(e.Prev.Top, e.Top)) && e.Prev.NextInLML === null)\n      result = e.Prev;\n    if (result !== null && (result.OutIdx == -2 || (result.NextInAEL == result.PrevInAEL && !ClipperLib.ClipperBase.IsHorizontal(result))))\n      return null;\n    return result;\n  };\n  ClipperLib.Clipper.prototype.ProcessIntersections = function (botY, topY)\n  {\n    if (this.m_ActiveEdges == null)\n      return true;\n    try\n    {\n      this.BuildIntersectList(botY, topY);\n      if (this.m_IntersectList.length == 0)\n        return true;\n      if (this.m_IntersectList.length == 1 || this.FixupIntersectionOrder())\n        this.ProcessIntersectList();\n      else\n        return false;\n    }\n    catch ($$e2)\n    {\n      this.m_SortedEdges = null;\n      this.m_IntersectList.length = 0;\n      ClipperLib.Error(\"ProcessIntersections error\");\n    }\n    this.m_SortedEdges = null;\n    return true;\n  };\n  ClipperLib.Clipper.prototype.BuildIntersectList = function (botY, topY)\n  {\n    if (this.m_ActiveEdges === null)\n      return;\n    //prepare for sorting ...\n    var e = this.m_ActiveEdges;\n    //console.log(JSON.stringify(JSON.decycle( e )));\n    this.m_SortedEdges = e;\n    while (e !== null)\n    {\n      e.PrevInSEL = e.PrevInAEL;\n      e.NextInSEL = e.NextInAEL;\n      e.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n      e = e.NextInAEL;\n    }\n    //bubblesort ...\n    var isModified = true;\n    while (isModified && this.m_SortedEdges !== null)\n    {\n      isModified = false;\n      e = this.m_SortedEdges;\n      while (e.NextInSEL !== null)\n      {\n        var eNext = e.NextInSEL;\n        var pt = new ClipperLib.IntPoint();\n        //console.log(\"e.Curr.X: \" + e.Curr.X + \" eNext.Curr.X\" + eNext.Curr.X);\n        if (e.Curr.X > eNext.Curr.X)\n        {\n          if (!this.IntersectPoint(e, eNext, pt) && e.Curr.X > eNext.Curr.X + 1)\n          {\n            //console.log(\"e.Curr.X: \"+JSON.stringify(JSON.decycle( e.Curr.X )));\n            //console.log(\"eNext.Curr.X+1: \"+JSON.stringify(JSON.decycle( eNext.Curr.X+1)));\n            ClipperLib.Error(\"Intersection error\");\n          }\n          if (pt.Y > botY)\n          {\n            pt.Y = botY;\n            if (Math.abs(e.Dx) > Math.abs(eNext.Dx))\n              pt.X = ClipperLib.Clipper.TopX(eNext, botY);\n            else\n              pt.X = ClipperLib.Clipper.TopX(e, botY);\n          }\n          var newNode = new ClipperLib.IntersectNode();\n          newNode.Edge1 = e;\n          newNode.Edge2 = eNext;\n          //newNode.Pt = pt;\n          newNode.Pt.X = pt.X;\n          newNode.Pt.Y = pt.Y;\n          this.m_IntersectList.push(newNode);\n          this.SwapPositionsInSEL(e, eNext);\n          isModified = true;\n        }\n        else\n          e = eNext;\n      }\n      if (e.PrevInSEL !== null)\n        e.PrevInSEL.NextInSEL = null;\n      else\n        break;\n    }\n    this.m_SortedEdges = null;\n  };\n  ClipperLib.Clipper.prototype.EdgesAdjacent = function (inode)\n  {\n    return (inode.Edge1.NextInSEL == inode.Edge2) || (inode.Edge1.PrevInSEL == inode.Edge2);\n  };\n  ClipperLib.Clipper.IntersectNodeSort = function (node1, node2)\n  {\n    //the following typecast is safe because the differences in Pt.Y will\n    //be limited to the height of the scanbeam.\n    return (node2.Pt.Y - node1.Pt.Y);\n  };\n  ClipperLib.Clipper.prototype.FixupIntersectionOrder = function ()\n  {\n    //pre-condition: intersections are sorted bottom-most first.\n    //Now it's crucial that intersections are made only between adjacent edges,\n    //so to ensure this the order of intersections may need adjusting ...\n    this.m_IntersectList.sort(this.m_IntersectNodeComparer);\n    this.CopyAELToSEL();\n    var cnt = this.m_IntersectList.length;\n    for (var i = 0; i < cnt; i++)\n    {\n      if (!this.EdgesAdjacent(this.m_IntersectList[i]))\n      {\n        var j = i + 1;\n        while (j < cnt && !this.EdgesAdjacent(this.m_IntersectList[j]))\n          j++;\n        if (j == cnt)\n          return false;\n        var tmp = this.m_IntersectList[i];\n        this.m_IntersectList[i] = this.m_IntersectList[j];\n        this.m_IntersectList[j] = tmp;\n      }\n      this.SwapPositionsInSEL(this.m_IntersectList[i].Edge1, this.m_IntersectList[i].Edge2);\n    }\n    return true;\n  };\n  ClipperLib.Clipper.prototype.ProcessIntersectList = function ()\n  {\n    for (var i = 0, ilen = this.m_IntersectList.length; i < ilen; i++)\n    {\n      var iNode = this.m_IntersectList[i];\n      this.IntersectEdges(iNode.Edge1, iNode.Edge2, iNode.Pt, true);\n      this.SwapPositionsInAEL(iNode.Edge1, iNode.Edge2);\n    }\n    this.m_IntersectList.length = 0;\n  };\n  /*\n  --------------------------------\n  Round speedtest: http://jsperf.com/fastest-round\n  --------------------------------\n  */\n  var R1 = function (a)\n  {\n    return a < 0 ? Math.ceil(a - 0.5) : Math.round(a)\n  };\n  var R2 = function (a)\n  {\n    return a < 0 ? Math.ceil(a - 0.5) : Math.floor(a + 0.5)\n  };\n  var R3 = function (a)\n  {\n    return a < 0 ? -Math.round(Math.abs(a)) : Math.round(a)\n  };\n  var R4 = function (a)\n  {\n    if (a < 0)\n    {\n      a -= 0.5;\n      return a < -2147483648 ? Math.ceil(a) : a | 0;\n    }\n    else\n    {\n      a += 0.5;\n      return a > 2147483647 ? Math.floor(a) : a | 0;\n    }\n  };\n  if (browser.msie) ClipperLib.Clipper.Round = R1;\n  else if (browser.chromium) ClipperLib.Clipper.Round = R3;\n  else if (browser.safari) ClipperLib.Clipper.Round = R4;\n  else ClipperLib.Clipper.Round = R2; // eg. browser.chrome || browser.firefox || browser.opera\n  ClipperLib.Clipper.TopX = function (edge, currentY)\n  {\n    //if (edge.Bot == edge.Curr) alert (\"edge.Bot = edge.Curr\");\n    //if (edge.Bot == edge.Top) alert (\"edge.Bot = edge.Top\");\n    if (currentY == edge.Top.Y)\n      return edge.Top.X;\n    return edge.Bot.X + ClipperLib.Clipper.Round(edge.Dx * (currentY - edge.Bot.Y));\n  };\n  ClipperLib.Clipper.prototype.IntersectPoint = function (edge1, edge2, ip)\n  {\n    ip.X = 0;\n    ip.Y = 0;\n    var b1, b2;\n    //nb: with very large coordinate values, it's possible for SlopesEqual() to \n    //return false but for the edge.Dx value be equal due to double precision rounding.\n    if (ClipperLib.ClipperBase.SlopesEqual(edge1, edge2, this.m_UseFullRange) || edge1.Dx == edge2.Dx)\n    {\n      if (edge2.Bot.Y > edge1.Bot.Y)\n      {\n        ip.X = edge2.Bot.X;\n        ip.Y = edge2.Bot.Y;\n      }\n      else\n      {\n        ip.X = edge1.Bot.X;\n        ip.Y = edge1.Bot.Y;\n      }\n      return false;\n    }\n    else if (edge1.Delta.X === 0)\n    {\n      ip.X = edge1.Bot.X;\n      if (ClipperLib.ClipperBase.IsHorizontal(edge2))\n      {\n        ip.Y = edge2.Bot.Y;\n      }\n      else\n      {\n        b2 = edge2.Bot.Y - (edge2.Bot.X / edge2.Dx);\n        ip.Y = ClipperLib.Clipper.Round(ip.X / edge2.Dx + b2);\n      }\n    }\n    else if (edge2.Delta.X === 0)\n    {\n      ip.X = edge2.Bot.X;\n      if (ClipperLib.ClipperBase.IsHorizontal(edge1))\n      {\n        ip.Y = edge1.Bot.Y;\n      }\n      else\n      {\n        b1 = edge1.Bot.Y - (edge1.Bot.X / edge1.Dx);\n        ip.Y = ClipperLib.Clipper.Round(ip.X / edge1.Dx + b1);\n      }\n    }\n    else\n    {\n      b1 = edge1.Bot.X - edge1.Bot.Y * edge1.Dx;\n      b2 = edge2.Bot.X - edge2.Bot.Y * edge2.Dx;\n      var q = (b2 - b1) / (edge1.Dx - edge2.Dx);\n      ip.Y = ClipperLib.Clipper.Round(q);\n      if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n        ip.X = ClipperLib.Clipper.Round(edge1.Dx * q + b1);\n      else\n        ip.X = ClipperLib.Clipper.Round(edge2.Dx * q + b2);\n    }\n    if (ip.Y < edge1.Top.Y || ip.Y < edge2.Top.Y)\n    {\n      if (edge1.Top.Y > edge2.Top.Y)\n      {\n        ip.Y = edge1.Top.Y;\n        ip.X = ClipperLib.Clipper.TopX(edge2, edge1.Top.Y);\n        return ip.X < edge1.Top.X;\n      }\n      else\n        ip.Y = edge2.Top.Y;\n      if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n        ip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n      else\n        ip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n    }\n    return true;\n  };\n  ClipperLib.Clipper.prototype.ProcessEdgesAtTopOfScanbeam = function (topY)\n  {\n    var e = this.m_ActiveEdges;\n    while (e !== null)\n    {\n      //1. process maxima, treating them as if they're 'bent' horizontal edges,\n      //   but exclude maxima with horizontal edges. nb: e can't be a horizontal.\n      var IsMaximaEdge = this.IsMaxima(e, topY);\n      if (IsMaximaEdge)\n      {\n        var eMaxPair = this.GetMaximaPair(e);\n        IsMaximaEdge = (eMaxPair === null || !ClipperLib.ClipperBase.IsHorizontal(eMaxPair));\n      }\n      if (IsMaximaEdge)\n      {\n        var ePrev = e.PrevInAEL;\n        this.DoMaxima(e);\n        if (ePrev === null)\n          e = this.m_ActiveEdges;\n        else\n          e = ePrev.NextInAEL;\n      }\n      else\n      {\n        //2. promote horizontal edges, otherwise update Curr.X and Curr.Y ...\n        if (this.IsIntermediate(e, topY) && ClipperLib.ClipperBase.IsHorizontal(e.NextInLML))\n        {\n          e = this.UpdateEdgeIntoAEL(e);\n          if (e.OutIdx >= 0)\n            this.AddOutPt(e, e.Bot);\n          this.AddEdgeToSEL(e);\n        }\n        else\n        {\n          e.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n          e.Curr.Y = topY;\n        }\n        if (this.StrictlySimple)\n        {\n          var ePrev = e.PrevInAEL;\n          if ((e.OutIdx >= 0) && (e.WindDelta !== 0) && ePrev !== null &&\n            (ePrev.OutIdx >= 0) && (ePrev.Curr.X == e.Curr.X) &&\n            (ePrev.WindDelta !== 0))\n          {\n            var op = this.AddOutPt(ePrev, e.Curr);\n            var op2 = this.AddOutPt(e, e.Curr);\n            this.AddJoin(op, op2, e.Curr);\n            //StrictlySimple (type-3) join\n          }\n        }\n        e = e.NextInAEL;\n      }\n    }\n    //3. Process horizontals at the Top of the scanbeam ...\n    this.ProcessHorizontals(true);\n    //4. Promote intermediate vertices ...\n    e = this.m_ActiveEdges;\n    while (e !== null)\n    {\n      if (this.IsIntermediate(e, topY))\n      {\n        var op = null;\n        if (e.OutIdx >= 0)\n          op = this.AddOutPt(e, e.Top);\n        e = this.UpdateEdgeIntoAEL(e);\n        //if output polygons share an edge, they'll need joining later ...\n        var ePrev = e.PrevInAEL;\n        var eNext = e.NextInAEL;\n        if (ePrev !== null && ePrev.Curr.X == e.Bot.X &&\n          ePrev.Curr.Y == e.Bot.Y && op !== null &&\n          ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y &&\n          ClipperLib.ClipperBase.SlopesEqual(e, ePrev, this.m_UseFullRange) &&\n          (e.WindDelta !== 0) && (ePrev.WindDelta !== 0))\n        {\n          var op2 = this.AddOutPt(ePrev, e.Bot);\n          this.AddJoin(op, op2, e.Top);\n        }\n        else if (eNext !== null && eNext.Curr.X == e.Bot.X &&\n          eNext.Curr.Y == e.Bot.Y && op !== null &&\n          eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y &&\n          ClipperLib.ClipperBase.SlopesEqual(e, eNext, this.m_UseFullRange) &&\n          (e.WindDelta !== 0) && (eNext.WindDelta !== 0))\n        {\n          var op2 = this.AddOutPt(eNext, e.Bot);\n          this.AddJoin(op, op2, e.Top);\n        }\n      }\n      e = e.NextInAEL;\n    }\n  };\n  ClipperLib.Clipper.prototype.DoMaxima = function (e)\n  {\n    var eMaxPair = this.GetMaximaPair(e);\n    if (eMaxPair === null)\n    {\n      if (e.OutIdx >= 0)\n        this.AddOutPt(e, e.Top);\n      this.DeleteFromAEL(e);\n      return;\n    }\n    var eNext = e.NextInAEL;\n    var use_lines = true;\n    while (eNext !== null && eNext != eMaxPair)\n    {\n      this.IntersectEdges(e, eNext, e.Top, true);\n      this.SwapPositionsInAEL(e, eNext);\n      eNext = e.NextInAEL;\n    }\n    if (e.OutIdx == -1 && eMaxPair.OutIdx == -1)\n    {\n      this.DeleteFromAEL(e);\n      this.DeleteFromAEL(eMaxPair);\n    }\n    else if (e.OutIdx >= 0 && eMaxPair.OutIdx >= 0)\n    {\n      this.IntersectEdges(e, eMaxPair, e.Top, false);\n    }\n    else if (use_lines && e.WindDelta === 0)\n    {\n      if (e.OutIdx >= 0)\n      {\n        this.AddOutPt(e, e.Top);\n        e.OutIdx = -1;\n      }\n      this.DeleteFromAEL(e);\n      if (eMaxPair.OutIdx >= 0)\n      {\n        this.AddOutPt(eMaxPair, e.Top);\n        eMaxPair.OutIdx = -1;\n      }\n      this.DeleteFromAEL(eMaxPair);\n    }\n    else\n      ClipperLib.Error(\"DoMaxima error\");\n  };\n  ClipperLib.Clipper.ReversePaths = function (polys)\n  {\n    for (var i = 0, len = polys.length; i < len; i++)\n      polys[i].reverse();\n  };\n  ClipperLib.Clipper.Orientation = function (poly)\n  {\n    return ClipperLib.Clipper.Area(poly) >= 0;\n  };\n  ClipperLib.Clipper.prototype.PointCount = function (pts)\n  {\n    if (pts === null)\n      return 0;\n    var result = 0;\n    var p = pts;\n    do {\n      result++;\n      p = p.Next;\n    }\n    while (p != pts)\n    return result;\n  };\n  ClipperLib.Clipper.prototype.BuildResult = function (polyg)\n  {\n    ClipperLib.Clear(polyg);\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      var outRec = this.m_PolyOuts[i];\n      if (outRec.Pts === null)\n        continue;\n      var p = outRec.Pts.Prev;\n      var cnt = this.PointCount(p);\n      if (cnt < 2)\n        continue;\n      var pg = new Array(cnt);\n      for (var j = 0; j < cnt; j++)\n      {\n        pg[j] = p.Pt;\n        p = p.Prev;\n      }\n      polyg.push(pg);\n    }\n  };\n  ClipperLib.Clipper.prototype.BuildResult2 = function (polytree)\n  {\n    polytree.Clear();\n    //add each output polygon/contour to polytree ...\n    //polytree.m_AllPolys.set_Capacity(this.m_PolyOuts.length);\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      var outRec = this.m_PolyOuts[i];\n      var cnt = this.PointCount(outRec.Pts);\n      if ((outRec.IsOpen && cnt < 2) || (!outRec.IsOpen && cnt < 3))\n        continue;\n      this.FixHoleLinkage(outRec);\n      var pn = new ClipperLib.PolyNode();\n      polytree.m_AllPolys.push(pn);\n      outRec.PolyNode = pn;\n      pn.m_polygon.length = cnt;\n      var op = outRec.Pts.Prev;\n      for (var j = 0; j < cnt; j++)\n      {\n        pn.m_polygon[j] = op.Pt;\n        op = op.Prev;\n      }\n    }\n    //fixup PolyNode links etc ...\n    //polytree.m_Childs.set_Capacity(this.m_PolyOuts.length);\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      var outRec = this.m_PolyOuts[i];\n      if (outRec.PolyNode === null)\n        continue;\n      else if (outRec.IsOpen)\n      {\n        outRec.PolyNode.IsOpen = true;\n        polytree.AddChild(outRec.PolyNode);\n      }\n      else if (outRec.FirstLeft !== null && outRec.FirstLeft.PolyNode != null)\n        outRec.FirstLeft.PolyNode.AddChild(outRec.PolyNode);\n      else\n        polytree.AddChild(outRec.PolyNode);\n    }\n  };\n  ClipperLib.Clipper.prototype.FixupOutPolygon = function (outRec)\n  {\n    //FixupOutPolygon() - removes duplicate points and simplifies consecutive\n    //parallel edges by removing the middle vertex.\n    var lastOK = null;\n    outRec.BottomPt = null;\n    var pp = outRec.Pts;\n    for (;;)\n    {\n      if (pp.Prev == pp || pp.Prev == pp.Next)\n      {\n        this.DisposeOutPts(pp);\n        outRec.Pts = null;\n        return;\n      }\n      //test for duplicate points and collinear edges ...\n      if ((ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Next.Pt)) || (ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Prev.Pt)) ||\n        (ClipperLib.ClipperBase.SlopesEqual(pp.Prev.Pt, pp.Pt, pp.Next.Pt, this.m_UseFullRange) &&\n          (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(pp.Prev.Pt, pp.Pt, pp.Next.Pt))))\n      {\n        lastOK = null;\n        var tmp = pp;\n        pp.Prev.Next = pp.Next;\n        pp.Next.Prev = pp.Prev;\n        pp = pp.Prev;\n        tmp = null;\n      }\n      else if (pp == lastOK)\n        break;\n      else\n      {\n        if (lastOK === null)\n          lastOK = pp;\n        pp = pp.Next;\n      }\n    }\n    outRec.Pts = pp;\n  };\n  ClipperLib.Clipper.prototype.DupOutPt = function (outPt, InsertAfter)\n  {\n    var result = new ClipperLib.OutPt();\n    //result.Pt = outPt.Pt;\n    result.Pt.X = outPt.Pt.X;\n    result.Pt.Y = outPt.Pt.Y;\n    result.Idx = outPt.Idx;\n    if (InsertAfter)\n    {\n      result.Next = outPt.Next;\n      result.Prev = outPt;\n      outPt.Next.Prev = result;\n      outPt.Next = result;\n    }\n    else\n    {\n      result.Prev = outPt.Prev;\n      result.Next = outPt;\n      outPt.Prev.Next = result;\n      outPt.Prev = result;\n    }\n    return result;\n  };\n  ClipperLib.Clipper.prototype.GetOverlap = function (a1, a2, b1, b2, $val)\n  {\n    if (a1 < a2)\n    {\n      if (b1 < b2)\n      {\n        $val.Left = Math.max(a1, b1);\n        $val.Right = Math.min(a2, b2);\n      }\n      else\n      {\n        $val.Left = Math.max(a1, b2);\n        $val.Right = Math.min(a2, b1);\n      }\n    }\n    else\n    {\n      if (b1 < b2)\n      {\n        $val.Left = Math.max(a2, b1);\n        $val.Right = Math.min(a1, b2);\n      }\n      else\n      {\n        $val.Left = Math.max(a2, b2);\n        $val.Right = Math.min(a1, b1);\n      }\n    }\n    return $val.Left < $val.Right;\n  };\n  ClipperLib.Clipper.prototype.JoinHorz = function (op1, op1b, op2, op2b, Pt, DiscardLeft)\n  {\n    var Dir1 = (op1.Pt.X > op1b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n    var Dir2 = (op2.Pt.X > op2b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n    if (Dir1 == Dir2)\n      return false;\n    //When DiscardLeft, we want Op1b to be on the Left of Op1, otherwise we\n    //want Op1b to be on the Right. (And likewise with Op2 and Op2b.)\n    //So, to facilitate this while inserting Op1b and Op2b ...\n    //when DiscardLeft, make sure we're AT or RIGHT of Pt before adding Op1b,\n    //otherwise make sure we're AT or LEFT of Pt. (Likewise with Op2b.)\n    if (Dir1 == ClipperLib.Direction.dLeftToRight)\n    {\n      while (op1.Next.Pt.X <= Pt.X &&\n        op1.Next.Pt.X >= op1.Pt.X && op1.Next.Pt.Y == Pt.Y)\n        op1 = op1.Next;\n      if (DiscardLeft && (op1.Pt.X != Pt.X))\n        op1 = op1.Next;\n      op1b = this.DupOutPt(op1, !DiscardLeft);\n      if (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt))\n      {\n        op1 = op1b;\n        //op1.Pt = Pt;\n        op1.Pt.X = Pt.X;\n        op1.Pt.Y = Pt.Y;\n        op1b = this.DupOutPt(op1, !DiscardLeft);\n      }\n    }\n    else\n    {\n      while (op1.Next.Pt.X >= Pt.X &&\n        op1.Next.Pt.X <= op1.Pt.X && op1.Next.Pt.Y == Pt.Y)\n        op1 = op1.Next;\n      if (!DiscardLeft && (op1.Pt.X != Pt.X))\n        op1 = op1.Next;\n      op1b = this.DupOutPt(op1, DiscardLeft);\n      if (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt))\n      {\n        op1 = op1b;\n        //op1.Pt = Pt;\n        op1.Pt.X = Pt.X;\n        op1.Pt.Y = Pt.Y;\n        op1b = this.DupOutPt(op1, DiscardLeft);\n      }\n    }\n    if (Dir2 == ClipperLib.Direction.dLeftToRight)\n    {\n      while (op2.Next.Pt.X <= Pt.X &&\n        op2.Next.Pt.X >= op2.Pt.X && op2.Next.Pt.Y == Pt.Y)\n        op2 = op2.Next;\n      if (DiscardLeft && (op2.Pt.X != Pt.X))\n        op2 = op2.Next;\n      op2b = this.DupOutPt(op2, !DiscardLeft);\n      if (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt))\n      {\n        op2 = op2b;\n        //op2.Pt = Pt;\n        op2.Pt.X = Pt.X;\n        op2.Pt.Y = Pt.Y;\n        op2b = this.DupOutPt(op2, !DiscardLeft);\n      }\n    }\n    else\n    {\n      while (op2.Next.Pt.X >= Pt.X &&\n        op2.Next.Pt.X <= op2.Pt.X && op2.Next.Pt.Y == Pt.Y)\n        op2 = op2.Next;\n      if (!DiscardLeft && (op2.Pt.X != Pt.X))\n        op2 = op2.Next;\n      op2b = this.DupOutPt(op2, DiscardLeft);\n      if (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt))\n      {\n        op2 = op2b;\n        //op2.Pt = Pt;\n        op2.Pt.X = Pt.X;\n        op2.Pt.Y = Pt.Y;\n        op2b = this.DupOutPt(op2, DiscardLeft);\n      }\n    }\n    if ((Dir1 == ClipperLib.Direction.dLeftToRight) == DiscardLeft)\n    {\n      op1.Prev = op2;\n      op2.Next = op1;\n      op1b.Next = op2b;\n      op2b.Prev = op1b;\n    }\n    else\n    {\n      op1.Next = op2;\n      op2.Prev = op1;\n      op1b.Prev = op2b;\n      op2b.Next = op1b;\n    }\n    return true;\n  };\n  ClipperLib.Clipper.prototype.JoinPoints = function (j, outRec1, outRec2)\n  {\n    var op1 = j.OutPt1,\n      op1b = new ClipperLib.OutPt();\n    var op2 = j.OutPt2,\n      op2b = new ClipperLib.OutPt();\n    //There are 3 kinds of joins for output polygons ...\n    //1. Horizontal joins where Join.OutPt1 & Join.OutPt2 are a vertices anywhere\n    //along (horizontal) collinear edges (& Join.OffPt is on the same horizontal).\n    //2. Non-horizontal joins where Join.OutPt1 & Join.OutPt2 are at the same\n    //location at the Bottom of the overlapping segment (& Join.OffPt is above).\n    //3. StrictlySimple joins where edges touch but are not collinear and where\n    //Join.OutPt1, Join.OutPt2 & Join.OffPt all share the same point.\n    var isHorizontal = (j.OutPt1.Pt.Y == j.OffPt.Y);\n    if (isHorizontal && (ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt1.Pt)) && (ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt2.Pt)))\n    {\n      //Strictly Simple join ...\n      op1b = j.OutPt1.Next;\n      while (op1b != op1 && (ClipperLib.IntPoint.op_Equality(op1b.Pt, j.OffPt)))\n        op1b = op1b.Next;\n      var reverse1 = (op1b.Pt.Y > j.OffPt.Y);\n      op2b = j.OutPt2.Next;\n      while (op2b != op2 && (ClipperLib.IntPoint.op_Equality(op2b.Pt, j.OffPt)))\n        op2b = op2b.Next;\n      var reverse2 = (op2b.Pt.Y > j.OffPt.Y);\n      if (reverse1 == reverse2)\n        return false;\n      if (reverse1)\n      {\n        op1b = this.DupOutPt(op1, false);\n        op2b = this.DupOutPt(op2, true);\n        op1.Prev = op2;\n        op2.Next = op1;\n        op1b.Next = op2b;\n        op2b.Prev = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n      else\n      {\n        op1b = this.DupOutPt(op1, true);\n        op2b = this.DupOutPt(op2, false);\n        op1.Next = op2;\n        op2.Prev = op1;\n        op1b.Prev = op2b;\n        op2b.Next = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n    }\n    else if (isHorizontal)\n    {\n      //treat horizontal joins differently to non-horizontal joins since with\n      //them we're not yet sure where the overlapping is. OutPt1.Pt & OutPt2.Pt\n      //may be anywhere along the horizontal edge.\n      op1b = op1;\n      while (op1.Prev.Pt.Y == op1.Pt.Y && op1.Prev != op1b && op1.Prev != op2)\n        op1 = op1.Prev;\n      while (op1b.Next.Pt.Y == op1b.Pt.Y && op1b.Next != op1 && op1b.Next != op2)\n        op1b = op1b.Next;\n      if (op1b.Next == op1 || op1b.Next == op2)\n        return false;\n      //a flat 'polygon'\n      op2b = op2;\n      while (op2.Prev.Pt.Y == op2.Pt.Y && op2.Prev != op2b && op2.Prev != op1b)\n        op2 = op2.Prev;\n      while (op2b.Next.Pt.Y == op2b.Pt.Y && op2b.Next != op2 && op2b.Next != op1)\n        op2b = op2b.Next;\n      if (op2b.Next == op2 || op2b.Next == op1)\n        return false;\n      //a flat 'polygon'\n      //Op1 -. Op1b & Op2 -. Op2b are the extremites of the horizontal edges\n\n      var $val = {Left: null, Right: null};\n      if (!this.GetOverlap(op1.Pt.X, op1b.Pt.X, op2.Pt.X, op2b.Pt.X, $val))\n        return false;\n      var Left = $val.Left;\n      var Right = $val.Right;\n\n      //DiscardLeftSide: when overlapping edges are joined, a spike will created\n      //which needs to be cleaned up. However, we don't want Op1 or Op2 caught up\n      //on the discard Side as either may still be needed for other joins ...\n      var Pt = new ClipperLib.IntPoint();\n      var DiscardLeftSide;\n      if (op1.Pt.X >= Left && op1.Pt.X <= Right)\n      {\n        //Pt = op1.Pt;\n        Pt.X = op1.Pt.X;\n        Pt.Y = op1.Pt.Y;\n        DiscardLeftSide = (op1.Pt.X > op1b.Pt.X);\n      }\n      else if (op2.Pt.X >= Left && op2.Pt.X <= Right)\n      {\n        //Pt = op2.Pt;\n        Pt.X = op2.Pt.X;\n        Pt.Y = op2.Pt.Y;\n        DiscardLeftSide = (op2.Pt.X > op2b.Pt.X);\n      }\n      else if (op1b.Pt.X >= Left && op1b.Pt.X <= Right)\n      {\n        //Pt = op1b.Pt;\n        Pt.X = op1b.Pt.X;\n        Pt.Y = op1b.Pt.Y;\n        DiscardLeftSide = op1b.Pt.X > op1.Pt.X;\n      }\n      else\n      {\n        //Pt = op2b.Pt;\n        Pt.X = op2b.Pt.X;\n        Pt.Y = op2b.Pt.Y;\n        DiscardLeftSide = (op2b.Pt.X > op2.Pt.X);\n      }\n      j.OutPt1 = op1;\n      j.OutPt2 = op2;\n      return this.JoinHorz(op1, op1b, op2, op2b, Pt, DiscardLeftSide);\n    }\n    else\n    {\n      //nb: For non-horizontal joins ...\n      //    1. Jr.OutPt1.Pt.Y == Jr.OutPt2.Pt.Y\n      //    2. Jr.OutPt1.Pt > Jr.OffPt.Y\n      //make sure the polygons are correctly oriented ...\n      op1b = op1.Next;\n      while ((ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b != op1))\n        op1b = op1b.Next;\n      var Reverse1 = ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange));\n      if (Reverse1)\n      {\n        op1b = op1.Prev;\n        while ((ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b != op1))\n          op1b = op1b.Prev;\n        if ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange))\n          return false;\n      }\n      op2b = op2.Next;\n      while ((ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b != op2))\n        op2b = op2b.Next;\n      var Reverse2 = ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange));\n      if (Reverse2)\n      {\n        op2b = op2.Prev;\n        while ((ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b != op2))\n          op2b = op2b.Prev;\n        if ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange))\n          return false;\n      }\n      if ((op1b == op1) || (op2b == op2) || (op1b == op2b) ||\n        ((outRec1 == outRec2) && (Reverse1 == Reverse2)))\n        return false;\n      if (Reverse1)\n      {\n        op1b = this.DupOutPt(op1, false);\n        op2b = this.DupOutPt(op2, true);\n        op1.Prev = op2;\n        op2.Next = op1;\n        op1b.Next = op2b;\n        op2b.Prev = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n      else\n      {\n        op1b = this.DupOutPt(op1, true);\n        op2b = this.DupOutPt(op2, false);\n        op1.Next = op2;\n        op2.Prev = op1;\n        op1b.Prev = op2b;\n        op2b.Next = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n    }\n  };\n  ClipperLib.Clipper.GetBounds = function (paths)\n  {\n    var i = 0,\n      cnt = paths.length;\n    while (i < cnt && paths[i].length == 0) i++;\n    if (i == cnt) return new ClipperLib.IntRect(0, 0, 0, 0);\n    var result = new ClipperLib.IntRect();\n    result.left = paths[i][0].X;\n    result.right = result.left;\n    result.top = paths[i][0].Y;\n    result.bottom = result.top;\n    for (; i < cnt; i++)\n      for (var j = 0, jlen = paths[i].length; j < jlen; j++)\n      {\n        if (paths[i][j].X < result.left) result.left = paths[i][j].X;\n        else if (paths[i][j].X > result.right) result.right = paths[i][j].X;\n        if (paths[i][j].Y < result.top) result.top = paths[i][j].Y;\n        else if (paths[i][j].Y > result.bottom) result.bottom = paths[i][j].Y;\n      }\n    return result;\n  }\n  ClipperLib.Clipper.prototype.GetBounds2 = function (ops)\n  {\n    var opStart = ops;\n    var result = new ClipperLib.IntRect();\n    result.left = ops.Pt.X;\n    result.right = ops.Pt.X;\n    result.top = ops.Pt.Y;\n    result.bottom = ops.Pt.Y;\n    ops = ops.Next;\n    while (ops != opStart)\n    {\n      if (ops.Pt.X < result.left)\n        result.left = ops.Pt.X;\n      if (ops.Pt.X > result.right)\n        result.right = ops.Pt.X;\n      if (ops.Pt.Y < result.top)\n        result.top = ops.Pt.Y;\n      if (ops.Pt.Y > result.bottom)\n        result.bottom = ops.Pt.Y;\n      ops = ops.Next;\n    }\n    return result;\n  };\n\n  ClipperLib.Clipper.PointInPolygon = function (pt, path)\n  {\n    //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n    //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n    var result = 0,\n      cnt = path.length;\n    if (cnt < 3)\n      return 0;\n    var ip = path[0];\n    for (var i = 1; i <= cnt; ++i)\n    {\n      var ipNext = (i == cnt ? path[0] : path[i]);\n      if (ipNext.Y == pt.Y)\n      {\n        if ((ipNext.X == pt.X) || (ip.Y == pt.Y && ((ipNext.X > pt.X) == (ip.X < pt.X))))\n          return -1;\n      }\n      if ((ip.Y < pt.Y) != (ipNext.Y < pt.Y))\n      {\n        if (ip.X >= pt.X)\n        {\n          if (ipNext.X > pt.X)\n            result = 1 - result;\n          else\n          {\n            var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n            if (d == 0)\n              return -1;\n            else if ((d > 0) == (ipNext.Y > ip.Y))\n              result = 1 - result;\n          }\n        }\n        else\n        {\n          if (ipNext.X > pt.X)\n          {\n            var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n            if (d == 0)\n              return -1;\n            else if ((d > 0) == (ipNext.Y > ip.Y))\n              result = 1 - result;\n          }\n        }\n      }\n      ip = ipNext;\n    }\n    return result;\n  };\n      \n  ClipperLib.Clipper.prototype.PointInPolygon = function (pt, op)\n  {\n    //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n    //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n    var result = 0;\n    var startOp = op;\n    for (;;)\n    {\n      var poly0x = op.Pt.X,\n        poly0y = op.Pt.Y;\n      var poly1x = op.Next.Pt.X,\n        poly1y = op.Next.Pt.Y;\n      if (poly1y == pt.Y)\n      {\n        if ((poly1x == pt.X) || (poly0y == pt.Y && ((poly1x > pt.X) == (poly0x < pt.X))))\n          return -1;\n      }\n      if ((poly0y < pt.Y) != (poly1y < pt.Y))\n      {\n        if (poly0x >= pt.X)\n        {\n          if (poly1x > pt.X)\n            result = 1 - result;\n          else\n          {\n            var d = (poly0x - pt.X) * (poly1y - pt.Y) - (poly1x - pt.X) * (poly0y - pt.Y);\n            if (d == 0)\n              return -1;\n            if ((d > 0) == (poly1y > poly0y))\n              result = 1 - result;\n          }\n        }\n        else\n        {\n          if (poly1x > pt.X)\n          {\n            var d = (poly0x - pt.X) * (poly1y - pt.Y) - (poly1x - pt.X) * (poly0y - pt.Y);\n            if (d == 0)\n              return -1;\n            if ((d > 0) == (poly1y > poly0y))\n              result = 1 - result;\n          }\n        }\n      }\n      op = op.Next;\n      if (startOp == op)\n        break;\n    }\n    return result;\n  };\n\n  ClipperLib.Clipper.prototype.Poly2ContainsPoly1 = function (outPt1, outPt2)\n  {\n    var op = outPt1;\n    do {\n      var res = this.PointInPolygon(op.Pt, outPt2);\n      if (res >= 0)\n        return res != 0;\n      op = op.Next;\n    }\n    while (op != outPt1)\n    return true;\n  };\n  ClipperLib.Clipper.prototype.FixupFirstLefts1 = function (OldOutRec, NewOutRec)\n  {\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      var outRec = this.m_PolyOuts[i];\n      if (outRec.Pts !== null && outRec.FirstLeft == OldOutRec)\n      {\n        if (this.Poly2ContainsPoly1(outRec.Pts, NewOutRec.Pts))\n          outRec.FirstLeft = NewOutRec;\n      }\n    }\n  };\n  ClipperLib.Clipper.prototype.FixupFirstLefts2 = function (OldOutRec, NewOutRec)\n  {\n    for (var $i2 = 0, $t2 = this.m_PolyOuts, $l2 = $t2.length, outRec = $t2[$i2]; $i2 < $l2; $i2++, outRec = $t2[$i2])\n      if (outRec.FirstLeft == OldOutRec)\n        outRec.FirstLeft = NewOutRec;\n  };\n  ClipperLib.Clipper.ParseFirstLeft = function (FirstLeft)\n  {\n    while (FirstLeft != null && FirstLeft.Pts == null)\n      FirstLeft = FirstLeft.FirstLeft;\n    return FirstLeft;\n  };\n  ClipperLib.Clipper.prototype.JoinCommonEdges = function ()\n  {\n    for (var i = 0, ilen = this.m_Joins.length; i < ilen; i++)\n    {\n      var join = this.m_Joins[i];\n      var outRec1 = this.GetOutRec(join.OutPt1.Idx);\n      var outRec2 = this.GetOutRec(join.OutPt2.Idx);\n      if (outRec1.Pts == null || outRec2.Pts == null)\n        continue;\n      //get the polygon fragment with the correct hole state (FirstLeft)\n      //before calling JoinPoints() ...\n      var holeStateRec;\n      if (outRec1 == outRec2)\n        holeStateRec = outRec1;\n      else if (this.Param1RightOfParam2(outRec1, outRec2))\n        holeStateRec = outRec2;\n      else if (this.Param1RightOfParam2(outRec2, outRec1))\n        holeStateRec = outRec1;\n      else\n        holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\n      if (!this.JoinPoints(join, outRec1, outRec2)) continue;\n\n      if (outRec1 == outRec2)\n      {\n        //instead of joining two polygons, we've just created a new one by\n        //splitting one polygon into two.\n        outRec1.Pts = join.OutPt1;\n        outRec1.BottomPt = null;\n        outRec2 = this.CreateOutRec();\n        outRec2.Pts = join.OutPt2;\n        //update all OutRec2.Pts Idx's ...\n        this.UpdateOutPtIdxs(outRec2);\n        //We now need to check every OutRec.FirstLeft pointer. If it points\n        //to OutRec1 it may need to point to OutRec2 instead ...\n        if (this.m_UsingPolyTree)\n          for (var j = 0, jlen = this.m_PolyOuts.length; j < jlen - 1; j++)\n          {\n            var oRec = this.m_PolyOuts[j];\n            if (oRec.Pts == null || ClipperLib.Clipper.ParseFirstLeft(oRec.FirstLeft) != outRec1 || oRec.IsHole == outRec1.IsHole)\n              continue;\n            if (this.Poly2ContainsPoly1(oRec.Pts, join.OutPt2))\n              oRec.FirstLeft = outRec2;\n          }\n        if (this.Poly2ContainsPoly1(outRec2.Pts, outRec1.Pts))\n        {\n          //outRec2 is contained by outRec1 ...\n          outRec2.IsHole = !outRec1.IsHole;\n          outRec2.FirstLeft = outRec1;\n          //fixup FirstLeft pointers that may need reassigning to OutRec1\n          if (this.m_UsingPolyTree)\n            this.FixupFirstLefts2(outRec2, outRec1);\n          if ((outRec2.IsHole ^ this.ReverseSolution) == (this.Area(outRec2) > 0))\n            this.ReversePolyPtLinks(outRec2.Pts);\n        }\n        else if (this.Poly2ContainsPoly1(outRec1.Pts, outRec2.Pts))\n        {\n          //outRec1 is contained by outRec2 ...\n          outRec2.IsHole = outRec1.IsHole;\n          outRec1.IsHole = !outRec2.IsHole;\n          outRec2.FirstLeft = outRec1.FirstLeft;\n          outRec1.FirstLeft = outRec2;\n          //fixup FirstLeft pointers that may need reassigning to OutRec1\n          if (this.m_UsingPolyTree)\n            this.FixupFirstLefts2(outRec1, outRec2);\n          if ((outRec1.IsHole ^ this.ReverseSolution) == (this.Area(outRec1) > 0))\n            this.ReversePolyPtLinks(outRec1.Pts);\n        }\n        else\n        {\n          //the 2 polygons are completely separate ...\n          outRec2.IsHole = outRec1.IsHole;\n          outRec2.FirstLeft = outRec1.FirstLeft;\n          //fixup FirstLeft pointers that may need reassigning to OutRec2\n          if (this.m_UsingPolyTree)\n            this.FixupFirstLefts1(outRec1, outRec2);\n        }\n      }\n      else\n      {\n        //joined 2 polygons together ...\n        outRec2.Pts = null;\n        outRec2.BottomPt = null;\n        outRec2.Idx = outRec1.Idx;\n        outRec1.IsHole = holeStateRec.IsHole;\n        if (holeStateRec == outRec2)\n          outRec1.FirstLeft = outRec2.FirstLeft;\n        outRec2.FirstLeft = outRec1;\n        //fixup FirstLeft pointers that may need reassigning to OutRec1\n        if (this.m_UsingPolyTree)\n          this.FixupFirstLefts2(outRec2, outRec1);\n      }\n    }\n  };\n  ClipperLib.Clipper.prototype.UpdateOutPtIdxs = function (outrec)\n  {\n    var op = outrec.Pts;\n    do {\n      op.Idx = outrec.Idx;\n      op = op.Prev;\n    }\n    while (op != outrec.Pts)\n  };\n  ClipperLib.Clipper.prototype.DoSimplePolygons = function ()\n  {\n    var i = 0;\n    while (i < this.m_PolyOuts.length)\n    {\n      var outrec = this.m_PolyOuts[i++];\n      var op = outrec.Pts;\n      if (op === null)\n        continue;\n      do //for each Pt in Polygon until duplicate found do ...\n      {\n        var op2 = op.Next;\n        while (op2 != outrec.Pts)\n        {\n          if ((ClipperLib.IntPoint.op_Equality(op.Pt, op2.Pt)) && op2.Next != op && op2.Prev != op)\n          {\n            //split the polygon into two ...\n            var op3 = op.Prev;\n            var op4 = op2.Prev;\n            op.Prev = op4;\n            op4.Next = op;\n            op2.Prev = op3;\n            op3.Next = op2;\n            outrec.Pts = op;\n            var outrec2 = this.CreateOutRec();\n            outrec2.Pts = op2;\n            this.UpdateOutPtIdxs(outrec2);\n            if (this.Poly2ContainsPoly1(outrec2.Pts, outrec.Pts))\n            {\n              //OutRec2 is contained by OutRec1 ...\n              outrec2.IsHole = !outrec.IsHole;\n              outrec2.FirstLeft = outrec;\n            }\n            else if (this.Poly2ContainsPoly1(outrec.Pts, outrec2.Pts))\n            {\n              //OutRec1 is contained by OutRec2 ...\n              outrec2.IsHole = outrec.IsHole;\n              outrec.IsHole = !outrec2.IsHole;\n              outrec2.FirstLeft = outrec.FirstLeft;\n              outrec.FirstLeft = outrec2;\n            }\n            else\n            {\n              //the 2 polygons are separate ...\n              outrec2.IsHole = outrec.IsHole;\n              outrec2.FirstLeft = outrec.FirstLeft;\n            }\n            op2 = op;\n            //ie get ready for the next iteration\n          }\n          op2 = op2.Next;\n        }\n        op = op.Next;\n      }\n      while (op != outrec.Pts)\n    }\n  };\n  ClipperLib.Clipper.Area = function (poly)\n  {\n    var cnt = poly.length;\n    if (cnt < 3)\n      return 0;\n    var a = 0;\n    for (var i = 0, j = cnt - 1; i < cnt; ++i)\n    {\n      a += (poly[j].X + poly[i].X) * (poly[j].Y - poly[i].Y);\n      j = i;\n    }\n    return -a * 0.5;\n  };\n  ClipperLib.Clipper.prototype.Area = function (outRec)\n  {\n    var op = outRec.Pts;\n    if (op == null)\n      return 0;\n    var a = 0;\n    do {\n      a = a + (op.Prev.Pt.X + op.Pt.X) * (op.Prev.Pt.Y - op.Pt.Y);\n      op = op.Next;\n    }\n    while (op != outRec.Pts)\n    return a * 0.5;\n  };\n  if (use_deprecated)\n  {\n    ClipperLib.Clipper.OffsetPaths = function (polys, delta, jointype, endtype, MiterLimit)\n    {\n      var result = new ClipperLib.Paths();\n      var co = new ClipperLib.ClipperOffset(MiterLimit, MiterLimit);\n      co.AddPaths(polys, jointype, endtype);\n      co.Execute(result, delta);\n      return result;\n    };\n  }\n  ClipperLib.Clipper.SimplifyPolygon = function (poly, fillType)\n  {\n    var result = new Array();\n    var c = new ClipperLib.Clipper(0);\n    c.StrictlySimple = true;\n    c.AddPath(poly, ClipperLib.PolyType.ptSubject, true);\n    c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n    return result;\n  };\n  ClipperLib.Clipper.SimplifyPolygons = function (polys, fillType)\n  {\n    if (typeof (fillType) == \"undefined\") fillType = ClipperLib.PolyFillType.pftEvenOdd;\n    var result = new Array();\n    var c = new ClipperLib.Clipper(0);\n    c.StrictlySimple = true;\n    c.AddPaths(polys, ClipperLib.PolyType.ptSubject, true);\n    c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n    return result;\n  };\n  ClipperLib.Clipper.DistanceSqrd = function (pt1, pt2)\n  {\n    var dx = (pt1.X - pt2.X);\n    var dy = (pt1.Y - pt2.Y);\n    return (dx * dx + dy * dy);\n  };\n  ClipperLib.Clipper.DistanceFromLineSqrd = function (pt, ln1, ln2)\n  {\n    //The equation of a line in general form (Ax + By + C = 0)\n    //given 2 points (x¹,y¹) & (x²,y²) is ...\n    //(y¹ - y²)x + (x² - x¹)y + (y² - y¹)x¹ - (x² - x¹)y¹ = 0\n    //A = (y¹ - y²); B = (x² - x¹); C = (y² - y¹)x¹ - (x² - x¹)y¹\n    //perpendicular distance of point (x³,y³) = (Ax³ + By³ + C)/Sqrt(A² + B²)\n    //see http://en.wikipedia.org/wiki/Perpendicular_distance\n    var A = ln1.Y - ln2.Y;\n    var B = ln2.X - ln1.X;\n    var C = A * ln1.X + B * ln1.Y;\n    C = A * pt.X + B * pt.Y - C;\n    return (C * C) / (A * A + B * B);\n  };\n  ClipperLib.Clipper.SlopesNearCollinear = function (pt1, pt2, pt3, distSqrd)\n  {\n    return ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n  };\n  ClipperLib.Clipper.PointsAreClose = function (pt1, pt2, distSqrd)\n  {\n    var dx = pt1.X - pt2.X;\n    var dy = pt1.Y - pt2.Y;\n    return ((dx * dx) + (dy * dy) <= distSqrd);\n  };\n  //------------------------------------------------------------------------------\n  ClipperLib.Clipper.ExcludeOp = function (op)\n  {\n    var result = op.Prev;\n    result.Next = op.Next;\n    op.Next.Prev = result;\n    result.Idx = 0;\n    return result;\n  };\n  ClipperLib.Clipper.CleanPolygon = function (path, distance)\n  {\n    if (typeof (distance) == \"undefined\") distance = 1.415;\n    //distance = proximity in units/pixels below which vertices will be stripped. \n    //Default ~= sqrt(2) so when adjacent vertices or semi-adjacent vertices have \n    //both x & y coords within 1 unit, then the second vertex will be stripped.\n    var cnt = path.length;\n    if (cnt == 0)\n      return new Array();\n    var outPts = new Array(cnt);\n    for (var i = 0; i < cnt; ++i)\n      outPts[i] = new ClipperLib.OutPt();\n    for (var i = 0; i < cnt; ++i)\n    {\n      outPts[i].Pt = path[i];\n      outPts[i].Next = outPts[(i + 1) % cnt];\n      outPts[i].Next.Prev = outPts[i];\n      outPts[i].Idx = 0;\n    }\n    var distSqrd = distance * distance;\n    var op = outPts[0];\n    while (op.Idx == 0 && op.Next != op.Prev)\n    {\n      if (ClipperLib.Clipper.PointsAreClose(op.Pt, op.Prev.Pt, distSqrd))\n      {\n        op = ClipperLib.Clipper.ExcludeOp(op);\n        cnt--;\n      }\n      else if (ClipperLib.Clipper.PointsAreClose(op.Prev.Pt, op.Next.Pt, distSqrd))\n      {\n        ClipperLib.Clipper.ExcludeOp(op.Next);\n        op = ClipperLib.Clipper.ExcludeOp(op);\n        cnt -= 2;\n      }\n      else if (ClipperLib.Clipper.SlopesNearCollinear(op.Prev.Pt, op.Pt, op.Next.Pt, distSqrd))\n      {\n        op = ClipperLib.Clipper.ExcludeOp(op);\n        cnt--;\n      }\n      else\n      {\n        op.Idx = 1;\n        op = op.Next;\n      }\n    }\n    if (cnt < 3)\n      cnt = 0;\n    var result = new Array(cnt);\n    for (var i = 0; i < cnt; ++i)\n    {\n      result[i] = new ClipperLib.IntPoint(op.Pt);\n      op = op.Next;\n    }\n    outPts = null;\n    return result;\n  };\n  ClipperLib.Clipper.CleanPolygons = function (polys, distance)\n  {\n    var result = new Array(polys.length);\n    for (var i = 0, ilen = polys.length; i < ilen; i++)\n      result[i] = ClipperLib.Clipper.CleanPolygon(polys[i], distance);\n    return result;\n  };\n  ClipperLib.Clipper.Minkowski = function (pattern, path, IsSum, IsClosed)\n  {\n    var delta = (IsClosed ? 1 : 0);\n    var polyCnt = pattern.length;\n    var pathCnt = path.length;\n    var result = new Array();\n    if (IsSum)\n      for (var i = 0; i < pathCnt; i++)\n      {\n        var p = new Array(polyCnt);\n        for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n          p[j] = new ClipperLib.IntPoint(path[i].X + ip.X, path[i].Y + ip.Y);\n        result.push(p);\n      }\n    else\n      for (var i = 0; i < pathCnt; i++)\n      {\n        var p = new Array(polyCnt);\n        for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n          p[j] = new ClipperLib.IntPoint(path[i].X - ip.X, path[i].Y - ip.Y);\n        result.push(p);\n      }\n    var quads = new Array();\n    for (var i = 0; i < pathCnt - 1 + delta; i++)\n      for (var j = 0; j < polyCnt; j++)\n      {\n        var quad = new Array();\n        quad.push(result[i % pathCnt][j % polyCnt]);\n        quad.push(result[(i + 1) % pathCnt][j % polyCnt]);\n        quad.push(result[(i + 1) % pathCnt][(j + 1) % polyCnt]);\n        quad.push(result[i % pathCnt][(j + 1) % polyCnt]);\n        if (!ClipperLib.Clipper.Orientation(quad))\n          quad.reverse();\n        quads.push(quad);\n      }\n    var c = new ClipperLib.Clipper(0);\n    c.AddPaths(quads, ClipperLib.PolyType.ptSubject, true);\n    c.Execute(ClipperLib.ClipType.ctUnion, result, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n    return result;\n  };\n\n  ClipperLib.Clipper.MinkowskiSum = function ()\n  {\n    var a = arguments,\n      alen = a.length;\n    if (alen == 3) // MinkowskiSum(Path pattern, path, pathIsClosed)\n    {\n      var pattern = a[0],\n        path = a[1],\n        pathIsClosed = a[2];\n      return ClipperLib.Clipper.Minkowski(pattern, path, true, pathIsClosed);\n    }\n    else if (alen == 4) // MinkowskiSum(pattern, paths, pathFillType, pathIsClosed)\n    {\n      var pattern = a[0],\n        paths = a[1],\n        pathFillType = a[2],\n        pathIsClosed = a[3];\n      var c = new ClipperLib.Clipper(),\n        tmp;\n      for (var i = 0, ilen = paths.length; i < ilen; ++i)\n      {\n        var tmp = ClipperLib.Clipper.Minkowski(pattern, paths[i], true, pathIsClosed);\n        c.AddPaths(tmp, ClipperLib.PolyType.ptSubject, true);\n      }\n      if (pathIsClosed) c.AddPaths(paths, ClipperLib.PolyType.ptClip, true);\n      var solution = new ClipperLib.Paths();\n      c.Execute(ClipperLib.ClipType.ctUnion, solution, pathFillType, pathFillType);\n      return solution;\n    }\n  };\n\n  ClipperLib.Clipper.MinkowskiDiff = function (pattern, path, pathIsClosed)\n  {\n    return ClipperLib.Clipper.Minkowski(pattern, path, false, pathIsClosed);\n  };\n\n  ClipperLib.Clipper.PolyTreeToPaths = function (polytree)\n  {\n    var result = new Array();\n    //result.set_Capacity(polytree.get_Total());\n    ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntAny, result);\n    return result;\n  };\n  ClipperLib.Clipper.AddPolyNodeToPaths = function (polynode, nt, paths)\n  {\n    var match = true;\n    switch (nt)\n    {\n    case ClipperLib.Clipper.NodeType.ntOpen:\n      return;\n    case ClipperLib.Clipper.NodeType.ntClosed:\n      match = !polynode.IsOpen;\n      break;\n    default:\n      break;\n    }\n    if (polynode.m_polygon.length > 0 && match)\n      paths.push(polynode.m_polygon);\n    for (var $i3 = 0, $t3 = polynode.Childs(), $l3 = $t3.length, pn = $t3[$i3]; $i3 < $l3; $i3++, pn = $t3[$i3])\n      ClipperLib.Clipper.AddPolyNodeToPaths(pn, nt, paths);\n  };\n  ClipperLib.Clipper.OpenPathsFromPolyTree = function (polytree)\n  {\n    var result = new ClipperLib.Paths();\n    //result.set_Capacity(polytree.ChildCount());\n    for (var i = 0, ilen = polytree.ChildCount(); i < ilen; i++)\n      if (polytree.Childs()[i].IsOpen)\n        result.push(polytree.Childs()[i].m_polygon);\n    return result;\n  };\n  ClipperLib.Clipper.ClosedPathsFromPolyTree = function (polytree)\n  {\n    var result = new ClipperLib.Paths();\n    //result.set_Capacity(polytree.Total());\n    ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntClosed, result);\n    return result;\n  };\n  Inherit(ClipperLib.Clipper, ClipperLib.ClipperBase);\n  ClipperLib.Clipper.NodeType = {\n    ntAny: 0,\n    ntOpen: 1,\n    ntClosed: 2\n  };\n  ClipperLib.ClipperOffset = function (miterLimit, arcTolerance)\n  {\n    if (typeof (miterLimit) == \"undefined\") miterLimit = 2;\n    if (typeof (arcTolerance) == \"undefined\") arcTolerance = ClipperLib.ClipperOffset.def_arc_tolerance;\n    this.m_destPolys = new ClipperLib.Paths();\n    this.m_srcPoly = new ClipperLib.Path();\n    this.m_destPoly = new ClipperLib.Path();\n    this.m_normals = new Array();\n    this.m_delta = 0;\n    this.m_sinA = 0;\n    this.m_sin = 0;\n    this.m_cos = 0;\n    this.m_miterLim = 0;\n    this.m_StepsPerRad = 0;\n    this.m_lowest = new ClipperLib.IntPoint();\n    this.m_polyNodes = new ClipperLib.PolyNode();\n    this.MiterLimit = miterLimit;\n    this.ArcTolerance = arcTolerance;\n    this.m_lowest.X = -1;\n  };\n  ClipperLib.ClipperOffset.two_pi = 6.28318530717959;\n  ClipperLib.ClipperOffset.def_arc_tolerance = 0.25;\n  ClipperLib.ClipperOffset.prototype.Clear = function ()\n  {\n    ClipperLib.Clear(this.m_polyNodes.Childs());\n    this.m_lowest.X = -1;\n  };\n  ClipperLib.ClipperOffset.Round = ClipperLib.Clipper.Round;\n  ClipperLib.ClipperOffset.prototype.AddPath = function (path, joinType, endType)\n  {\n    var highI = path.length - 1;\n    if (highI < 0)\n      return;\n    var newNode = new ClipperLib.PolyNode();\n    newNode.m_jointype = joinType;\n    newNode.m_endtype = endType;\n    //strip duplicate points from path and also get index to the lowest point ...\n    if (endType == ClipperLib.EndType.etClosedLine || endType == ClipperLib.EndType.etClosedPolygon)\n      while (highI > 0 && ClipperLib.IntPoint.op_Equality(path[0], path[highI]))\n        highI--;\n    //newNode.m_polygon.set_Capacity(highI + 1);\n    newNode.m_polygon.push(path[0]);\n    var j = 0,\n      k = 0;\n    for (var i = 1; i <= highI; i++)\n      if (ClipperLib.IntPoint.op_Inequality(newNode.m_polygon[j], path[i]))\n      {\n        j++;\n        newNode.m_polygon.push(path[i]);\n        if (path[i].Y > newNode.m_polygon[k].Y || (path[i].Y == newNode.m_polygon[k].Y && path[i].X < newNode.m_polygon[k].X))\n          k = j;\n      }\n    if ((endType == ClipperLib.EndType.etClosedPolygon && j < 2) || (endType != ClipperLib.EndType.etClosedPolygon && j < 0))\n      return;\n    this.m_polyNodes.AddChild(newNode);\n    //if this path's lowest pt is lower than all the others then update m_lowest\n    if (endType != ClipperLib.EndType.etClosedPolygon)\n      return;\n    if (this.m_lowest.X < 0)\n      this.m_lowest = new ClipperLib.IntPoint(0, k);\n    else\n    {\n      var ip = this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];\n      if (newNode.m_polygon[k].Y > ip.Y || (newNode.m_polygon[k].Y == ip.Y && newNode.m_polygon[k].X < ip.X))\n        this.m_lowest = new ClipperLib.IntPoint(this.m_polyNodes.ChildCount() - 1, k);\n    }\n  };\n  ClipperLib.ClipperOffset.prototype.AddPaths = function (paths, joinType, endType)\n  {\n    for (var i = 0, ilen = paths.length; i < ilen; i++)\n      this.AddPath(paths[i], joinType, endType);\n  };\n  ClipperLib.ClipperOffset.prototype.FixOrientations = function ()\n  {\n    //fixup orientations of all closed paths if the orientation of the\n    //closed path with the lowermost vertex is wrong ...\n    if (this.m_lowest.X >= 0 && !ClipperLib.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))\n    {\n      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n      {\n        var node = this.m_polyNodes.Childs()[i];\n        if (node.m_endtype == ClipperLib.EndType.etClosedPolygon || (node.m_endtype == ClipperLib.EndType.etClosedLine && ClipperLib.Clipper.Orientation(node.m_polygon)))\n          node.m_polygon.reverse();\n      }\n    }\n    else\n    {\n      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n      {\n        var node = this.m_polyNodes.Childs()[i];\n        if (node.m_endtype == ClipperLib.EndType.etClosedLine && !ClipperLib.Clipper.Orientation(node.m_polygon))\n          node.m_polygon.reverse();\n      }\n    }\n  };\n  ClipperLib.ClipperOffset.GetUnitNormal = function (pt1, pt2)\n  {\n    var dx = (pt2.X - pt1.X);\n    var dy = (pt2.Y - pt1.Y);\n    if ((dx == 0) && (dy == 0))\n      return new ClipperLib.DoublePoint(0, 0);\n    var f = 1 / Math.sqrt(dx * dx + dy * dy);\n    dx *= f;\n    dy *= f;\n    return new ClipperLib.DoublePoint(dy, -dx);\n  };\n  ClipperLib.ClipperOffset.prototype.DoOffset = function (delta)\n  {\n    this.m_destPolys = new Array();\n    this.m_delta = delta;\n    //if Zero offset, just copy any CLOSED polygons to m_p and return ...\n    if (ClipperLib.ClipperBase.near_zero(delta))\n    {\n      //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount);\n      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n      {\n        var node = this.m_polyNodes.Childs()[i];\n        if (node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n          this.m_destPolys.push(node.m_polygon);\n      }\n      return;\n    }\n    //see offset_triginometry3.svg in the documentation folder ...\n    if (this.MiterLimit > 2)\n      this.m_miterLim = 2 / (this.MiterLimit * this.MiterLimit);\n    else\n      this.m_miterLim = 0.5;\n    var y;\n    if (this.ArcTolerance <= 0)\n      y = ClipperLib.ClipperOffset.def_arc_tolerance;\n    else if (this.ArcTolerance > Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance)\n      y = Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance;\n    else\n      y = this.ArcTolerance;\n    //see offset_triginometry2.svg in the documentation folder ...\n    var steps = 3.14159265358979 / Math.acos(1 - y / Math.abs(delta));\n    this.m_sin = Math.sin(ClipperLib.ClipperOffset.two_pi / steps);\n    this.m_cos = Math.cos(ClipperLib.ClipperOffset.two_pi / steps);\n    this.m_StepsPerRad = steps / ClipperLib.ClipperOffset.two_pi;\n    if (delta < 0)\n      this.m_sin = -this.m_sin;\n    //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount * 2);\n    for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n    {\n      var node = this.m_polyNodes.Childs()[i];\n      this.m_srcPoly = node.m_polygon;\n      var len = this.m_srcPoly.length;\n      if (len == 0 || (delta <= 0 && (len < 3 || node.m_endtype != ClipperLib.EndType.etClosedPolygon)))\n        continue;\n      this.m_destPoly = new Array();\n      if (len == 1)\n      {\n        if (node.m_jointype == ClipperLib.JoinType.jtRound)\n        {\n          var X = 1,\n            Y = 0;\n          for (var j = 1; j <= steps; j++)\n          {\n            this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));\n            var X2 = X;\n            X = X * this.m_cos - this.m_sin * Y;\n            Y = X2 * this.m_sin + Y * this.m_cos;\n          }\n        }\n        else\n        {\n          var X = -1,\n            Y = -1;\n          for (var j = 0; j < 4; ++j)\n          {\n            this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));\n            if (X < 0)\n              X = 1;\n            else if (Y < 0)\n              Y = 1;\n            else\n              X = -1;\n          }\n        }\n        this.m_destPolys.push(this.m_destPoly);\n        continue;\n      }\n      //build m_normals ...\n      this.m_normals.length = 0;\n      //this.m_normals.set_Capacity(len);\n      for (var j = 0; j < len - 1; j++)\n        this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[j], this.m_srcPoly[j + 1]));\n      if (node.m_endtype == ClipperLib.EndType.etClosedLine || node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n        this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[len - 1], this.m_srcPoly[0]));\n      else\n        this.m_normals.push(new ClipperLib.DoublePoint(this.m_normals[len - 2]));\n      if (node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n      {\n        var k = len - 1;\n        for (var j = 0; j < len; j++)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        this.m_destPolys.push(this.m_destPoly);\n      }\n      else if (node.m_endtype == ClipperLib.EndType.etClosedLine)\n      {\n        var k = len - 1;\n        for (var j = 0; j < len; j++)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        this.m_destPolys.push(this.m_destPoly);\n        this.m_destPoly = new Array();\n        //re-build m_normals ...\n        var n = this.m_normals[len - 1];\n        for (var j = len - 1; j > 0; j--)\n          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n        this.m_normals[0] = new ClipperLib.DoublePoint(-n.X, -n.Y);\n        k = 0;\n        for (var j = len - 1; j >= 0; j--)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        this.m_destPolys.push(this.m_destPoly);\n      }\n      else\n      {\n        var k = 0;\n        for (var j = 1; j < len - 1; ++j)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        var pt1;\n        if (node.m_endtype == ClipperLib.EndType.etOpenButt)\n        {\n          var j = len - 1;\n          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * delta));\n          this.m_destPoly.push(pt1);\n          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X - this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y - this.m_normals[j].Y * delta));\n          this.m_destPoly.push(pt1);\n        }\n        else\n        {\n          var j = len - 1;\n          k = len - 2;\n          this.m_sinA = 0;\n          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j].X, -this.m_normals[j].Y);\n          if (node.m_endtype == ClipperLib.EndType.etOpenSquare)\n            this.DoSquare(j, k);\n          else\n            this.DoRound(j, k);\n        }\n        //re-build m_normals ...\n        for (var j = len - 1; j > 0; j--)\n          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n        this.m_normals[0] = new ClipperLib.DoublePoint(-this.m_normals[1].X, -this.m_normals[1].Y);\n        k = len - 1;\n        for (var j = k - 1; j > 0; --j)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        if (node.m_endtype == ClipperLib.EndType.etOpenButt)\n        {\n          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X - this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y - this.m_normals[0].Y * delta));\n          this.m_destPoly.push(pt1);\n          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + this.m_normals[0].Y * delta));\n          this.m_destPoly.push(pt1);\n        }\n        else\n        {\n          k = 1;\n          this.m_sinA = 0;\n          if (node.m_endtype == ClipperLib.EndType.etOpenSquare)\n            this.DoSquare(0, 1);\n          else\n            this.DoRound(0, 1);\n        }\n        this.m_destPolys.push(this.m_destPoly);\n      }\n    }\n  };\n  ClipperLib.ClipperOffset.prototype.Execute = function ()\n  {\n    var a = arguments,\n      ispolytree = a[0] instanceof ClipperLib.PolyTree;\n    if (!ispolytree) // function (solution, delta)\n    {\n      var solution = a[0],\n        delta = a[1];\n      ClipperLib.Clear(solution);\n      this.FixOrientations();\n      this.DoOffset(delta);\n      //now clean up 'corners' ...\n      var clpr = new ClipperLib.Clipper(0);\n      clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n      if (delta > 0)\n      {\n        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n      }\n      else\n      {\n        var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n        var outer = new ClipperLib.Path();\n        outer.push(new ClipperLib.IntPoint(r.left - 10, r.bottom + 10));\n        outer.push(new ClipperLib.IntPoint(r.right + 10, r.bottom + 10));\n        outer.push(new ClipperLib.IntPoint(r.right + 10, r.top - 10));\n        outer.push(new ClipperLib.IntPoint(r.left - 10, r.top - 10));\n        clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n        clpr.ReverseSolution = true;\n        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n        if (solution.length > 0)\n          solution.splice(0, 1);\n      }\n      //console.log(JSON.stringify(solution));\n    }\n    else // function (polytree, delta)\n    {\n      var solution = a[0],\n        delta = a[1];\n      solution.Clear();\n      this.FixOrientations();\n      this.DoOffset(delta);\n      //now clean up 'corners' ...\n      var clpr = new ClipperLib.Clipper(0);\n      clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n      if (delta > 0)\n      {\n        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n      }\n      else\n      {\n        var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n        var outer = new ClipperLib.Path();\n        outer.push(new ClipperLib.IntPoint(r.left - 10, r.bottom + 10));\n        outer.push(new ClipperLib.IntPoint(r.right + 10, r.bottom + 10));\n        outer.push(new ClipperLib.IntPoint(r.right + 10, r.top - 10));\n        outer.push(new ClipperLib.IntPoint(r.left - 10, r.top - 10));\n        clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n        clpr.ReverseSolution = true;\n        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n        //remove the outer PolyNode rectangle ...\n        if (solution.ChildCount() == 1 && solution.Childs()[0].ChildCount() > 0)\n        {\n          var outerNode = solution.Childs()[0];\n          //solution.Childs.set_Capacity(outerNode.ChildCount);\n          solution.Childs()[0] = outerNode.Childs()[0];\n          for (var i = 1; i < outerNode.ChildCount(); i++)\n            solution.AddChild(outerNode.Childs()[i]);\n        }\n        else\n          solution.Clear();\n      }\n    }\n  };\n  ClipperLib.ClipperOffset.prototype.OffsetPoint = function (j, k, jointype)\n  {\n    this.m_sinA = (this.m_normals[k].X * this.m_normals[j].Y - this.m_normals[j].X * this.m_normals[k].Y);\n    if (this.m_sinA < 0.00005 && this.m_sinA > -0.00005)\n      return k;\n    else if (this.m_sinA > 1)\n      this.m_sinA = 1.0;\n    else if (this.m_sinA < -1)\n      this.m_sinA = -1.0;\n    if (this.m_sinA * this.m_delta < 0)\n    {\n      this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta),\n        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta)));\n      this.m_destPoly.push(new ClipperLib.IntPoint(this.m_srcPoly[j]));\n      this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),\n        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)));\n    }\n    else\n      switch (jointype)\n      {\n      case ClipperLib.JoinType.jtMiter:\n        {\n          var r = 1 + (this.m_normals[j].X * this.m_normals[k].X + this.m_normals[j].Y * this.m_normals[k].Y);\n          if (r >= this.m_miterLim)\n            this.DoMiter(j, k, r);\n          else\n            this.DoSquare(j, k);\n          break;\n        }\n      case ClipperLib.JoinType.jtSquare:\n        this.DoSquare(j, k);\n        break;\n      case ClipperLib.JoinType.jtRound:\n        this.DoRound(j, k);\n        break;\n      }\n    k = j;\n    return k;\n  };\n  ClipperLib.ClipperOffset.prototype.DoSquare = function (j, k)\n  {\n    var dx = Math.tan(Math.atan2(this.m_sinA,\n      this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y) / 4);\n    this.m_destPoly.push(new ClipperLib.IntPoint(\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[k].X - this.m_normals[k].Y * dx)),\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[k].Y + this.m_normals[k].X * dx))));\n    this.m_destPoly.push(new ClipperLib.IntPoint(\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[j].X + this.m_normals[j].Y * dx)),\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[j].Y - this.m_normals[j].X * dx))));\n  };\n  ClipperLib.ClipperOffset.prototype.DoMiter = function (j, k, r)\n  {\n    var q = this.m_delta / r;\n    this.m_destPoly.push(new ClipperLib.IntPoint(\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + (this.m_normals[k].X + this.m_normals[j].X) * q),\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + (this.m_normals[k].Y + this.m_normals[j].Y) * q)));\n  };\n  ClipperLib.ClipperOffset.prototype.DoRound = function (j, k)\n  {\n    var a = Math.atan2(this.m_sinA,\n      this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y);\n    var steps = ClipperLib.Cast_Int32(ClipperLib.ClipperOffset.Round(this.m_StepsPerRad * Math.abs(a)));\n    var X = this.m_normals[k].X,\n      Y = this.m_normals[k].Y,\n      X2;\n    for (var i = 0; i < steps; ++i)\n    {\n      this.m_destPoly.push(new ClipperLib.IntPoint(\n        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + X * this.m_delta),\n        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + Y * this.m_delta)));\n      X2 = X;\n      X = X * this.m_cos - this.m_sin * Y;\n      Y = X2 * this.m_sin + Y * this.m_cos;\n    }\n    this.m_destPoly.push(new ClipperLib.IntPoint(\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)));\n  };\n  ClipperLib.Error = function (message)\n  {\n    try\n    {\n      throw new Error(message);\n    }\n    catch (err)\n    {\n      alert(err.message);\n    }\n  };\n  // ---------------------------------\n  // JS extension by Timo 2013\n  ClipperLib.JS = {};\n  ClipperLib.JS.AreaOfPolygon = function (poly, scale)\n  {\n    if (!scale) scale = 1;\n    return ClipperLib.Clipper.Area(poly) / (scale * scale);\n  };\n  ClipperLib.JS.AreaOfPolygons = function (poly, scale)\n  {\n    if (!scale) scale = 1;\n    var area = 0;\n    for (var i = 0; i < poly.length; i++)\n    {\n      area += ClipperLib.Clipper.Area(poly[i]);\n    }\n    return area / (scale * scale);\n  };\n  ClipperLib.JS.BoundsOfPath = function (path, scale)\n  {\n    return ClipperLib.JS.BoundsOfPaths([path], scale);\n  };\n  ClipperLib.JS.BoundsOfPaths = function (paths, scale)\n  {\n    if (!scale) scale = 1;\n    var bounds = ClipperLib.Clipper.GetBounds(paths);\n    bounds.left /= scale;\n    bounds.bottom /= scale;\n    bounds.right /= scale;\n    bounds.top /= scale;\n    return bounds;\n  };\n  // Clean() joins vertices that are too near each other\n  // and causes distortion to offsetted polygons without cleaning\n  ClipperLib.JS.Clean = function (polygon, delta)\n  {\n    if (!(polygon instanceof Array)) return [];\n    var isPolygons = polygon[0] instanceof Array;\n    var polygon = ClipperLib.JS.Clone(polygon);\n    if (typeof delta != \"number\" || delta === null)\n    {\n      ClipperLib.Error(\"Delta is not a number in Clean().\");\n      return polygon;\n    }\n    if (polygon.length === 0 || (polygon.length == 1 && polygon[0].length === 0) || delta < 0) return polygon;\n    if (!isPolygons) polygon = [polygon];\n    var k_length = polygon.length;\n    var len, poly, result, d, p, j, i;\n    var results = [];\n    for (var k = 0; k < k_length; k++)\n    {\n      poly = polygon[k];\n      len = poly.length;\n      if (len === 0) continue;\n      else if (len < 3)\n      {\n        result = poly;\n        results.push(result);\n        continue;\n      }\n      result = poly;\n      d = delta * delta;\n      //d = Math.floor(c_delta * c_delta);\n      p = poly[0];\n      j = 1;\n      for (i = 1; i < len; i++)\n      {\n        if ((poly[i].X - p.X) * (poly[i].X - p.X) +\n          (poly[i].Y - p.Y) * (poly[i].Y - p.Y) <= d)\n          continue;\n        result[j] = poly[i];\n        p = poly[i];\n        j++;\n      }\n      p = poly[j - 1];\n      if ((poly[0].X - p.X) * (poly[0].X - p.X) +\n        (poly[0].Y - p.Y) * (poly[0].Y - p.Y) <= d)\n        j--;\n      if (j < len)\n        result.splice(j, len - j);\n      if (result.length) results.push(result);\n    }\n    if (!isPolygons && results.length) results = results[0];\n    else if (!isPolygons && results.length === 0) results = [];\n    else if (isPolygons && results.length === 0) results = [\n      []\n    ];\n    return results;\n  }\n  // Make deep copy of Polygons or Polygon\n  // so that also IntPoint objects are cloned and not only referenced\n  // This should be the fastest way\n  ClipperLib.JS.Clone = function (polygon)\n  {\n    if (!(polygon instanceof Array)) return [];\n    if (polygon.length === 0) return [];\n    else if (polygon.length == 1 && polygon[0].length === 0) return [[]];\n    var isPolygons = polygon[0] instanceof Array;\n    if (!isPolygons) polygon = [polygon];\n    var len = polygon.length,\n      plen, i, j, result;\n    var results = new Array(len);\n    for (i = 0; i < len; i++)\n    {\n      plen = polygon[i].length;\n      result = new Array(plen);\n      for (j = 0; j < plen; j++)\n      {\n        result[j] = {\n          X: polygon[i][j].X,\n          Y: polygon[i][j].Y\n        };\n      }\n      results[i] = result;\n    }\n    if (!isPolygons) results = results[0];\n    return results;\n  };\n  // Removes points that doesn't affect much to the visual appearance.\n  // If middle point is at or under certain distance (tolerance) of the line segment between \n  // start and end point, the middle point is removed.\n  ClipperLib.JS.Lighten = function (polygon, tolerance)\n  {\n    if (!(polygon instanceof Array)) return [];\n    if (typeof tolerance != \"number\" || tolerance === null)\n    {\n      ClipperLib.Error(\"Tolerance is not a number in Lighten().\")\n      return ClipperLib.JS.Clone(polygon);\n    }\n    if (polygon.length === 0 || (polygon.length == 1 && polygon[0].length === 0) || tolerance < 0)\n    {\n      return ClipperLib.JS.Clone(polygon);\n    }\n    if (!(polygon[0] instanceof Array)) polygon = [polygon];\n    var i, j, poly, k, poly2, plen, A, B, P, d, rem, addlast;\n    var bxax, byay, l, ax, ay;\n    var len = polygon.length;\n    var toleranceSq = tolerance * tolerance;\n    var results = [];\n    for (i = 0; i < len; i++)\n    {\n      poly = polygon[i];\n      plen = poly.length;\n      if (plen == 0) continue;\n      for (k = 0; k < 1000000; k++) // could be forever loop, but wiser to restrict max repeat count\n      {\n        poly2 = [];\n        plen = poly.length;\n        // the first have to added to the end, if first and last are not the same\n        // this way we ensure that also the actual last point can be removed if needed\n        if (poly[plen - 1].X != poly[0].X || poly[plen - 1].Y != poly[0].Y)\n        {\n          addlast = 1;\n          poly.push(\n          {\n            X: poly[0].X,\n            Y: poly[0].Y\n          });\n          plen = poly.length;\n        }\n        else addlast = 0;\n        rem = []; // Indexes of removed points\n        for (j = 0; j < plen - 2; j++)\n        {\n          A = poly[j]; // Start point of line segment\n          P = poly[j + 1]; // Middle point. This is the one to be removed.\n          B = poly[j + 2]; // End point of line segment\n          ax = A.X;\n          ay = A.Y;\n          bxax = B.X - ax;\n          byay = B.Y - ay;\n          if (bxax !== 0 || byay !== 0) // To avoid Nan, when A==P && P==B. And to avoid peaks (A==B && A!=P), which have lenght, but not area.\n          {\n            l = ((P.X - ax) * bxax + (P.Y - ay) * byay) / (bxax * bxax + byay * byay);\n            if (l > 1)\n            {\n              ax = B.X;\n              ay = B.Y;\n            }\n            else if (l > 0)\n            {\n              ax += bxax * l;\n              ay += byay * l;\n            }\n          }\n          bxax = P.X - ax;\n          byay = P.Y - ay;\n          d = bxax * bxax + byay * byay;\n          if (d <= toleranceSq)\n          {\n            rem[j + 1] = 1;\n            j++; // when removed, transfer the pointer to the next one\n          }\n        }\n        // add all unremoved points to poly2\n        poly2.push(\n        {\n          X: poly[0].X,\n          Y: poly[0].Y\n        });\n        for (j = 1; j < plen - 1; j++)\n          if (!rem[j]) poly2.push(\n          {\n            X: poly[j].X,\n            Y: poly[j].Y\n          });\n        poly2.push(\n        {\n          X: poly[plen - 1].X,\n          Y: poly[plen - 1].Y\n        });\n        // if the first point was added to the end, remove it\n        if (addlast) poly.pop();\n        // break, if there was not anymore removed points\n        if (!rem.length) break;\n        // else continue looping using poly2, to check if there are points to remove\n        else poly = poly2;\n      }\n      plen = poly2.length;\n      // remove duplicate from end, if needed\n      if (poly2[plen - 1].X == poly2[0].X && poly2[plen - 1].Y == poly2[0].Y)\n      {\n        poly2.pop();\n      }\n      if (poly2.length > 2) // to avoid two-point-polygons\n        results.push(poly2);\n    }\n    if (!polygon[0] instanceof Array) results = results[0];\n    if (typeof (results) == \"undefined\") results = [\n      []\n    ];\n    return results;\n  }\n  ClipperLib.JS.PerimeterOfPath = function (path, closed, scale)\n  {\n    if (typeof (path) == \"undefined\") return 0;\n    var sqrt = Math.sqrt;\n    var perimeter = 0.0;\n    var p1, p2, p1x = 0.0,\n      p1y = 0.0,\n      p2x = 0.0,\n      p2y = 0.0;\n    var j = path.length;\n    if (j < 2) return 0;\n    if (closed)\n    {\n      path[j] = path[0];\n      j++;\n    }\n    while (--j)\n    {\n      p1 = path[j];\n      p1x = p1.X;\n      p1y = p1.Y;\n      p2 = path[j - 1];\n      p2x = p2.X;\n      p2y = p2.Y;\n      perimeter += sqrt((p1x - p2x) * (p1x - p2x) + (p1y - p2y) * (p1y - p2y));\n    }\n    if (closed) path.pop();\n    return perimeter / scale;\n  };\n  ClipperLib.JS.PerimeterOfPaths = function (paths, closed, scale)\n  {\n    if (!scale) scale = 1;\n    var perimeter = 0;\n    for (var i = 0; i < paths.length; i++)\n    {\n      perimeter += ClipperLib.JS.PerimeterOfPath(paths[i], closed, scale);\n    }\n    return perimeter;\n  };\n  ClipperLib.JS.ScaleDownPath = function (path, scale)\n  {\n    var i, p;\n    if (!scale) scale = 1;\n    i = path.length;\n    while (i--)\n    {\n      p = path[i];\n      p.X = p.X / scale;\n      p.Y = p.Y / scale;\n    }\n  };\n  ClipperLib.JS.ScaleDownPaths = function (paths, scale)\n  {\n    var i, j, p, round = Math.round;\n    if (!scale) scale = 1;\n    i = paths.length;\n    while (i--)\n    {\n      j = paths[i].length;\n      while (j--)\n      {\n        p = paths[i][j];\n        p.X = p.X / scale;\n        p.Y = p.Y / scale;\n      }\n    }\n  };\n  ClipperLib.JS.ScaleUpPath = function (path, scale)\n  {\n    var i, p, round = Math.round;\n    if (!scale) scale = 1;\n    i = path.length;\n    while (i--)\n    {\n      p = path[i];\n      p.X = round(p.X * scale);\n      p.Y = round(p.Y * scale);\n    }\n  };\n  ClipperLib.JS.ScaleUpPaths = function (paths, scale)\n  {\n    var i, j, p, round = Math.round;\n    if (!scale) scale = 1;\n    i = paths.length;\n    while (i--)\n    {\n      j = paths[i].length;\n      while (j--)\n      {\n        p = paths[i][j];\n        p.X = round(p.X * scale);\n        p.Y = round(p.Y * scale);\n      }\n    }\n  };\n  ClipperLib.ExPolygons = function ()\n  {\n    return [];\n  }\n  ClipperLib.ExPolygon = function ()\n  {\n    this.outer = null;\n    this.holes = null;\n  };\n  ClipperLib.JS.AddOuterPolyNodeToExPolygons = function (polynode, expolygons)\n  {\n    var ep = new ClipperLib.ExPolygon();\n    ep.outer = polynode.Contour();\n    var childs = polynode.Childs();\n    var ilen = childs.length;\n    ep.holes = new Array(ilen);\n    var node, n, i, j, childs2, jlen;\n    for (i = 0; i < ilen; i++)\n    {\n      node = childs[i];\n      ep.holes[i] = node.Contour();\n      //Add outer polygons contained by (nested within) holes ...\n      for (j = 0, childs2 = node.Childs(), jlen = childs2.length; j < jlen; j++)\n      {\n        n = childs2[j];\n        ClipperLib.JS.AddOuterPolyNodeToExPolygons(n, expolygons);\n      }\n    }\n    expolygons.push(ep);\n  };\n  ClipperLib.JS.ExPolygonsToPaths = function (expolygons)\n  {\n    var a, i, alen, ilen;\n    var paths = new ClipperLib.Paths();\n    for (a = 0, alen = expolygons.length; a < alen; a++)\n    {\n      paths.push(expolygons[a].outer);\n      for (i = 0, ilen = expolygons[a].holes.length; i < ilen; i++)\n      {\n        paths.push(expolygons[a].holes[i]);\n      }\n    }\n    return paths;\n  }\n  ClipperLib.JS.PolyTreeToExPolygons = function (polytree)\n  {\n    var expolygons = new ClipperLib.ExPolygons();\n    var node, i, childs, ilen;\n    for (i = 0, childs = polytree.Childs(), ilen = childs.length; i < ilen; i++)\n    {\n      node = childs[i];\n      ClipperLib.JS.AddOuterPolyNodeToExPolygons(node, expolygons);\n    }\n    return expolygons;\n  };\n})();\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.opentype = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// Run-time checking of preconditions.\n\n'use strict';\n\n// Precondition function that checks if the given predicate is true.\n// If not, it will throw an error.\nexports.argument = function(predicate, message) {\n    if (!predicate) {\n        throw new Error(message);\n    }\n};\n\n// Precondition function that checks if the given assertion is true.\n// If not, it will throw an error.\nexports.assert = exports.argument;\n\n},{}],2:[function(require,module,exports){\n// Drawing utility functions.\n\n'use strict';\n\n// Draw a line on the given context from point `x1,y1` to point `x2,y2`.\nfunction line(ctx, x1, y1, x2, y2) {\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\n\nexports.line = line;\n\n},{}],3:[function(require,module,exports){\n// Glyph encoding\n\n'use strict';\n\nvar cffStandardStrings = [\n    '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',\n    'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',\n    'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',\n    'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',\n    'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',\n    'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',\n    'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',\n    'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',\n    'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',\n    'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',\n    'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',\n    'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',\n    'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',\n    'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',\n    'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',\n    'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',\n    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',\n    'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',\n    'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',\n    'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',\n    'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',\n    'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',\n    'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',\n    'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',\n    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',\n    'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',\n    'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',\n    'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',\n    'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',\n    'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',\n    'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',\n    'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',\n    'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',\n    '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];\n\nvar cffStandardEncoding = [\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',\n    'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',\n    'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',\n    'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',\n    'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',\n    'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',\n    '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',\n    'lslash', 'oslash', 'oe', 'germandbls'];\n\nvar cffExpertEncoding = [\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',\n    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',\n    'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',\n    'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',\n    'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',\n    'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',\n    'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',\n    'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',\n    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n    'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',\n    'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',\n    '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',\n    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',\n    '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n    'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',\n    'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',\n    'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',\n    'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',\n    'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',\n    'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',\n    'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',\n    'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\n\nvar standardNames = [\n    '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',\n    'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',\n    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',\n    'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',\n    'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',\n    'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',\n    'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',\n    'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',\n    'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',\n    'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',\n    'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',\n    'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',\n    'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',\n    'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',\n    'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',\n    'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',\n    'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',\n    'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',\n    'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',\n    'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',\n    'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',\n    'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',\n    'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\n\n// This is the encoding used for fonts created from scratch.\n// It loops through all glyphs and finds the appropriate unicode value.\n// Since it's linear time, other encodings will be faster.\nfunction DefaultEncoding(font) {\n    this.font = font;\n}\n\nDefaultEncoding.prototype.charToGlyphIndex = function(c) {\n    var code = c.charCodeAt(0);\n    var glyphs = this.font.glyphs;\n    if (glyphs) {\n        for (var i = 0; i < glyphs.length; i += 1) {\n            var glyph = glyphs[i];\n            for (var j = 0; j < glyph.unicodes.length; j += 1) {\n                if (glyph.unicodes[j] === code) {\n                    return i;\n                }\n            }\n        }\n    } else {\n        return null;\n    }\n};\n\nfunction CmapEncoding(cmap) {\n    this.cmap = cmap;\n}\n\nCmapEncoding.prototype.charToGlyphIndex = function(c) {\n    return this.cmap.glyphIndexMap[c.charCodeAt(0)] || 0;\n};\n\nfunction CffEncoding(encoding, charset) {\n    this.encoding = encoding;\n    this.charset = charset;\n}\n\nCffEncoding.prototype.charToGlyphIndex = function(s) {\n    var code = s.charCodeAt(0);\n    var charName = this.encoding[code];\n    return this.charset.indexOf(charName);\n};\n\nfunction GlyphNames(post) {\n    var i;\n    switch (post.version) {\n    case 1:\n        this.names = exports.standardNames.slice();\n        break;\n    case 2:\n        this.names = new Array(post.numberOfGlyphs);\n        for (i = 0; i < post.numberOfGlyphs; i++) {\n            if (post.glyphNameIndex[i] < exports.standardNames.length) {\n                this.names[i] = exports.standardNames[post.glyphNameIndex[i]];\n            } else {\n                this.names[i] = post.names[post.glyphNameIndex[i] - exports.standardNames.length];\n            }\n        }\n\n        break;\n    case 2.5:\n        this.names = new Array(post.numberOfGlyphs);\n        for (i = 0; i < post.numberOfGlyphs; i++) {\n            this.names[i] = exports.standardNames[i + post.glyphNameIndex[i]];\n        }\n\n        break;\n    case 3:\n        this.names = [];\n        break;\n    }\n}\n\nGlyphNames.prototype.nameToGlyphIndex = function(name) {\n    return this.names.indexOf(name);\n};\n\nGlyphNames.prototype.glyphIndexToName = function(gid) {\n    return this.names[gid];\n};\n\nfunction addGlyphNames(font) {\n    var glyph;\n    var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n    var charCodes = Object.keys(glyphIndexMap);\n    for (var i = 0; i < charCodes.length; i += 1) {\n        var c = charCodes[i];\n        var glyphIndex = glyphIndexMap[c];\n        glyph = font.glyphs[glyphIndex];\n        glyph.addUnicode(parseInt(c));\n    }\n\n    for (i = 0; i < font.glyphs.length; i += 1) {\n        glyph = font.glyphs[i];\n        if (font.cffEncoding) {\n            glyph.name = font.cffEncoding.charset[i];\n        } else {\n            glyph.name = font.glyphNames.glyphIndexToName(i);\n        }\n    }\n}\n\nexports.cffStandardStrings = cffStandardStrings;\nexports.cffStandardEncoding = cffStandardEncoding;\nexports.cffExpertEncoding = cffExpertEncoding;\nexports.standardNames = standardNames;\nexports.DefaultEncoding = DefaultEncoding;\nexports.CmapEncoding = CmapEncoding;\nexports.CffEncoding = CffEncoding;\nexports.GlyphNames = GlyphNames;\nexports.addGlyphNames = addGlyphNames;\n\n},{}],4:[function(require,module,exports){\n// The Font object\n\n'use strict';\n\nvar path = require('./path');\nvar sfnt = require('./tables/sfnt');\nvar encoding = require('./encoding');\n\n// A Font represents a loaded OpenType font file.\n// It contains a set of glyphs and methods to draw text on a drawing context,\n// or to get a path representing the text.\nfunction Font(options) {\n    options = options || {};\n\n    // OS X will complain if the names are empty, so we put a single space everywhere by default.\n    this.familyName = options.familyName || ' ';\n    this.styleName = options.styleName || ' ';\n    this.designer = options.designer || ' ';\n    this.designerURL = options.designerURL || ' ';\n    this.manufacturer = options.manufacturer || ' ';\n    this.manufacturerURL = options.manufacturerURL || ' ';\n    this.license = options.license || ' ';\n    this.licenseURL = options.licenseURL || ' ';\n    this.version = options.version || 'Version 0.1';\n    this.description = options.description || ' ';\n    this.copyright = options.copyright || ' ';\n    this.trademark = options.trademark || ' ';\n    this.unitsPerEm = options.unitsPerEm || 1000;\n    this.ascender = options.ascender;\n    this.descender = options.descender;\n    this.supported = true;\n    this.glyphs = options.glyphs || [];\n    this.encoding = new encoding.DefaultEncoding(this);\n    this.tables = {};\n}\n\n// Check if the font has a glyph for the given character.\nFont.prototype.hasChar = function(c) {\n    return this.encoding.charToGlyphIndex(c) !== null;\n};\n\n// Convert the given character to a single glyph index.\n// Note that this function assumes that there is a one-to-one mapping between\n// the given character and a glyph; for complex scripts this might not be the case.\nFont.prototype.charToGlyphIndex = function(s) {\n    return this.encoding.charToGlyphIndex(s);\n};\n\n// Convert the given character to a single Glyph object.\n// Note that this function assumes that there is a one-to-one mapping between\n// the given character and a glyph; for complex scripts this might not be the case.\nFont.prototype.charToGlyph = function(c) {\n    var glyphIndex = this.charToGlyphIndex(c);\n    var glyph = this.glyphs[glyphIndex];\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs[0];\n    }\n\n    return glyph;\n};\n\n// Convert the given text to a list of Glyph objects.\n// Note that there is no strict one-to-one mapping between characters and\n// glyphs, so the list of returned glyphs can be larger or smaller than the\n// length of the given string.\nFont.prototype.stringToGlyphs = function(s) {\n    var glyphs = [];\n    for (var i = 0; i < s.length; i += 1) {\n        var c = s[i];\n        glyphs.push(this.charToGlyph(c));\n    }\n\n    return glyphs;\n};\n\nFont.prototype.nameToGlyphIndex = function(name) {\n    return this.glyphNames.nameToGlyphIndex(name);\n};\n\nFont.prototype.nameToGlyph = function(name) {\n    var glyphIndex = this.nametoGlyphIndex(name);\n    var glyph = this.glyphs[glyphIndex];\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs[0];\n    }\n\n    return glyph;\n};\n\nFont.prototype.glyphIndexToName = function(gid) {\n    if (!this.glyphNames.glyphIndexToName) {\n        return '';\n    }\n\n    return this.glyphNames.glyphIndexToName(gid);\n};\n\n// Retrieve the value of the kerning pair between the left glyph (or its index)\n// and the right glyph (or its index). If no kerning pair is found, return 0.\n// The kerning value gets added to the advance width when calculating the spacing\n// between glyphs.\nFont.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n    leftGlyph = leftGlyph.index || leftGlyph;\n    rightGlyph = rightGlyph.index || rightGlyph;\n    var gposKerning = this.getGposKerningValue;\n    return gposKerning ? gposKerning(leftGlyph, rightGlyph) :\n        (this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0);\n};\n\n// Helper function that invokes the given callback for each glyph in the given text.\n// The callback gets `(glyph, x, y, fontSize, options)`.\nFont.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {\n    if (!this.supported) {\n        return;\n    }\n\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    options = options || {};\n    var kerning = options.kerning === undefined ? true : options.kerning;\n    var fontScale = 1 / this.unitsPerEm * fontSize;\n    var glyphs = this.stringToGlyphs(text);\n    for (var i = 0; i < glyphs.length; i += 1) {\n        var glyph = glyphs[i];\n        callback(glyph, x, y, fontSize, options);\n        if (glyph.advanceWidth) {\n            x += glyph.advanceWidth * fontScale;\n        }\n\n        if (kerning && i < glyphs.length - 1) {\n            var kerningValue = this.getKerningValue(glyph, glyphs[i + 1]);\n            x += kerningValue * fontScale;\n        }\n    }\n};\n\n// Create a Path object that represents the given text.\n//\n// text - The text to create.\n// x - Horizontal position of the beginning of the text. (default: 0)\n// y - Vertical position of the *baseline* of the text. (default: 0)\n// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)\n// Options is an optional object that contains:\n// - kerning - Whether to take kerning information into account. (default: true)\n//\n// Returns a Path object.\nFont.prototype.getPath = function(text, x, y, fontSize, options) {\n    var fullPath = new path.Path();\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        var glyphPath = glyph.getPath(gX, gY, gFontSize);\n        fullPath.extend(glyphPath);\n    });\n\n    return fullPath;\n};\n\n// Draw the text on the given drawing context.\n//\n// ctx - A 2D drawing context, like Canvas.\n// text - The text to create.\n// x - Horizontal position of the beginning of the text. (default: 0)\n// y - Vertical position of the *baseline* of the text. (default: 0)\n// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)\n// Options is an optional object that contains:\n// - kerning - Whether to take kerning information into account. (default: true)\nFont.prototype.draw = function(ctx, text, x, y, fontSize, options) {\n    this.getPath(text, x, y, fontSize, options).draw(ctx);\n};\n\n// Draw the points of all glyphs in the text.\n// On-curve points will be drawn in blue, off-curve points will be drawn in red.\n//\n// ctx - A 2D drawing context, like Canvas.\n// text - The text to create.\n// x - Horizontal position of the beginning of the text. (default: 0)\n// y - Vertical position of the *baseline* of the text. (default: 0)\n// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)\n// Options is an optional object that contains:\n// - kerning - Whether to take kerning information into account. (default: true)\nFont.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawPoints(ctx, gX, gY, gFontSize);\n    });\n};\n\n// Draw lines indicating important font measurements for all glyphs in the text.\n// Black lines indicate the origin of the coordinate system (point 0,0).\n// Blue lines indicate the glyph bounding box.\n// Green line indicates the advance width of the glyph.\n//\n// ctx - A 2D drawing context, like Canvas.\n// text - The text to create.\n// x - Horizontal position of the beginning of the text. (default: 0)\n// y - Vertical position of the *baseline* of the text. (default: 0)\n// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)\n// Options is an optional object that contains:\n// - kerning - Whether to take kerning information into account. (default: true)\nFont.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawMetrics(ctx, gX, gY, gFontSize);\n    });\n};\n\n// Validate\nFont.prototype.validate = function() {\n    var warnings = [];\n    var _this = this;\n\n    function assert(predicate, message) {\n        if (!predicate) {\n            warnings.push(message);\n        }\n    }\n\n    function assertStringAttribute(attrName) {\n        assert(_this[attrName] && _this[attrName].trim().length > 0, 'No ' + attrName + ' specified.');\n    }\n\n    // Identification information\n    assertStringAttribute('familyName');\n    assertStringAttribute('weightName');\n    assertStringAttribute('manufacturer');\n    assertStringAttribute('copyright');\n    assertStringAttribute('version');\n\n    // Dimension information\n    assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');\n};\n\n// Convert the font object to a SFNT data structure.\n// This structure contains all the necessary tables and metadata to create a binary OTF file.\nFont.prototype.toTables = function() {\n    return sfnt.fontToTable(this);\n};\n\nFont.prototype.toBuffer = function() {\n    var sfntTable = this.toTables();\n    var bytes = sfntTable.encode();\n    var buffer = new ArrayBuffer(bytes.length);\n    var intArray = new Uint8Array(buffer);\n    for (var i = 0; i < bytes.length; i++) {\n        intArray[i] = bytes[i];\n    }\n\n    return buffer;\n};\n\n// Initiate a download of the OpenType font.\nFont.prototype.download = function() {\n    var fileName = this.familyName.replace(/\\s/g, '') + '-' + this.styleName + '.otf';\n    var buffer = this.toBuffer();\n\n    window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;\n    window.requestFileSystem(window.TEMPORARY, buffer.byteLength, function(fs) {\n        fs.root.getFile(fileName, {create: true}, function(fileEntry) {\n            fileEntry.createWriter(function(writer) {\n                var dataView = new DataView(buffer);\n                var blob = new Blob([dataView], {type: 'font/opentype'});\n                writer.write(blob);\n\n                writer.addEventListener('writeend', function() {\n                    // Navigating to the file will download it.\n                    location.href = fileEntry.toURL();\n                }, false);\n            });\n        });\n    },\n\n    function(err) {\n        throw err;\n    });\n};\n\nexports.Font = Font;\n\n},{\"./encoding\":3,\"./path\":8,\"./tables/sfnt\":23}],5:[function(require,module,exports){\n// The Glyph object\n\n'use strict';\n\nvar check = require('./check');\nvar draw = require('./draw');\nvar path = require('./path');\n\n// A Glyph is an individual mark that often corresponds to a character.\n// Some glyphs, such as ligatures, are a combination of many characters.\n// Glyphs are the basic building blocks of a font.\n//\n// The `Glyph` class contains utility methods for drawing the path and its points.\nfunction Glyph(options) {\n    this.font = options.font || null;\n    this.index = options.index || 0;\n    this.name = options.name || null;\n    this.unicode = options.unicode || undefined;\n    this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];\n    this.xMin = options.xMin || 0;\n    this.yMin = options.yMin || 0;\n    this.xMax = options.xMax || 0;\n    this.yMax = options.yMax || 0;\n    this.advanceWidth = options.advanceWidth || 0;\n    this.path = options.path || null;\n}\n\nGlyph.prototype.addUnicode = function(unicode) {\n    if (this.unicodes.length === 0) {\n        this.unicode = unicode;\n    }\n\n    this.unicodes.push(unicode);\n};\n\n// Convert the glyph to a Path we can draw on a drawing context.\n//\n// x - Horizontal position of the glyph. (default: 0)\n// y - Vertical position of the *baseline* of the glyph. (default: 0)\n// fontSize - Font size, in pixels (default: 72).\nGlyph.prototype.getPath = function(x, y, fontSize) {\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    var scale = 1 / this.font.unitsPerEm * fontSize;\n    var p = new path.Path();\n    var commands = this.path.commands;\n    for (var i = 0; i < commands.length; i += 1) {\n        var cmd = commands[i];\n        if (cmd.type === 'M') {\n            p.moveTo(x + (cmd.x * scale), y + (-cmd.y * scale));\n        } else if (cmd.type === 'L') {\n            p.lineTo(x + (cmd.x * scale), y + (-cmd.y * scale));\n        } else if (cmd.type === 'Q') {\n            p.quadraticCurveTo(x + (cmd.x1 * scale), y + (-cmd.y1 * scale),\n                               x + (cmd.x * scale), y + (-cmd.y * scale));\n        } else if (cmd.type === 'C') {\n            p.curveTo(x + (cmd.x1 * scale), y + (-cmd.y1 * scale),\n                      x + (cmd.x2 * scale), y + (-cmd.y2 * scale),\n                      x + (cmd.x * scale), y + (-cmd.y * scale));\n        } else if (cmd.type === 'Z') {\n            p.closePath();\n        }\n    }\n\n    return p;\n};\n\n// Split the glyph into contours.\n// This function is here for backwards compatibility, and to\n// provide raw access to the TrueType glyph outlines.\nGlyph.prototype.getContours = function() {\n    if (this.points === undefined) {\n        return [];\n    }\n\n    var contours = [];\n    var currentContour = [];\n    for (var i = 0; i < this.points.length; i += 1) {\n        var pt = this.points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n\n    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n    return contours;\n};\n\n// Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\nGlyph.prototype.getMetrics = function() {\n    var commands = this.path.commands;\n    var xCoords = [];\n    var yCoords = [];\n    for (var i = 0; i < commands.length; i += 1) {\n        var cmd = commands[i];\n        if (cmd.type !== 'Z') {\n            xCoords.push(cmd.x);\n            yCoords.push(cmd.y);\n        }\n\n        if (cmd.type === 'Q' || cmd.type === 'C') {\n            xCoords.push(cmd.x1);\n            yCoords.push(cmd.y1);\n        }\n\n        if (cmd.type === 'C') {\n            xCoords.push(cmd.x2);\n            yCoords.push(cmd.y2);\n        }\n    }\n\n    var metrics = {\n        xMin: Math.min.apply(null, xCoords),\n        yMin: Math.min.apply(null, yCoords),\n        xMax: Math.max.apply(null, xCoords),\n        yMax: Math.max.apply(null, yCoords),\n        leftSideBearing: 0\n    };\n    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);\n    return metrics;\n};\n\n// Draw the glyph on the given context.\n//\n// ctx - The drawing context.\n// x - Horizontal position of the glyph. (default: 0)\n// y - Vertical position of the *baseline* of the glyph. (default: 0)\n// fontSize - Font size, in pixels (default: 72).\nGlyph.prototype.draw = function(ctx, x, y, fontSize) {\n    this.getPath(x, y, fontSize).draw(ctx);\n};\n\n// Draw the points of the glyph.\n// On-curve points will be drawn in blue, off-curve points will be drawn in red.\n//\n// ctx - The drawing context.\n// x - Horizontal position of the glyph. (default: 0)\n// y - Vertical position of the *baseline* of the glyph. (default: 0)\n// fontSize - Font size, in pixels (default: 72).\nGlyph.prototype.drawPoints = function(ctx, x, y, fontSize) {\n\n    function drawCircles(l, x, y, scale) {\n        var PI_SQ = Math.PI * 2;\n        ctx.beginPath();\n        for (var j = 0; j < l.length; j += 1) {\n            ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));\n            ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, PI_SQ, false);\n        }\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 24;\n    var scale = 1 / this.font.unitsPerEm * fontSize;\n\n    var blueCircles = [];\n    var redCircles = [];\n    var path = this.path;\n    for (var i = 0; i < path.commands.length; i += 1) {\n        var cmd = path.commands[i];\n        if (cmd.x !== undefined) {\n            blueCircles.push({x: cmd.x, y: -cmd.y});\n        }\n\n        if (cmd.x1 !== undefined) {\n            redCircles.push({x: cmd.x1, y: -cmd.y1});\n        }\n\n        if (cmd.x2 !== undefined) {\n            redCircles.push({x: cmd.x2, y: -cmd.y2});\n        }\n    }\n\n    ctx.fillStyle = 'blue';\n    drawCircles(blueCircles, x, y, scale);\n    ctx.fillStyle = 'red';\n    drawCircles(redCircles, x, y, scale);\n};\n\n// Draw lines indicating important font measurements.\n// Black lines indicate the origin of the coordinate system (point 0,0).\n// Blue lines indicate the glyph bounding box.\n// Green line indicates the advance width of the glyph.\n//\n// ctx - The drawing context.\n// x - Horizontal position of the glyph. (default: 0)\n// y - Vertical position of the *baseline* of the glyph. (default: 0)\n// fontSize - Font size, in pixels (default: 72).\nGlyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {\n    var scale;\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 24;\n    scale = 1 / this.font.unitsPerEm * fontSize;\n    ctx.lineWidth = 1;\n\n    // Draw the origin\n    ctx.strokeStyle = 'black';\n    draw.line(ctx, x, -10000, x, 10000);\n    draw.line(ctx, -10000, y, 10000, y);\n\n    // Draw the glyph box\n    ctx.strokeStyle = 'blue';\n    draw.line(ctx, x + (this.xMin * scale), -10000, x + (this.xMin * scale), 10000);\n    draw.line(ctx, x + (this.xMax * scale), -10000, x + (this.xMax * scale), 10000);\n    draw.line(ctx, -10000, y + (-this.yMin * scale), 10000, y + (-this.yMin * scale));\n    draw.line(ctx, -10000, y + (-this.yMax * scale), 10000, y + (-this.yMax * scale));\n\n    // Draw the advance width\n    ctx.strokeStyle = 'green';\n    draw.line(ctx, x + (this.advanceWidth * scale), -10000, x + (this.advanceWidth * scale), 10000);\n};\n\nexports.Glyph = Glyph;\n\n},{\"./check\":1,\"./draw\":2,\"./path\":8}],6:[function(require,module,exports){\n// opentype.js\n// https://github.com/nodebox/opentype.js\n// (c) 2014 Frederik De Bleser\n// opentype.js may be freely distributed under the MIT license.\n\n/* global ArrayBuffer, DataView, Uint8Array, XMLHttpRequest  */\n\n'use strict';\n\nvar encoding = require('./encoding');\nvar _font = require('./font');\nvar glyph = require('./glyph');\nvar parse = require('./parse');\nvar path = require('./path');\n\nvar cmap = require('./tables/cmap');\nvar cff = require('./tables/cff');\nvar glyf = require('./tables/glyf');\nvar gpos = require('./tables/gpos');\nvar head = require('./tables/head');\nvar hhea = require('./tables/hhea');\nvar hmtx = require('./tables/hmtx');\nvar kern = require('./tables/kern');\nvar loca = require('./tables/loca');\nvar maxp = require('./tables/maxp');\nvar _name = require('./tables/name');\nvar os2 = require('./tables/os2');\nvar post = require('./tables/post');\n\n// File loaders /////////////////////////////////////////////////////////\n\n// Convert a Node.js Buffer to an ArrayBuffer\nfunction toArrayBuffer(buffer) {\n    var arrayBuffer = new ArrayBuffer(buffer.length);\n    var data = new Uint8Array(arrayBuffer);\n    for (var i = 0; i < buffer.length; i += 1) {\n        data[i] = buffer[i];\n    }\n\n    return arrayBuffer;\n}\n\nfunction loadFromFile(path, callback) {\n    var fs = require('fs');\n    fs.readFile(path, function(err, buffer) {\n        if (err) {\n            return callback(err.message);\n        }\n\n        callback(null, toArrayBuffer(buffer));\n    });\n}\n\nfunction loadFromUrl(url, callback) {\n    var request = new XMLHttpRequest();\n    request.open('get', url, true);\n    request.responseType = 'arraybuffer';\n    request.onload = function() {\n        if (request.status !== 200) {\n            return callback('Font could not be loaded: ' + request.statusText);\n        }\n\n        return callback(null, request.response);\n    };\n\n    request.send();\n}\n\n// Public API ///////////////////////////////////////////////////////////\n\n// Parse the OpenType file data (as an ArrayBuffer) and return a Font object.\n// If the file could not be parsed (most likely because it contains Postscript outlines)\n// we return an empty Font object with the `supported` flag set to `false`.\nfunction parseBuffer(buffer) {\n    var indexToLocFormat;\n    var hmtxOffset;\n    var glyfOffset;\n    var locaOffset;\n    var cffOffset;\n    var kernOffset;\n    var gposOffset;\n\n    // OpenType fonts use big endian byte ordering.\n    // We can't rely on typed array view types, because they operate with the endianness of the host computer.\n    // Instead we use DataViews where we can specify endianness.\n\n    var font = new _font.Font();\n    var data = new DataView(buffer, 0);\n\n    var version = parse.getFixed(data, 0);\n    if (version === 1.0) {\n        font.outlinesFormat = 'truetype';\n    } else {\n        version = parse.getTag(data, 0);\n        if (version === 'OTTO') {\n            font.outlinesFormat = 'cff';\n        } else {\n            throw new Error('Unsupported OpenType version ' + version);\n        }\n    }\n\n    var numTables = parse.getUShort(data, 4);\n\n    // Offset into the table records.\n    var p = 12;\n    for (var i = 0; i < numTables; i += 1) {\n        var tag = parse.getTag(data, p);\n        var offset = parse.getULong(data, p + 8);\n        switch (tag) {\n        case 'cmap':\n            font.tables.cmap = cmap.parse(data, offset);\n            font.encoding = new encoding.CmapEncoding(font.tables.cmap);\n            if (!font.encoding) {\n                font.supported = false;\n            }\n\n            break;\n        case 'head':\n            font.tables.head = head.parse(data, offset);\n            font.unitsPerEm = font.tables.head.unitsPerEm;\n            indexToLocFormat = font.tables.head.indexToLocFormat;\n            break;\n        case 'hhea':\n            font.tables.hhea = hhea.parse(data, offset);\n            font.ascender = font.tables.hhea.ascender;\n            font.descender = font.tables.hhea.descender;\n            font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n            break;\n        case 'hmtx':\n            hmtxOffset = offset;\n            break;\n        case 'maxp':\n            font.tables.maxp = maxp.parse(data, offset);\n            font.numGlyphs = font.tables.maxp.numGlyphs;\n            break;\n        case 'name':\n            font.tables.name = _name.parse(data, offset);\n            font.familyName = font.tables.name.fontFamily;\n            font.styleName = font.tables.name.fontSubfamily;\n            break;\n        case 'OS/2':\n            font.tables.os2 = os2.parse(data, offset);\n            break;\n        case 'post':\n            font.tables.post = post.parse(data, offset);\n            font.glyphNames = new encoding.GlyphNames(font.tables.post);\n            break;\n        case 'glyf':\n            glyfOffset = offset;\n            break;\n        case 'loca':\n            locaOffset = offset;\n            break;\n        case 'CFF ':\n            cffOffset = offset;\n            break;\n        case 'kern':\n            kernOffset = offset;\n            break;\n        case 'GPOS':\n            gposOffset = offset;\n            break;\n        }\n        p += 16;\n    }\n\n    if (glyfOffset && locaOffset) {\n        var shortVersion = indexToLocFormat === 0;\n        var locaTable = loca.parse(data, locaOffset, font.numGlyphs, shortVersion);\n        font.glyphs = glyf.parse(data, glyfOffset, locaTable, font);\n        hmtx.parse(data, hmtxOffset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);\n        encoding.addGlyphNames(font);\n    } else if (cffOffset) {\n        cff.parse(data, cffOffset, font);\n        encoding.addGlyphNames(font);\n    } else {\n        font.supported = false;\n    }\n\n    if (font.supported) {\n        if (kernOffset) {\n            font.kerningPairs = kern.parse(data, kernOffset);\n        } else {\n            font.kerningPairs = {};\n        }\n\n        if (gposOffset) {\n            gpos.parse(data, gposOffset, font);\n        }\n    }\n\n    return font;\n}\n\n// Asynchronously load the font from a URL or a filesystem. When done, call the callback\n// with two arguments `(err, font)`. The `err` will be null on success,\n// the `font` is a Font object.\n//\n// We use the node.js callback convention so that\n// opentype.js can integrate with frameworks like async.js.\nfunction load(url, callback) {\n    var isNode = typeof window === 'undefined';\n    var loadFn = isNode ? loadFromFile : loadFromUrl;\n    loadFn(url, function(err, arrayBuffer) {\n        if (err) {\n            return callback(err);\n        }\n\n        var font = parseBuffer(arrayBuffer);\n        if (!font.supported) {\n            return callback('Font is not supported (is this a Postscript font?)');\n        }\n\n        return callback(null, font);\n    });\n}\n\nexports._parse = parse;\nexports.Font = _font.Font;\nexports.Glyph = glyph.Glyph;\nexports.Path = path.Path;\nexports.parse = parseBuffer;\nexports.load = load;\n\n},{\"./encoding\":3,\"./font\":4,\"./glyph\":5,\"./parse\":7,\"./path\":8,\"./tables/cff\":10,\"./tables/cmap\":11,\"./tables/glyf\":12,\"./tables/gpos\":13,\"./tables/head\":14,\"./tables/hhea\":15,\"./tables/hmtx\":16,\"./tables/kern\":17,\"./tables/loca\":18,\"./tables/maxp\":19,\"./tables/name\":20,\"./tables/os2\":21,\"./tables/post\":22,\"fs\":undefined}],7:[function(require,module,exports){\n// Parsing utility functions\n\n'use strict';\n\n// Retrieve an unsigned byte from the DataView.\nexports.getByte = function getByte(dataView, offset) {\n    return dataView.getUint8(offset);\n};\n\nexports.getCard8 = exports.getByte;\n\n// Retrieve an unsigned 16-bit short from the DataView.\n// The value is stored in big endian.\nexports.getUShort = function(dataView, offset) {\n    return dataView.getUint16(offset, false);\n};\n\nexports.getCard16 = exports.getUShort;\n\n// Retrieve a signed 16-bit short from the DataView.\n// The value is stored in big endian.\nexports.getShort = function(dataView, offset) {\n    return dataView.getInt16(offset, false);\n};\n\n// Retrieve an unsigned 32-bit long from the DataView.\n// The value is stored in big endian.\nexports.getULong = function(dataView, offset) {\n    return dataView.getUint32(offset, false);\n};\n\n// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.\n// The value is stored in big endian.\nexports.getFixed = function(dataView, offset) {\n    var decimal = dataView.getInt16(offset, false);\n    var fraction = dataView.getUint16(offset + 2, false);\n    return decimal + fraction / 65535;\n};\n\n// Retrieve a 4-character tag from the DataView.\n// Tags are used to identify tables.\nexports.getTag = function(dataView, offset) {\n    var tag = '';\n    for (var i = offset; i < offset + 4; i += 1) {\n        tag += String.fromCharCode(dataView.getInt8(i));\n    }\n\n    return tag;\n};\n\n// Retrieve an offset from the DataView.\n// Offsets are 1 to 4 bytes in length, depending on the offSize argument.\nexports.getOffset = function(dataView, offset, offSize) {\n    var v = 0;\n    for (var i = 0; i < offSize; i += 1) {\n        v <<= 8;\n        v += dataView.getUint8(offset + i);\n    }\n\n    return v;\n};\n\n// Retrieve a number of bytes from start offset to the end offset from the DataView.\nexports.getBytes = function(dataView, startOffset, endOffset) {\n    var bytes = [];\n    for (var i = startOffset; i < endOffset; i += 1) {\n        bytes.push(dataView.getUint8(i));\n    }\n\n    return bytes;\n};\n\n// Convert the list of bytes to a string.\nexports.bytesToString = function(bytes) {\n    var s = '';\n    for (var i = 0; i < bytes.length; i += 1) {\n        s += String.fromCharCode(bytes[i]);\n    }\n\n    return s;\n};\n\nvar typeOffsets = {\n    byte: 1,\n    uShort: 2,\n    short: 2,\n    uLong: 4,\n    fixed: 4,\n    longDateTime: 8,\n    tag: 4\n};\n\n// A stateful parser that changes the offset whenever a value is retrieved.\n// The data is a DataView.\nfunction Parser(data, offset) {\n    this.data = data;\n    this.offset = offset;\n    this.relativeOffset = 0;\n}\n\nParser.prototype.parseByte = function() {\n    var v = this.data.getUint8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\n\nParser.prototype.parseChar = function() {\n    var v = this.data.getInt8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\n\nParser.prototype.parseCard8 = Parser.prototype.parseByte;\n\nParser.prototype.parseUShort = function() {\n    var v = this.data.getUint16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseCard16 = Parser.prototype.parseUShort;\nParser.prototype.parseSID = Parser.prototype.parseUShort;\nParser.prototype.parseOffset16 = Parser.prototype.parseUShort;\n\nParser.prototype.parseShort = function() {\n    var v = this.data.getInt16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseF2Dot14 = function() {\n    var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n    this.relativeOffset += 2;\n    return v;\n};\n\nParser.prototype.parseULong = function() {\n    var v = exports.getULong(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\n\nParser.prototype.parseFixed = function() {\n    var v = exports.getFixed(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\n\nParser.prototype.parseOffset16List =\nParser.prototype.parseUShortList = function(count) {\n    var offsets = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for (var i = 0; i < count; i++) {\n        offsets[i] = exports.getUShort(dataView, offset);\n        offset += 2;\n    }\n\n    this.relativeOffset += count * 2;\n    return offsets;\n};\n\nParser.prototype.parseString = function(length) {\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    var string = '';\n    this.relativeOffset += length;\n    for (var i = 0; i < length; i++) {\n        string += String.fromCharCode(dataView.getUint8(offset + i));\n    }\n\n    return string;\n};\n\nParser.prototype.parseTag = function() {\n    return this.parseString(4);\n};\n\n// LONGDATETIME is a 64-bit integer.\n// JavaScript and unix timestamps traditionally use 32 bits, so we\n// only take the last 32 bits.\nParser.prototype.parseLongDateTime = function() {\n    var v = exports.getULong(this.data, this.offset + this.relativeOffset + 4);\n    this.relativeOffset += 8;\n    return v;\n};\n\nParser.prototype.parseFixed = function() {\n    var v = exports.getULong(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v / 65536;\n};\n\nParser.prototype.parseVersion = function() {\n    var major = exports.getUShort(this.data, this.offset + this.relativeOffset);\n\n    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1\n    // This returns the correct number if minor = 0xN000 where N is 0-9\n    var minor = exports.getUShort(this.data, this.offset + this.relativeOffset + 2);\n    this.relativeOffset += 4;\n    return major + minor / 0x1000 / 10;\n};\n\nParser.prototype.skip = function(type, amount) {\n    if (amount === undefined) {\n        amount = 1;\n    }\n\n    this.relativeOffset += typeOffsets[type] * amount;\n};\n\nexports.Parser = Parser;\n\n},{}],8:[function(require,module,exports){\n// Geometric objects\n\n'use strict';\n\n// A bézier path containing a set of path commands similar to a SVG path.\n// Paths can be drawn on a context using `draw`.\nfunction Path() {\n    this.commands = [];\n    this.fill = 'black';\n    this.stroke = null;\n    this.strokeWidth = 1;\n}\n\nPath.prototype.moveTo = function(x, y) {\n    this.commands.push({\n        type: 'M',\n        x: x,\n        y: y\n    });\n};\n\nPath.prototype.lineTo = function(x, y) {\n    this.commands.push({\n        type: 'L',\n        x: x,\n        y: y\n    });\n};\n\nPath.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {\n    this.commands.push({\n        type: 'C',\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        x: x,\n        y: y\n    });\n};\n\nPath.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {\n    this.commands.push({\n        type: 'Q',\n        x1: x1,\n        y1: y1,\n        x: x,\n        y: y\n    });\n};\n\nPath.prototype.close = Path.prototype.closePath = function() {\n    this.commands.push({\n        type: 'Z'\n    });\n};\n\n// Add the given path or list of commands to the commands of this path.\nPath.prototype.extend = function(pathOrCommands) {\n    if (pathOrCommands.commands) {\n        pathOrCommands = pathOrCommands.commands;\n    }\n\n    Array.prototype.push.apply(this.commands, pathOrCommands);\n};\n\n// Draw the path to a 2D context.\nPath.prototype.draw = function(ctx) {\n    ctx.beginPath();\n    for (var i = 0; i < this.commands.length; i += 1) {\n        var cmd = this.commands[i];\n        if (cmd.type === 'M') {\n            ctx.moveTo(cmd.x, cmd.y);\n        } else if (cmd.type === 'L') {\n            ctx.lineTo(cmd.x, cmd.y);\n        } else if (cmd.type === 'C') {\n            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n        } else if (cmd.type === 'Q') {\n            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);\n        } else if (cmd.type === 'Z') {\n            ctx.closePath();\n        }\n    }\n\n    if (this.fill) {\n        ctx.fillStyle = this.fill;\n        ctx.fill();\n    }\n\n    if (this.stroke) {\n        ctx.strokeStyle = this.stroke;\n        ctx.lineWidth = this.strokeWidth;\n        ctx.stroke();\n    }\n};\n\n// Convert the Path to a string of path data instructions\n// See http://www.w3.org/TR/SVG/paths.html#PathData\n// Parameters:\n// - decimalPlaces: The amount of decimal places for floating-point values (default: 2)\nPath.prototype.toPathData = function(decimalPlaces) {\n    decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;\n\n    function floatToString(v) {\n        if (Math.round(v) === v) {\n            return '' + Math.round(v);\n        } else {\n            return v.toFixed(decimalPlaces);\n        }\n    }\n\n    function packValues() {\n        var s = '';\n        for (var i = 0; i < arguments.length; i += 1) {\n            var v = arguments[i];\n            if (v >= 0 && i > 0) {\n                s += ' ';\n            }\n\n            s += floatToString(v);\n        }\n\n        return s;\n    }\n\n    var d = '';\n    for (var i = 0; i < this.commands.length; i += 1) {\n        var cmd = this.commands[i];\n        if (cmd.type === 'M') {\n            d += 'M' + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === 'L') {\n            d += 'L' + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === 'C') {\n            d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n        } else if (cmd.type === 'Q') {\n            d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n        } else if (cmd.type === 'Z') {\n            d += 'Z';\n        }\n    }\n\n    return d;\n};\n\n// Convert the path to a SVG <path> element, as a string.\n// Parameters:\n// - decimalPlaces: The amount of decimal places for floating-point values (default: 2)\nPath.prototype.toSVG = function(decimalPlaces) {\n    var svg = '<path d=\"';\n    svg += this.toPathData(decimalPlaces);\n    svg += '\"';\n    if (this.fill & this.fill !== 'black') {\n        if (this.fill === null) {\n            svg += ' fill=\"none\"';\n        } else {\n            svg += ' fill=\"' + this.fill + '\"';\n        }\n    }\n\n    if (this.stroke) {\n        svg += ' stroke=\"' + this.stroke + '\" stroke-width=\"' + this.strokeWidth + '\"';\n    }\n\n    svg += '/>';\n    return svg;\n};\n\nexports.Path = Path;\n\n},{}],9:[function(require,module,exports){\n// Table metadata\n\n'use strict';\n\nvar check = require('./check');\nvar encode = require('./types').encode;\nvar sizeOf = require('./types').sizeOf;\n\nfunction Table(tableName, fields, options) {\n    var i;\n    for (i = 0; i < fields.length; i += 1) {\n        var field = fields[i];\n        this[field.name] = field.value;\n    }\n\n    this.tableName = tableName;\n    this.fields = fields;\n    if (options) {\n        var optionKeys = Object.keys(options);\n        for (i = 0; i < optionKeys.length; i += 1) {\n            var k = optionKeys[i];\n            var v = options[k];\n            if (this[k] !== undefined) {\n                this[k] = v;\n            }\n        }\n    }\n}\n\nTable.prototype.sizeOf = function() {\n    var v = 0;\n    for (var i = 0; i < this.fields.length; i += 1) {\n        var field = this.fields[i];\n        var value = this[field.name];\n        if (value === undefined) {\n            value = field.value;\n        }\n\n        if (typeof value.sizeOf === 'function') {\n            v += value.sizeOf();\n        } else {\n            var sizeOfFunction = sizeOf[field.type];\n            check.assert(typeof sizeOfFunction === 'function', 'Could not find sizeOf function for field' + field.name);\n            v += sizeOfFunction(value);\n        }\n    }\n\n    return v;\n};\n\nTable.prototype.encode = function() {\n    return encode.TABLE(this);\n};\n\nexports.Table = Table;\n\n},{\"./check\":1,\"./types\":24}],10:[function(require,module,exports){\n// The `CFF` table contains the glyph outlines in PostScript format.\n// https://www.microsoft.com/typography/OTSPEC/cff.htm\n// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/cff.pdf\n// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/type2.pdf\n\n'use strict';\n\nvar encoding = require('../encoding');\nvar _glyph = require('../glyph');\nvar parse = require('../parse');\nvar path = require('../path');\nvar table = require('../table');\n\n// Custom equals function that can also check lists.\nfunction equals(a, b) {\n    if (a === b) {\n        return true;\n    } else if (Array.isArray(a) && Array.isArray(b)) {\n        if (a.length !== b.length) {\n            return false;\n        }\n\n        for (var i = 0; i < a.length; i += 1) {\n            if (!equals(a[i], b[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Parse a `CFF` INDEX array.\n// An index array consists of a list of offsets, then a list of objects at those offsets.\nfunction parseCFFIndex(data, start, conversionFn) {\n    //var i, objectOffset, endOffset;\n    var offsets = [];\n    var objects = [];\n    var count = parse.getCard16(data, start);\n    var i;\n    var objectOffset;\n    var endOffset;\n    if (count !== 0) {\n        var offsetSize = parse.getByte(data, start + 2);\n        objectOffset = start + ((count + 1) * offsetSize) + 2;\n        var pos = start + 3;\n        for (i = 0; i < count + 1; i += 1) {\n            offsets.push(parse.getOffset(data, pos, offsetSize));\n            pos += offsetSize;\n        }\n\n        // The total size of the index array is 4 header bytes + the value of the last offset.\n        endOffset = objectOffset + offsets[count];\n    } else {\n        endOffset = start + 2;\n    }\n\n    for (i = 0; i < offsets.length - 1; i += 1) {\n        var value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);\n        if (conversionFn) {\n            value = conversionFn(value);\n        }\n\n        objects.push(value);\n    }\n\n    return {objects: objects, startOffset: start, endOffset: endOffset};\n}\n\n// Parse a `CFF` DICT real value.\nfunction parseFloatOperand(parser) {\n    var s = '';\n    var eof = 15;\n    var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\n    while (true) {\n        var b = parser.parseByte();\n        var n1 = b >> 4;\n        var n2 = b & 15;\n\n        if (n1 === eof) {\n            break;\n        }\n\n        s += lookup[n1];\n\n        if (n2 === eof) {\n            break;\n        }\n\n        s += lookup[n2];\n    }\n\n    return parseFloat(s);\n}\n\n// Parse a `CFF` DICT operand.\nfunction parseOperand(parser, b0) {\n    var b1;\n    var b2;\n    var b3;\n    var b4;\n    if (b0 === 28) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        return b1 << 8 | b2;\n    }\n\n    if (b0 === 29) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        b3 = parser.parseByte();\n        b4 = parser.parseByte();\n        return b1 << 24 | b2 << 16 | b3 << 8 | b4;\n    }\n\n    if (b0 === 30) {\n        return parseFloatOperand(parser);\n    }\n\n    if (b0 >= 32 && b0 <= 246) {\n        return b0 - 139;\n    }\n\n    if (b0 >= 247 && b0 <= 250) {\n        b1 = parser.parseByte();\n        return (b0 - 247) * 256 + b1 + 108;\n    }\n\n    if (b0 >= 251 && b0 <= 254) {\n        b1 = parser.parseByte();\n        return -(b0 - 251) * 256 - b1 - 108;\n    }\n\n    throw new Error('Invalid b0 ' + b0);\n}\n\n// Convert the entries returned by `parseDict` to a proper dictionary.\n// If a value is a list of one, it is unpacked.\nfunction entriesToObject(entries) {\n    var o = {};\n    for (var i = 0; i < entries.length; i += 1) {\n        var key = entries[i][0];\n        var values = entries[i][1];\n        var value;\n        if (values.length === 1) {\n            value = values[0];\n        } else {\n            value = values;\n        }\n\n        if (o.hasOwnProperty(key)) {\n            throw new Error('Object ' + o + ' already has key ' + key);\n        }\n\n        o[key] = value;\n    }\n\n    return o;\n}\n\n// Parse a `CFF` DICT object.\n// A dictionary contains key-value pairs in a compact tokenized format.\nfunction parseCFFDict(data, start, size) {\n    start = start !== undefined ? start : 0;\n    var parser = new parse.Parser(data, start);\n    var entries = [];\n    var operands = [];\n    size = size !== undefined ? size : data.length;\n\n    while (parser.relativeOffset < size) {\n        var op = parser.parseByte();\n\n        // The first byte for each dict item distinguishes between operator (key) and operand (value).\n        // Values <= 21 are operators.\n        if (op <= 21) {\n            // Two-byte operators have an initial escape byte of 12.\n            if (op === 12) {\n                op = 1200 + parser.parseByte();\n            }\n\n            entries.push([op, operands]);\n            operands = [];\n        } else {\n            // Since the operands (values) come before the operators (keys), we store all operands in a list\n            // until we encounter an operator.\n            operands.push(parseOperand(parser, op));\n        }\n    }\n\n    return entriesToObject(entries);\n}\n\n// Given a String Index (SID), return the value of the string.\n// Strings below index 392 are standard CFF strings and are not encoded in the font.\nfunction getCFFString(strings, index) {\n    if (index <= 390) {\n        index = encoding.cffStandardStrings[index];\n    } else {\n        index = strings[index - 391];\n    }\n\n    return index;\n}\n\n// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.\n// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.\nfunction interpretDict(dict, meta, strings) {\n    var newDict = {};\n\n    // Because we also want to include missing values, we start out from the meta list\n    // and lookup values in the dict.\n    for (var i = 0; i < meta.length; i += 1) {\n        var m = meta[i];\n        var value = dict[m.op];\n        if (value === undefined) {\n            value = m.value !== undefined ? m.value : null;\n        }\n\n        if (m.type === 'SID') {\n            value = getCFFString(strings, value);\n        }\n\n        newDict[m.name] = value;\n    }\n\n    return newDict;\n}\n\n// Parse the CFF header.\nfunction parseCFFHeader(data, start) {\n    var header = {};\n    header.formatMajor = parse.getCard8(data, start);\n    header.formatMinor = parse.getCard8(data, start + 1);\n    header.size = parse.getCard8(data, start + 2);\n    header.offsetSize = parse.getCard8(data, start + 3);\n    header.startOffset = start;\n    header.endOffset = start + 4;\n    return header;\n}\n\nvar TOP_DICT_META = [\n    {name: 'version', op: 0, type: 'SID'},\n    {name: 'notice', op: 1, type: 'SID'},\n    {name: 'copyright', op: 1200, type: 'SID'},\n    {name: 'fullName', op: 2, type: 'SID'},\n    {name: 'familyName', op: 3, type: 'SID'},\n    {name: 'weight', op: 4, type: 'SID'},\n    {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},\n    {name: 'italicAngle', op: 1202, type: 'number', value: 0},\n    {name: 'underlinePosition', op: 1203, type: 'number', value: -100},\n    {name: 'underlineThickness', op: 1204, type: 'number', value: 50},\n    {name: 'paintType', op: 1205, type: 'number', value: 0},\n    {name: 'charstringType', op: 1206, type: 'number', value: 2},\n    {name: 'fontMatrix', op: 1207, type: ['real', 'real', 'real', 'real', 'real', 'real'], value: [0.001, 0, 0, 0.001, 0, 0]},\n    {name: 'uniqueId', op: 13, type: 'number'},\n    {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},\n    {name: 'strokeWidth', op: 1208, type: 'number', value: 0},\n    {name: 'xuid', op: 14, type: [], value: null},\n    {name: 'charset', op: 15, type: 'offset', value: 0},\n    {name: 'encoding', op: 16, type: 'offset', value: 0},\n    {name: 'charStrings', op: 17, type: 'offset', value: 0},\n    {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]}\n];\n\nvar PRIVATE_DICT_META = [\n    {name: 'subrs', op: 19, type: 'offset', value: 0},\n    {name: 'defaultWidthX', op: 20, type: 'number', value: 0},\n    {name: 'nominalWidthX', op: 21, type: 'number', value: 0}\n];\n\n// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.\n// The top dictionary contains the essential metadata for the font, together with the private dictionary.\nfunction parseCFFTopDict(data, strings) {\n    var dict = parseCFFDict(data, 0, data.byteLength);\n    return interpretDict(dict, TOP_DICT_META, strings);\n}\n\n// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.\nfunction parseCFFPrivateDict(data, start, size, strings) {\n    var dict = parseCFFDict(data, start, size);\n    return interpretDict(dict, PRIVATE_DICT_META, strings);\n}\n\n// Parse the CFF charset table, which contains internal names for all the glyphs.\n// This function will return a list of glyph names.\n// See Adobe TN #5176 chapter 13, \"Charsets\".\nfunction parseCFFCharset(data, start, nGlyphs, strings) {\n    var i;\n    var sid;\n    var count;\n    var parser = new parse.Parser(data, start);\n\n    // The .notdef glyph is not included, so subtract 1.\n    nGlyphs -= 1;\n    var charset = ['.notdef'];\n\n    var format = parser.parseCard8();\n    if (format === 0) {\n        for (i = 0; i < nGlyphs; i += 1) {\n            sid = parser.parseSID();\n            charset.push(getCFFString(strings, sid));\n        }\n    } else if (format === 1) {\n        while (charset.length <= nGlyphs) {\n            sid = parser.parseSID();\n            count = parser.parseCard8();\n            for (i = 0; i <= count; i += 1) {\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else if (format === 2) {\n        while (charset.length <= nGlyphs) {\n            sid = parser.parseSID();\n            count = parser.parseCard16();\n            for (i = 0; i <= count; i += 1) {\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else {\n        throw new Error('Unknown charset format ' + format);\n    }\n\n    return charset;\n}\n\n// Parse the CFF encoding data. Only one encoding can be specified per font.\n// See Adobe TN #5176 chapter 12, \"Encodings\".\nfunction parseCFFEncoding(data, start, charset) {\n    var i;\n    var code;\n    var enc = {};\n    var parser = new parse.Parser(data, start);\n    var format = parser.parseCard8();\n    if (format === 0) {\n        var nCodes = parser.parseCard8();\n        for (i = 0; i < nCodes; i += 1) {\n            code = parser.parseCard8();\n            enc[code] = i;\n        }\n    } else if (format === 1) {\n        var nRanges = parser.parseCard8();\n        code = 1;\n        for (i = 0; i < nRanges; i += 1) {\n            var first = parser.parseCard8();\n            var nLeft = parser.parseCard8();\n            for (var j = first; j <= first + nLeft; j += 1) {\n                enc[j] = code;\n                code += 1;\n            }\n        }\n    } else {\n        throw new Error('Unknown encoding format ' + format);\n    }\n\n    return new encoding.CffEncoding(enc, charset);\n}\n\n// Take in charstring code and return a Glyph object.\n// The encoding is described in the Type 2 Charstring Format\n// https://www.microsoft.com/typography/OTSPEC/charstr2.htm\nfunction parseCFFCharstring(code, font, index) {\n    var c1x;\n    var c1y;\n    var c2x;\n    var c2y;\n    var p = new path.Path();\n    var stack = [];\n    var nStems = 0;\n    var haveWidth = false;\n    var width = font.defaultWidthX;\n    var open = false;\n    var x = 0;\n    var y = 0;\n\n    function newContour(x, y) {\n        if (open) {\n            p.closePath();\n        }\n\n        p.moveTo(x, y);\n        open = true;\n    }\n\n    function parseStems() {\n        var hasWidthArg;\n\n        // The number of stem operators on the stack is always even.\n        // If the value is uneven, that means a width is specified.\n        hasWidthArg = stack.length % 2 !== 0;\n        if (hasWidthArg && !haveWidth) {\n            width = stack.shift() + font.nominalWidthX;\n        }\n\n        nStems += stack.length >> 1;\n        stack.length = 0;\n        haveWidth = true;\n    }\n\n    function parse(code) {\n        var b1;\n        var b2;\n        var b3;\n        var b4;\n        var codeIndex;\n        var subrCode;\n        var jpx;\n        var jpy;\n        var c3x;\n        var c3y;\n        var c4x;\n        var c4y;\n\n        var i = 0;\n        while (i < code.length) {\n            var v = code[i];\n            i += 1;\n            switch (v) {\n            case 1: // hstem\n                parseStems();\n                break;\n            case 3: // vstem\n                parseStems();\n                break;\n            case 4: // vmoveto\n                if (stack.length > 1 && !haveWidth) {\n                    width = stack.shift() + font.nominalWidthX;\n                    haveWidth = true;\n                }\n\n                y += stack.pop();\n                newContour(x, y);\n                break;\n            case 5: // rlineto\n                while (stack.length > 0) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    p.lineTo(x, y);\n                }\n\n                break;\n            case 6: // hlineto\n                while (stack.length > 0) {\n                    x += stack.shift();\n                    p.lineTo(x, y);\n                    if (stack.length === 0) {\n                        break;\n                    }\n\n                    y += stack.shift();\n                    p.lineTo(x, y);\n                }\n\n                break;\n            case 7: // vlineto\n                while (stack.length > 0) {\n                    y += stack.shift();\n                    p.lineTo(x, y);\n                    if (stack.length === 0) {\n                        break;\n                    }\n\n                    x += stack.shift();\n                    p.lineTo(x, y);\n                }\n\n                break;\n            case 8: // rrcurveto\n                while (stack.length > 0) {\n                    c1x = x + stack.shift();\n                    c1y = y + stack.shift();\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    x = c2x + stack.shift();\n                    y = c2y + stack.shift();\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                }\n\n                break;\n            case 10: // callsubr\n                codeIndex = stack.pop() + font.subrsBias;\n                subrCode = font.subrs[codeIndex];\n                if (subrCode) {\n                    parse(subrCode);\n                }\n\n                break;\n            case 11: // return\n                return;\n            case 12: // flex operators\n                v = code[i];\n                i += 1;\n                switch (v) {\n                case 35: // flex\n                    // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-\n                    c1x = x   + stack.shift();    // dx1\n                    c1y = y   + stack.shift();    // dy1\n                    c2x = c1x + stack.shift();    // dx2\n                    c2y = c1y + stack.shift();    // dy2\n                    jpx = c2x + stack.shift();    // dx3\n                    jpy = c2y + stack.shift();    // dy3\n                    c3x = jpx + stack.shift();    // dx4\n                    c3y = jpy + stack.shift();    // dy4\n                    c4x = c3x + stack.shift();    // dx5\n                    c4y = c3y + stack.shift();    // dy5\n                    x = c4x + stack.shift();      // dx6\n                    y = c4y + stack.shift();      // dy6\n                    stack.shift();                // flex depth\n                    p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                    p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                    break;\n                case 34: // hflex\n                    // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-\n                    c1x = x   + stack.shift();    // dx1\n                    c1y = y;                      // dy1\n                    c2x = c1x + stack.shift();    // dx2\n                    c2y = c1y + stack.shift();    // dy2\n                    jpx = c2x + stack.shift();    // dx3\n                    jpy = c2y;                    // dy3\n                    c3x = jpx + stack.shift();    // dx4\n                    c3y = c2y;                    // dy4\n                    c4x = c3x + stack.shift();    // dx5\n                    c4y = y;                      // dy5\n                    x = c4x + stack.shift();      // dx6\n                    p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                    p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                    break;\n                case 36: // hflex1\n                    // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-\n                    c1x = x   + stack.shift();    // dx1\n                    c1y = y   + stack.shift();    // dy1\n                    c2x = c1x + stack.shift();    // dx2\n                    c2y = c1y + stack.shift();    // dy2\n                    jpx = c2x + stack.shift();    // dx3\n                    jpy = c2y;                    // dy3\n                    c3x = jpx + stack.shift();    // dx4\n                    c3y = c2y;                    // dy4\n                    c4x = c3x + stack.shift();    // dx5\n                    c4y = c3y + stack.shift();    // dy5\n                    x = c4x + stack.shift();      // dx6\n                    p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                    p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                    break;\n                case 37: // flex1\n                    // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-\n                    c1x = x   + stack.shift();    // dx1\n                    c1y = y   + stack.shift();    // dy1\n                    c2x = c1x + stack.shift();    // dx2\n                    c2y = c1y + stack.shift();    // dy2\n                    jpx = c2x + stack.shift();    // dx3\n                    jpy = c2y + stack.shift();    // dy3\n                    c3x = jpx + stack.shift();    // dx4\n                    c3y = jpy + stack.shift();    // dy4\n                    c4x = c3x + stack.shift();    // dx5\n                    c4y = c3y + stack.shift();    // dy5\n                    if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n                        x = c4x + stack.shift();\n                    } else {\n                        y = c4y + stack.shift();\n                    }\n\n                    p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                    p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                    break;\n                default:\n                    console.log('Glyph ' + index + ': unknown operator ' + 1200 + v);\n                    stack.length = 0;\n                }\n                break;\n            case 14: // endchar\n                if (stack.length > 0 && !haveWidth) {\n                    width = stack.shift() + font.nominalWidthX;\n                    haveWidth = true;\n                }\n\n                if (open) {\n                    p.closePath();\n                    open = false;\n                }\n\n                break;\n            case 18: // hstemhm\n                parseStems();\n                break;\n            case 19: // hintmask\n            case 20: // cntrmask\n                parseStems();\n                i += (nStems + 7) >> 3;\n                break;\n            case 21: // rmoveto\n                if (stack.length > 2 && !haveWidth) {\n                    width = stack.shift() + font.nominalWidthX;\n                    haveWidth = true;\n                }\n\n                y += stack.pop();\n                x += stack.pop();\n                newContour(x, y);\n                break;\n            case 22: // hmoveto\n                if (stack.length > 1 && !haveWidth) {\n                    width = stack.shift() + font.nominalWidthX;\n                    haveWidth = true;\n                }\n\n                x += stack.pop();\n                newContour(x, y);\n                break;\n            case 23: // vstemhm\n                parseStems();\n                break;\n            case 24: // rcurveline\n                while (stack.length > 2) {\n                    c1x = x + stack.shift();\n                    c1y = y + stack.shift();\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    x = c2x + stack.shift();\n                    y = c2y + stack.shift();\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                }\n\n                x += stack.shift();\n                y += stack.shift();\n                p.lineTo(x, y);\n                break;\n            case 25: // rlinecurve\n                while (stack.length > 6) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    p.lineTo(x, y);\n                }\n\n                c1x = x + stack.shift();\n                c1y = y + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                break;\n            case 26: // vvcurveto\n                if (stack.length % 2) {\n                    x += stack.shift();\n                }\n\n                while (stack.length > 0) {\n                    c1x = x;\n                    c1y = y + stack.shift();\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    x = c2x;\n                    y = c2y + stack.shift();\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                }\n\n                break;\n            case 27: // hhcurveto\n                if (stack.length % 2) {\n                    y += stack.shift();\n                }\n\n                while (stack.length > 0) {\n                    c1x = x + stack.shift();\n                    c1y = y;\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    x = c2x + stack.shift();\n                    y = c2y;\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                }\n\n                break;\n            case 28: // shortint\n                b1 = code[i];\n                b2 = code[i + 1];\n                stack.push(((b1 << 24) | (b2 << 16)) >> 16);\n                i += 2;\n                break;\n            case 29: // callgsubr\n                codeIndex = stack.pop() + font.gsubrsBias;\n                subrCode = font.gsubrs[codeIndex];\n                if (subrCode) {\n                    parse(subrCode);\n                }\n\n                break;\n            case 30: // vhcurveto\n                while (stack.length > 0) {\n                    c1x = x;\n                    c1y = y + stack.shift();\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    x = c2x + stack.shift();\n                    y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    if (stack.length === 0) {\n                        break;\n                    }\n\n                    c1x = x + stack.shift();\n                    c1y = y;\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    y = c2y + stack.shift();\n                    x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                }\n\n                break;\n            case 31: // hvcurveto\n                while (stack.length > 0) {\n                    c1x = x + stack.shift();\n                    c1y = y;\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    y = c2y + stack.shift();\n                    x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    if (stack.length === 0) {\n                        break;\n                    }\n\n                    c1x = x;\n                    c1y = y + stack.shift();\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    x = c2x + stack.shift();\n                    y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                }\n\n                break;\n            default:\n                if (v < 32) {\n                    console.log('Glyph ' + index + ': unknown operator ' + v);\n                } else if (v < 247) {\n                    stack.push(v - 139);\n                } else if (v < 251) {\n                    b1 = code[i];\n                    i += 1;\n                    stack.push((v - 247) * 256 + b1 + 108);\n                } else if (v < 255) {\n                    b1 = code[i];\n                    i += 1;\n                    stack.push(-(v - 251) * 256 - b1 - 108);\n                } else {\n                    b1 = code[i];\n                    b2 = code[i + 1];\n                    b3 = code[i + 2];\n                    b4 = code[i + 3];\n                    i += 4;\n                    stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);\n                }\n            }\n        }\n    }\n\n    parse(code);\n    var glyph = new _glyph.Glyph({font: font, index: index});\n    glyph.path = p;\n    glyph.advanceWidth = width;\n    return glyph;\n}\n\n// Subroutines are encoded using the negative half of the number space.\n// See type 2 chapter 4.7 \"Subroutine operators\".\nfunction calcCFFSubroutineBias(subrs) {\n    var bias;\n    if (subrs.length < 1240) {\n        bias = 107;\n    } else if (subrs.length < 33900) {\n        bias = 1131;\n    } else {\n        bias = 32768;\n    }\n\n    return bias;\n}\n\n// Parse the `CFF` table, which contains the glyph outlines in PostScript format.\nfunction parseCFFTable(data, start, font) {\n    font.tables.cff = {};\n    var header = parseCFFHeader(data, start);\n    var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);\n    var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n    var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);\n    var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n    font.gsubrs = globalSubrIndex.objects;\n    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n\n    var topDictData = new DataView(new Uint8Array(topDictIndex.objects[0]).buffer);\n    var topDict = parseCFFTopDict(topDictData, stringIndex.objects);\n    font.tables.cff.topDict = topDict;\n\n    var privateDictOffset = start + topDict['private'][1];\n    var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict['private'][0], stringIndex.objects);\n    font.defaultWidthX = privateDict.defaultWidthX;\n    font.nominalWidthX = privateDict.nominalWidthX;\n\n    if (privateDict.subrs !== 0) {\n        var subrOffset = privateDictOffset + privateDict.subrs;\n        var subrIndex = parseCFFIndex(data, subrOffset);\n        font.subrs = subrIndex.objects;\n        font.subrsBias = calcCFFSubroutineBias(font.subrs);\n    } else {\n        font.subrs = [];\n        font.subrsBias = 0;\n    }\n\n    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.\n    var charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n    font.nGlyphs = charStringsIndex.objects.length;\n\n    var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);\n    if (topDict.encoding === 0) { // Standard encoding\n        font.cffEncoding = new encoding.CffEncoding(encoding.cffStandardEncoding, charset);\n    } else if (topDict.encoding === 1) { // Expert encoding\n        font.cffEncoding = new encoding.CffEncoding(encoding.cffExpertEncoding, charset);\n    } else {\n        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);\n    }\n\n    // Prefer the CMAP encoding to the CFF encoding.\n    font.encoding = font.encoding || font.cffEncoding;\n\n    font.glyphs = [];\n    for (var i = 0; i < font.nGlyphs; i += 1) {\n        var charString = charStringsIndex.objects[i];\n        font.glyphs.push(parseCFFCharstring(charString, font, i));\n    }\n}\n\n// Convert a string to a String ID (SID).\n// The list of strings is modified in place.\nfunction encodeString(s, strings) {\n    var sid;\n\n    // Is the string in the CFF standard strings?\n    var i = encoding.cffStandardStrings.indexOf(s);\n    if (i >= 0) {\n        sid = i;\n    }\n\n    // Is the string already in the string index?\n    i = strings.indexOf(s);\n    if (i >= 0) {\n        sid = i + encoding.cffStandardStrings.length;\n    } else {\n        sid = encoding.cffStandardStrings.length + strings.length;\n        strings.push(s);\n    }\n\n    return sid;\n}\n\nfunction makeHeader() {\n    return new table.Table('Header', [\n        {name: 'major', type: 'Card8', value: 1},\n        {name: 'minor', type: 'Card8', value: 0},\n        {name: 'hdrSize', type: 'Card8', value: 4},\n        {name: 'major', type: 'Card8', value: 1}\n    ]);\n}\n\nfunction makeNameIndex(fontNames) {\n    var t = new table.Table('Name INDEX', [\n        {name: 'names', type: 'INDEX', value: []}\n    ]);\n    t.names = [];\n    for (var i = 0; i < fontNames.length; i += 1) {\n        t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});\n    }\n\n    return t;\n}\n\n// Given a dictionary's metadata, create a DICT structure.\nfunction makeDict(meta, attrs, strings) {\n    var m = {};\n    for (var i = 0; i < meta.length; i += 1) {\n        var entry = meta[i];\n        var value = attrs[entry.name];\n        if (value !== undefined && !equals(value, entry.value)) {\n            if (entry.type === 'SID') {\n                value = encodeString(value, strings);\n            }\n\n            m[entry.op] = {name: entry.name, type: entry.type, value: value};\n        }\n    }\n\n    return m;\n}\n\n// The Top DICT houses the global font attributes.\nfunction makeTopDict(attrs, strings) {\n    var t = new table.Table('Top DICT', [\n        {name: 'dict', type: 'DICT', value: {}}\n    ]);\n    t.dict = makeDict(TOP_DICT_META, attrs, strings);\n    return t;\n}\n\nfunction makeTopDictIndex(topDict) {\n    var t = new table.Table('Top DICT INDEX', [\n        {name: 'topDicts', type: 'INDEX', value: []}\n    ]);\n    t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];\n    return t;\n}\n\nfunction makeStringIndex(strings) {\n    var t = new table.Table('String INDEX', [\n        {name: 'strings', type: 'INDEX', value: []}\n    ]);\n    t.strings = [];\n    for (var i = 0; i < strings.length; i += 1) {\n        t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});\n    }\n\n    return t;\n}\n\nfunction makeGlobalSubrIndex() {\n    // Currently we don't use subroutines.\n    return new table.Table('Global Subr INDEX', [\n        {name: 'subrs', type: 'INDEX', value: []}\n    ]);\n}\n\nfunction makeCharsets(glyphNames, strings) {\n    var t = new table.Table('Charsets', [\n        {name: 'format', type: 'Card8', value: 0}\n    ]);\n    for (var i = 0; i < glyphNames.length; i += 1) {\n        var glyphName = glyphNames[i];\n        var glyphSID = encodeString(glyphName, strings);\n        t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});\n    }\n\n    return t;\n}\n\nfunction glyphToOps(glyph) {\n    var ops = [];\n    var path = glyph.path;\n    ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});\n    var x = 0;\n    var y = 0;\n    for (var i = 0; i < path.commands.length; i += 1) {\n        var dx;\n        var dy;\n        var cmd = path.commands[i];\n        if (cmd.type === 'Q') {\n            // CFF only supports bézier curves, so convert the quad to a bézier.\n            var _13 = 1 / 3;\n            var _23 = 2 / 3;\n\n            // We're going to create a new command so we don't change the original path.\n            cmd = {\n                type: 'C',\n                x: cmd.x,\n                y: cmd.y,\n                x1: _13 * x + _23 * cmd.x1,\n                y1: _13 * y + _23 * cmd.y1,\n                x2: _13 * cmd.x + _23 * cmd.x1,\n                y2: _13 * cmd.y + _23 * cmd.y1\n            };\n        }\n\n        if (cmd.type === 'M') {\n            dx = Math.round(cmd.x - x);\n            dy = Math.round(cmd.y - y);\n            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n            ops.push({name: 'rmoveto', type: 'OP', value: 21});\n            x = Math.round(cmd.x);\n            y = Math.round(cmd.y);\n        } else if (cmd.type === 'L') {\n            dx = Math.round(cmd.x - x);\n            dy = Math.round(cmd.y - y);\n            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n            ops.push({name: 'rlineto', type: 'OP', value: 5});\n            x = Math.round(cmd.x);\n            y = Math.round(cmd.y);\n        } else if (cmd.type === 'C') {\n            var dx1 = Math.round(cmd.x1 - x);\n            var dy1 = Math.round(cmd.y1 - y);\n            var dx2 = Math.round(cmd.x2 - cmd.x1);\n            var dy2 = Math.round(cmd.y2 - cmd.y1);\n            dx = Math.round(cmd.x - cmd.x2);\n            dy = Math.round(cmd.y - cmd.y2);\n            ops.push({name: 'dx1', type: 'NUMBER', value: dx1});\n            ops.push({name: 'dy1', type: 'NUMBER', value: dy1});\n            ops.push({name: 'dx2', type: 'NUMBER', value: dx2});\n            ops.push({name: 'dy2', type: 'NUMBER', value: dy2});\n            ops.push({name: 'dx', type: 'NUMBER', value: dx});\n            ops.push({name: 'dy', type: 'NUMBER', value: dy});\n            ops.push({name: 'rrcurveto', type: 'OP', value: 8});\n            x = Math.round(cmd.x);\n            y = Math.round(cmd.y);\n        }\n\n        // Contours are closed automatically.\n\n    }\n\n    ops.push({name: 'endchar', type: 'OP', value: 14});\n    return ops;\n}\n\nfunction makeCharStringsIndex(glyphs) {\n    var t = new table.Table('CharStrings INDEX', [\n        {name: 'charStrings', type: 'INDEX', value: []}\n    ]);\n    for (var i = 0; i < glyphs.length; i += 1) {\n        var glyph = glyphs[i];\n        var ops = glyphToOps(glyph);\n        t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});\n    }\n\n    return t;\n}\n\nfunction makePrivateDict(attrs, strings) {\n    var t = new table.Table('Private DICT', [\n        {name: 'dict', type: 'DICT', value: {}}\n    ]);\n    t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);\n    return t;\n}\n\nfunction makePrivateDictIndex(privateDict) {\n    var t = new table.Table('Private DICT INDEX', [\n        {name: 'privateDicts', type: 'INDEX', value: []}\n    ]);\n    t.privateDicts = [{name: 'privateDict_0', type: 'TABLE', value: privateDict}];\n    return t;\n}\n\nfunction makeCFFTable(glyphs, options) {\n    var t = new table.Table('CFF ', [\n        {name: 'header', type: 'TABLE'},\n        {name: 'nameIndex', type: 'TABLE'},\n        {name: 'topDictIndex', type: 'TABLE'},\n        {name: 'stringIndex', type: 'TABLE'},\n        {name: 'globalSubrIndex', type: 'TABLE'},\n        {name: 'charsets', type: 'TABLE'},\n        {name: 'charStringsIndex', type: 'TABLE'},\n        {name: 'privateDictIndex', type: 'TABLE'}\n    ]);\n\n    // We use non-zero values for the offsets so that the DICT encodes them.\n    // This is important because the size of the Top DICT plays a role in offset calculation,\n    // and the size shouldn't change after we've written correct offsets.\n    var attrs = {\n        version: options.version,\n        fullName: options.fullName,\n        familyName: options.familyName,\n        weight: options.weightName,\n        charset: 999,\n        encoding: 0,\n        charStrings: 999,\n        private: [0, 999]\n    };\n\n    var privateAttrs = {};\n\n    var glyphNames = [];\n\n    // Skip first glyph (.notdef)\n    for (var i = 1; i < glyphs.length; i += 1) {\n        glyphNames.push(glyphs[i].name);\n    }\n\n    var strings = [];\n\n    t.header = makeHeader();\n    t.nameIndex = makeNameIndex([options.postScriptName]);\n    var topDict = makeTopDict(attrs, strings);\n    t.topDictIndex = makeTopDictIndex(topDict);\n    t.globalSubrIndex = makeGlobalSubrIndex();\n    t.charsets = makeCharsets(glyphNames, strings);\n    t.charStringsIndex = makeCharStringsIndex(glyphs);\n    var privateDict = makePrivateDict(privateAttrs, strings);\n    t.privateDictIndex = makePrivateDictIndex(privateDict);\n\n    // Needs to come at the end, to encode all custom strings used in the font.\n    t.stringIndex = makeStringIndex(strings);\n\n    var startOffset = t.header.sizeOf() +\n        t.nameIndex.sizeOf() +\n        t.topDictIndex.sizeOf() +\n        t.stringIndex.sizeOf() +\n        t.globalSubrIndex.sizeOf();\n    attrs.charset = startOffset;\n\n    // We use the CFF standard encoding; proper encoding will be handled in cmap.\n    attrs.encoding = 0;\n    attrs.charStrings = attrs.charset + t.charsets.sizeOf();\n    attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();\n\n    // Recreate the Top DICT INDEX with the correct offsets.\n    topDict = makeTopDict(attrs, strings);\n    t.topDictIndex = makeTopDictIndex(topDict);\n\n    return t;\n}\n\nexports.parse = parseCFFTable;\nexports.make = makeCFFTable;\n\n},{\"../encoding\":3,\"../glyph\":5,\"../parse\":7,\"../path\":8,\"../table\":9}],11:[function(require,module,exports){\n// The `cmap` table stores the mappings from characters to glyphs.\n// https://www.microsoft.com/typography/OTSPEC/cmap.htm\n\n'use strict';\n\nvar check = require('../check');\nvar parse = require('../parse');\nvar table = require('../table');\n\n// Parse the `cmap` table. This table stores the mappings from characters to glyphs.\n// There are many available formats, but we only support the Windows format 4.\n// This function returns a `CmapEncoding` object or null if no supported format could be found.\nfunction parseCmapTable(data, start) {\n    var i;\n    var cmap = {};\n    cmap.version = parse.getUShort(data, start);\n    check.argument(cmap.version === 0, 'cmap table version should be 0.');\n\n    // The cmap table can contain many sub-tables, each with their own format.\n    // We're only interested in a \"platform 3\" table. This is a Windows format.\n    cmap.numTables = parse.getUShort(data, start + 2);\n    var offset = -1;\n    for (i = 0; i < cmap.numTables; i += 1) {\n        var platformId = parse.getUShort(data, start + 4 + (i * 8));\n        var encodingId = parse.getUShort(data, start + 4 + (i * 8) + 2);\n        if (platformId === 3 && (encodingId === 1 || encodingId === 0)) {\n            offset = parse.getULong(data, start + 4 + (i * 8) + 4);\n            break;\n        }\n    }\n\n    if (offset === -1) {\n        // There is no cmap table in the font that we support, so return null.\n        // This font will be marked as unsupported.\n        return null;\n    }\n\n    var p = new parse.Parser(data, start + offset);\n    cmap.format = p.parseUShort();\n    check.argument(cmap.format === 4, 'Only format 4 cmap tables are supported.');\n\n    // Length in bytes of the sub-tables.\n    cmap.length = p.parseUShort();\n    cmap.language = p.parseUShort();\n\n    // segCount is stored x 2.\n    var segCount;\n    cmap.segCount = segCount = p.parseUShort() >> 1;\n\n    // Skip searchRange, entrySelector, rangeShift.\n    p.skip('uShort', 3);\n\n    // The \"unrolled\" mapping from character codes to glyph indices.\n    cmap.glyphIndexMap = {};\n\n    var endCountParser = new parse.Parser(data, start + offset + 14);\n    var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);\n    var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);\n    var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);\n    var glyphIndexOffset = start + offset + 16 + segCount * 8;\n    for (i = 0; i < segCount - 1; i += 1) {\n        var glyphIndex;\n        var endCount = endCountParser.parseUShort();\n        var startCount = startCountParser.parseUShort();\n        var idDelta = idDeltaParser.parseShort();\n        var idRangeOffset = idRangeOffsetParser.parseUShort();\n        for (var c = startCount; c <= endCount; c += 1) {\n            if (idRangeOffset !== 0) {\n                // The idRangeOffset is relative to the current position in the idRangeOffset array.\n                // Take the current offset in the idRangeOffset array.\n                glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);\n\n                // Add the value of the idRangeOffset, which will move us into the glyphIndex array.\n                glyphIndexOffset += idRangeOffset;\n\n                // Then add the character index of the current segment, multiplied by 2 for USHORTs.\n                glyphIndexOffset += (c - startCount) * 2;\n                glyphIndex = parse.getUShort(data, glyphIndexOffset);\n                if (glyphIndex !== 0) {\n                    glyphIndex = (glyphIndex + idDelta) & 0xFFFF;\n                }\n            } else {\n                glyphIndex = (c + idDelta) & 0xFFFF;\n            }\n\n            cmap.glyphIndexMap[c] = glyphIndex;\n        }\n    }\n\n    return cmap;\n}\n\nfunction addSegment(t, code, glyphIndex) {\n    t.segments.push({\n        end: code,\n        start: code,\n        delta: -(code - glyphIndex),\n        offset: 0\n    });\n}\n\nfunction addTerminatorSegment(t) {\n    t.segments.push({\n        end: 0xFFFF,\n        start: 0xFFFF,\n        delta: 1,\n        offset: 0\n    });\n}\n\nfunction makeCmapTable(glyphs) {\n    var i;\n    var t = new table.Table('cmap', [\n        {name: 'version', type: 'USHORT', value: 0},\n        {name: 'numTables', type: 'USHORT', value: 1},\n        {name: 'platformID', type: 'USHORT', value: 3},\n        {name: 'encodingID', type: 'USHORT', value: 1},\n        {name: 'offset', type: 'ULONG', value: 12},\n        {name: 'format', type: 'USHORT', value: 4},\n        {name: 'length', type: 'USHORT', value: 0},\n        {name: 'language', type: 'USHORT', value: 0},\n        {name: 'segCountX2', type: 'USHORT', value: 0},\n        {name: 'searchRange', type: 'USHORT', value: 0},\n        {name: 'entrySelector', type: 'USHORT', value: 0},\n        {name: 'rangeShift', type: 'USHORT', value: 0}\n    ]);\n\n    t.segments = [];\n    for (i = 0; i < glyphs.length; i += 1) {\n        var glyph = glyphs[i];\n        for (var j = 0; j < glyph.unicodes.length; j += 1) {\n            addSegment(t, glyph.unicodes[j], i);\n        }\n\n        t.segments = t.segments.sort(function(a, b) {\n            return a.start - b.start;\n        });\n    }\n\n    addTerminatorSegment(t);\n\n    var segCount;\n    segCount = t.segments.length;\n    t.segCountX2 = segCount * 2;\n    t.searchRange = Math.pow(2, Math.floor(Math.log(segCount) / Math.log(2))) * 2;\n    t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);\n    t.rangeShift = t.segCountX2 - t.searchRange;\n\n    // Set up parallel segment arrays.\n    var endCounts = [];\n    var startCounts = [];\n    var idDeltas = [];\n    var idRangeOffsets = [];\n    var glyphIds = [];\n\n    for (i = 0; i < segCount; i += 1) {\n        var segment = t.segments[i];\n        endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});\n        startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});\n        idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});\n        idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});\n        if (segment.glyphId !== undefined) {\n            glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});\n        }\n    }\n\n    t.fields = t.fields.concat(endCounts);\n    t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});\n    t.fields = t.fields.concat(startCounts);\n    t.fields = t.fields.concat(idDeltas);\n    t.fields = t.fields.concat(idRangeOffsets);\n    t.fields = t.fields.concat(glyphIds);\n\n    t.length = 14 + // Subtable header\n        endCounts.length * 2 +\n        2 + // reservedPad\n        startCounts.length * 2 +\n        idDeltas.length * 2 +\n        idRangeOffsets.length * 2 +\n        glyphIds.length * 2;\n\n    return t;\n}\n\nexports.parse = parseCmapTable;\nexports.make = makeCmapTable;\n\n},{\"../check\":1,\"../parse\":7,\"../table\":9}],12:[function(require,module,exports){\n// The `glyf` table describes the glyphs in TrueType outline format.\n// http://www.microsoft.com/typography/otspec/glyf.htm\n\n'use strict';\n\nvar check = require('../check');\nvar _glyph = require('../glyph');\nvar parse = require('../parse');\nvar path = require('../path');\n\n// Parse the coordinate data for a glyph.\nfunction parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n    var v;\n    if ((flag & shortVectorBitMask) > 0) {\n        // The coordinate is 1 byte long.\n        v = p.parseByte();\n        // The `same` bit is re-used for short values to signify the sign of the value.\n        if ((flag & sameBitMask) === 0) {\n            v = -v;\n        }\n\n        v = previousValue + v;\n    } else {\n        //  The coordinate is 2 bytes long.\n        // If the `same` bit is set, the coordinate is the same as the previous coordinate.\n        if ((flag & sameBitMask) > 0) {\n            v = previousValue;\n        } else {\n            // Parse the coordinate as a signed 16-bit delta value.\n            v = previousValue + p.parseShort();\n        }\n    }\n\n    return v;\n}\n\n// Parse a TrueType glyph.\nfunction parseGlyph(data, start, index, font) {\n    //var p, glyph, flag, i, j, flags,\n    //    endPointIndices, numberOfCoordinates, repeatCount, points, point, px, py,\n    //    component, moreComponents;\n    var p = new parse.Parser(data, start);\n    var glyph = new _glyph.Glyph({font: font, index: index});\n    glyph.numberOfContours = p.parseShort();\n    glyph.xMin = p.parseShort();\n    glyph.yMin = p.parseShort();\n    glyph.xMax = p.parseShort();\n    glyph.yMax = p.parseShort();\n    var flags;\n    var flag;\n    if (glyph.numberOfContours > 0) {\n        var i;\n        // This glyph is not a composite.\n        var endPointIndices = glyph.endPointIndices = [];\n        for (i = 0; i < glyph.numberOfContours; i += 1) {\n            endPointIndices.push(p.parseUShort());\n        }\n\n        glyph.instructionLength = p.parseUShort();\n        glyph.instructions = [];\n        for (i = 0; i < glyph.instructionLength; i += 1) {\n            glyph.instructions.push(p.parseByte());\n        }\n\n        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n        flags = [];\n        for (i = 0; i < numberOfCoordinates; i += 1) {\n            flag = p.parseByte();\n            flags.push(flag);\n            // If bit 3 is set, we repeat this flag n times, where n is the next byte.\n            if ((flag & 8) > 0) {\n                var repeatCount = p.parseByte();\n                for (var j = 0; j < repeatCount; j += 1) {\n                    flags.push(flag);\n                    i += 1;\n                }\n            }\n        }\n\n        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');\n\n        if (endPointIndices.length > 0) {\n            var points = [];\n            var point;\n            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.\n            if (numberOfCoordinates > 0) {\n                for (i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = {};\n                    point.onCurve = !!(flag & 1);\n                    point.lastPointOfContour = endPointIndices.indexOf(i) >= 0;\n                    points.push(point);\n                }\n\n                var px = 0;\n                for (i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = points[i];\n                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n                    px = point.x;\n                }\n\n                var py = 0;\n                for (i = 0; i < numberOfCoordinates; i += 1) {\n                    flag = flags[i];\n                    point = points[i];\n                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n                    py = point.y;\n                }\n            }\n\n            glyph.points = points;\n        } else {\n            glyph.points = [];\n        }\n    } else if (glyph.numberOfContours === 0) {\n        glyph.points = [];\n    } else {\n        glyph.isComposite = true;\n        glyph.points = [];\n        glyph.components = [];\n        var moreComponents = true;\n        while (moreComponents) {\n            flags = p.parseUShort();\n            var component = {\n                glyphIndex: p.parseUShort(),\n                xScale: 1,\n                scale01: 0,\n                scale10: 0,\n                yScale: 1,\n                dx: 0,\n                dy: 0\n            };\n            if ((flags & 1) > 0) {\n                // The arguments are words\n                component.dx = p.parseShort();\n                component.dy = p.parseShort();\n            } else {\n                // The arguments are bytes\n                component.dx = p.parseChar();\n                component.dy = p.parseChar();\n            }\n\n            if ((flags & 8) > 0) {\n                // We have a scale\n                component.xScale = component.yScale = p.parseF2Dot14();\n            } else if ((flags & 64) > 0) {\n                // We have an X / Y scale\n                component.xScale = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            } else if ((flags & 128) > 0) {\n                // We have a 2x2 transformation\n                component.xScale = p.parseF2Dot14();\n                component.scale01 = p.parseF2Dot14();\n                component.scale10 = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            }\n\n            glyph.components.push(component);\n            moreComponents = !!(flags & 32);\n        }\n    }\n\n    return glyph;\n}\n\n// Transform an array of points and return a new array.\nfunction transformPoints(points, transform) {\n    var newPoints = [];\n    for (var i = 0; i < points.length; i += 1) {\n        var pt = points[i];\n        var newPt = {\n            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,\n            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,\n            onCurve: pt.onCurve,\n            lastPointOfContour: pt.lastPointOfContour\n        };\n        newPoints.push(newPt);\n    }\n\n    return newPoints;\n}\n\nfunction getContours(points) {\n    var contours = [];\n    var currentContour = [];\n    for (var i = 0; i < points.length; i += 1) {\n        var pt = points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n\n    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n    return contours;\n}\n\n// Convert the TrueType glyph outline to a Path.\nfunction getPath(points) {\n    var p = new path.Path();\n    if (!points) {\n        return p;\n    }\n\n    var contours = getContours(points);\n    for (var i = 0; i < contours.length; i += 1) {\n        var contour = contours[i];\n        var firstPt = contour[0];\n        var lastPt = contour[contour.length - 1];\n        var curvePt;\n        var realFirstPoint;\n        if (firstPt.onCurve) {\n            curvePt = null;\n            // The first point will be consumed by the moveTo command,\n            // so skip it in the loop.\n            realFirstPoint = true;\n        } else {\n            if (lastPt.onCurve) {\n                // If the first point is off-curve and the last point is on-curve,\n                // start at the last point.\n                firstPt = lastPt;\n            } else {\n                // If both first and last points are off-curve, start at their middle.\n                firstPt = { x: (firstPt.x + lastPt.x) / 2, y: (firstPt.y + lastPt.y) / 2 };\n            }\n\n            curvePt = firstPt;\n            // The first point is synthesized, so don't skip the real first point.\n            realFirstPoint = false;\n        }\n\n        p.moveTo(firstPt.x, firstPt.y);\n\n        for (var j = realFirstPoint ? 1 : 0; j < contour.length; j += 1) {\n            var pt = contour[j];\n            var prevPt = j === 0 ? firstPt : contour[j - 1];\n            if (prevPt.onCurve && pt.onCurve) {\n                // This is a straight line.\n                p.lineTo(pt.x, pt.y);\n            } else if (prevPt.onCurve && !pt.onCurve) {\n                curvePt = pt;\n            } else if (!prevPt.onCurve && !pt.onCurve) {\n                var midPt = { x: (prevPt.x + pt.x) / 2, y: (prevPt.y + pt.y) / 2 };\n                p.quadraticCurveTo(prevPt.x, prevPt.y, midPt.x, midPt.y);\n                curvePt = pt;\n            } else if (!prevPt.onCurve && pt.onCurve) {\n                // Previous point off-curve, this point on-curve.\n                p.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n                curvePt = null;\n            } else {\n                throw new Error('Invalid state.');\n            }\n        }\n\n        if (firstPt !== lastPt) {\n            // Connect the last and first points\n            if (curvePt) {\n                p.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n            } else {\n                p.lineTo(firstPt.x, firstPt.y);\n            }\n        }\n    }\n\n    p.closePath();\n    return p;\n}\n\n// Parse all the glyphs according to the offsets from the `loca` table.\nfunction parseGlyfTable(data, start, loca, font) {\n    var glyphs = [];\n    var i;\n    // The last element of the loca table is invalid.\n    for (i = 0; i < loca.length - 1; i += 1) {\n        var offset = loca[i];\n        var nextOffset = loca[i + 1];\n        if (offset !== nextOffset) {\n            glyphs.push(parseGlyph(data, start + offset, i, font));\n        } else {\n            glyphs.push(new _glyph.Glyph({font: font, index: i}));\n        }\n    }\n    // Go over the glyphs again, resolving the composite glyphs.\n    for (i = 0; i < glyphs.length; i += 1) {\n        var glyph = glyphs[i];\n        if (glyph.isComposite) {\n            for (var j = 0; j < glyph.components.length; j += 1) {\n                var component = glyph.components[j];\n                var componentGlyph = glyphs[component.glyphIndex];\n                if (componentGlyph.points) {\n                    var transformedPoints = transformPoints(componentGlyph.points, component);\n                    glyph.points = glyph.points.concat(transformedPoints);\n                }\n            }\n        }\n\n        glyph.path = getPath(glyph.points);\n    }\n\n    return glyphs;\n}\n\nexports.parse = parseGlyfTable;\n\n},{\"../check\":1,\"../glyph\":5,\"../parse\":7,\"../path\":8}],13:[function(require,module,exports){\n// The `GPOS` table contains kerning pairs, among other things.\n// https://www.microsoft.com/typography/OTSPEC/gpos.htm\n\n'use strict';\n\nvar check = require('../check');\nvar parse = require('../parse');\n\n// Parse ScriptList and FeatureList tables of GPOS, GSUB, GDEF, BASE, JSTF tables.\n// These lists are unused by now, this function is just the basis for a real parsing.\nfunction parseTaggedListTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var n = p.parseUShort();\n    var list = [];\n    for (var i = 0; i < n; i++) {\n        list[p.parseTag()] = { offset: p.parseUShort() };\n    }\n\n    return list;\n}\n\n// Parse a coverage table in a GSUB, GPOS or GDEF table.\n// Format 1 is a simple list of glyph ids,\n// Format 2 is a list of ranges. It is expanded in a list of glyphs, maybe not the best idea.\nfunction parseCoverageTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var format = p.parseUShort();\n    var count =  p.parseUShort();\n    if (format === 1) {\n        return p.parseUShortList(count);\n    }\n    else if (format === 2) {\n        var coverage = [];\n        for (; count--;) {\n            var begin = p.parseUShort();\n            var end = p.parseUShort();\n            var index = p.parseUShort();\n            for (var i = begin; i <= end; i++) {\n                coverage[index++] = i;\n            }\n        }\n\n        return coverage;\n    }\n}\n\n// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.\n// Returns a function that gets a class value from a glyph ID.\nfunction parseClassDefTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var format = p.parseUShort();\n    if (format === 1) {\n        // Format 1 specifies a range of consecutive glyph indices, one class per glyph ID.\n        var startGlyph = p.parseUShort();\n        var glyphCount = p.parseUShort();\n        var classes = p.parseUShortList(glyphCount);\n        return function(glyphID) {\n            return classes[glyphID - startGlyph] || 0;\n        };\n    }\n    else if (format === 2) {\n        // Format 2 defines multiple groups of glyph indices that belong to the same class.\n        var rangeCount = p.parseUShort();\n        var startGlyphs = [];\n        var endGlyphs = [];\n        var classValues = [];\n        for (var i = 0; i < rangeCount; i++) {\n            startGlyphs[i] = p.parseUShort();\n            endGlyphs[i] = p.parseUShort();\n            classValues[i] = p.parseUShort();\n        }\n\n        return function(glyphID) {\n            var l = 0;\n            var r = startGlyphs.length - 1;\n            while (l < r) {\n                var c = (l + r + 1) >> 1;\n                if (glyphID < startGlyphs[c]) {\n                    r = c - 1;\n                } else {\n                    l = c;\n                }\n            }\n\n            if (startGlyphs[l] <= glyphID && glyphID <= endGlyphs[l]) {\n                return classValues[l] || 0;\n            }\n\n            return 0;\n        };\n    }\n}\n\n// Parse a pair adjustment positioning subtable, format 1 or format 2\n// The subtable is returned in the form of a lookup function.\nfunction parsePairPosSubTable(data, start) {\n    var p = new parse.Parser(data, start);\n    // This part is common to format 1 and format 2 subtables\n    var format = p.parseUShort();\n    var coverageOffset = p.parseUShort();\n    var coverage = parseCoverageTable(data, start + coverageOffset);\n    // valueFormat 4: XAdvance only, 1: XPlacement only, 0: no ValueRecord for second glyph\n    // Only valueFormat1=4 and valueFormat2=0 is supported.\n    var valueFormat1 = p.parseUShort();\n    var valueFormat2 = p.parseUShort();\n    var value1;\n    var value2;\n    if (valueFormat1 !== 4 || valueFormat2 !== 0) return;\n    var sharedPairSets = {};\n    if (format === 1) {\n        // Pair Positioning Adjustment: Format 1\n        var pairSetCount = p.parseUShort();\n        var pairSet = [];\n        // Array of offsets to PairSet tables-from beginning of PairPos subtable-ordered by Coverage Index\n        var pairSetOffsets = p.parseOffset16List(pairSetCount);\n        for (var firstGlyph = 0; firstGlyph < pairSetCount; firstGlyph++) {\n            var pairSetOffset = pairSetOffsets[firstGlyph];\n            var sharedPairSet = sharedPairSets[pairSetOffset];\n            if (!sharedPairSet) {\n                // Parse a pairset table in a pair adjustment subtable format 1\n                sharedPairSet = {};\n                p.relativeOffset = pairSetOffset;\n                var pairValueCount = p.parseUShort();\n                for (; pairValueCount--;) {\n                    var secondGlyph = p.parseUShort();\n                    if (valueFormat1) value1 = p.parseShort();\n                    if (valueFormat2) value2 = p.parseShort();\n                    // We only support valueFormat1 = 4 and valueFormat2 = 0,\n                    // so value1 is the XAdvance and value2 is empty.\n                    sharedPairSet[secondGlyph] = value1;\n                }\n            }\n\n            pairSet[coverage[firstGlyph]] = sharedPairSet;\n        }\n\n        return function(leftGlyph, rightGlyph) {\n            var pairs = pairSet[leftGlyph];\n            if (pairs) return pairs[rightGlyph];\n        };\n    }\n    else if (format === 2) {\n        // Pair Positioning Adjustment: Format 2\n        var classDef1Offset = p.parseUShort();\n        var classDef2Offset = p.parseUShort();\n        var class1Count = p.parseUShort();\n        var class2Count = p.parseUShort();\n        var getClass1 = parseClassDefTable(data, start + classDef1Offset);\n        var getClass2 = parseClassDefTable(data, start + classDef2Offset);\n\n        // Parse kerning values by class pair.\n        var kerningMatrix = [];\n        for (var i = 0; i < class1Count; i++) {\n            var kerningRow = kerningMatrix[i] = [];\n            for (var j = 0; j < class2Count; j++) {\n                if (valueFormat1) value1 = p.parseShort();\n                if (valueFormat2) value2 = p.parseShort();\n                // We only support valueFormat1 = 4 and valueFormat2 = 0,\n                // so value1 is the XAdvance and value2 is empty.\n                kerningRow[j] = value1;\n            }\n        }\n\n        // Convert coverage list to a hash\n        var covered = {};\n        for (i = 0; i < coverage.length; i++) covered[coverage[i]] = 1;\n\n        // Get the kerning value for a specific glyph pair.\n        return function(leftGlyph, rightGlyph) {\n            if (!covered[leftGlyph]) return;\n            var class1 = getClass1(leftGlyph);\n            var class2 = getClass2(rightGlyph);\n            var kerningRow = kerningMatrix[class1];\n\n            if (kerningRow) {\n                return kerningRow[class2];\n            }\n        };\n    }\n}\n\n// Parse a LookupTable (present in of GPOS, GSUB, GDEF, BASE, JSTF tables).\nfunction parseLookupTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var lookupType = p.parseUShort();\n    var lookupFlag = p.parseUShort();\n    var useMarkFilteringSet = lookupFlag & 0x10;\n    var subTableCount = p.parseUShort();\n    var subTableOffsets = p.parseOffset16List(subTableCount);\n    var table = {\n        lookupType: lookupType,\n        lookupFlag: lookupFlag,\n        markFilteringSet: useMarkFilteringSet ? p.parseUShort() : -1\n    };\n    // LookupType 2, Pair adjustment\n    if (lookupType === 2) {\n        var subtables = [];\n        for (var i = 0; i < subTableCount; i++) {\n            subtables.push(parsePairPosSubTable(data, start + subTableOffsets[i]));\n        }\n        // Return a function which finds the kerning values in the subtables.\n        table.getKerningValue = function(leftGlyph, rightGlyph) {\n            for (var i = subtables.length; i--;) {\n                var value = subtables[i](leftGlyph, rightGlyph);\n                if (value !== undefined) return value;\n            }\n\n            return 0;\n        };\n    }\n\n    return table;\n}\n\n// Parse the `GPOS` table which contains, among other things, kerning pairs.\n// https://www.microsoft.com/typography/OTSPEC/gpos.htm\nfunction parseGposTable(data, start, font) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseFixed();\n    check.argument(tableVersion === 1, 'Unsupported GPOS table version.');\n\n    // ScriptList and FeatureList - ignored for now\n    parseTaggedListTable(data, start + p.parseUShort());\n    // 'kern' is the feature we are looking for.\n    parseTaggedListTable(data, start + p.parseUShort());\n\n    // LookupList\n    var lookupListOffset = p.parseUShort();\n    p.relativeOffset = lookupListOffset;\n    var lookupCount = p.parseUShort();\n    var lookupTableOffsets = p.parseOffset16List(lookupCount);\n    var lookupListAbsoluteOffset = start + lookupListOffset;\n    for (var i = 0; i < lookupCount; i++) {\n        var table = parseLookupTable(data, lookupListAbsoluteOffset + lookupTableOffsets[i]);\n        if (table.lookupType === 2 && !font.getGposKerningValue) font.getGposKerningValue = table.getKerningValue;\n    }\n}\n\nexports.parse = parseGposTable;\n\n},{\"../check\":1,\"../parse\":7}],14:[function(require,module,exports){\n// The `head` table contains global information about the font.\n// https://www.microsoft.com/typography/OTSPEC/head.htm\n\n'use strict';\n\nvar check = require('../check');\nvar parse = require('../parse');\nvar table = require('../table');\n\n// Parse the header `head` table\nfunction parseHeadTable(data, start) {\n    var head = {};\n    var p = new parse.Parser(data, start);\n    head.version = p.parseVersion();\n    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;\n    head.checkSumAdjustment = p.parseULong();\n    head.magicNumber = p.parseULong();\n    check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');\n    head.flags = p.parseUShort();\n    head.unitsPerEm = p.parseUShort();\n    head.created = p.parseLongDateTime();\n    head.modified = p.parseLongDateTime();\n    head.xMin = p.parseShort();\n    head.yMin = p.parseShort();\n    head.xMax = p.parseShort();\n    head.yMax = p.parseShort();\n    head.macStyle = p.parseUShort();\n    head.lowestRecPPEM = p.parseUShort();\n    head.fontDirectionHint = p.parseShort();\n    head.indexToLocFormat = p.parseShort();     // 50\n    head.glyphDataFormat = p.parseShort();\n    return head;\n}\n\nfunction makeHeadTable(options) {\n    return new table.Table('head', [\n        {name: 'version', type: 'FIXED', value: 0x00010000},\n        {name: 'fontRevision', type: 'FIXED', value: 0x00010000},\n        {name: 'checkSumAdjustment', type: 'ULONG', value: 0},\n        {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},\n        {name: 'flags', type: 'USHORT', value: 0},\n        {name: 'unitsPerEm', type: 'USHORT', value: 1000},\n        {name: 'created', type: 'LONGDATETIME', value: 0},\n        {name: 'modified', type: 'LONGDATETIME', value: 0},\n        {name: 'xMin', type: 'SHORT', value: 0},\n        {name: 'yMin', type: 'SHORT', value: 0},\n        {name: 'xMax', type: 'SHORT', value: 0},\n        {name: 'yMax', type: 'SHORT', value: 0},\n        {name: 'macStyle', type: 'USHORT', value: 0},\n        {name: 'lowestRecPPEM', type: 'USHORT', value: 0},\n        {name: 'fontDirectionHint', type: 'SHORT', value: 2},\n        {name: 'indexToLocFormat', type: 'SHORT', value: 0},\n        {name: 'glyphDataFormat', type: 'SHORT', value: 0}\n    ], options);\n}\n\nexports.parse = parseHeadTable;\nexports.make = makeHeadTable;\n\n},{\"../check\":1,\"../parse\":7,\"../table\":9}],15:[function(require,module,exports){\n// The `hhea` table contains information for horizontal layout.\n// https://www.microsoft.com/typography/OTSPEC/hhea.htm\n\n'use strict';\n\nvar parse = require('../parse');\nvar table = require('../table');\n\n// Parse the horizontal header `hhea` table\nfunction parseHheaTable(data, start) {\n    var hhea = {};\n    var p = new parse.Parser(data, start);\n    hhea.version = p.parseVersion();\n    hhea.ascender = p.parseShort();\n    hhea.descender = p.parseShort();\n    hhea.lineGap = p.parseShort();\n    hhea.advanceWidthMax = p.parseUShort();\n    hhea.minLeftSideBearing = p.parseShort();\n    hhea.minRightSideBearing = p.parseShort();\n    hhea.xMaxExtent = p.parseShort();\n    hhea.caretSlopeRise = p.parseShort();\n    hhea.caretSlopeRun = p.parseShort();\n    hhea.caretOffset = p.parseShort();\n    p.relativeOffset += 8;\n    hhea.metricDataFormat = p.parseShort();\n    hhea.numberOfHMetrics = p.parseUShort();\n    return hhea;\n}\n\nfunction makeHheaTable(options) {\n    return new table.Table('hhea', [\n        {name: 'version', type: 'FIXED', value: 0x00010000},\n        {name: 'ascender', type: 'FWORD', value: 0},\n        {name: 'descender', type: 'FWORD', value: 0},\n        {name: 'lineGap', type: 'FWORD', value: 0},\n        {name: 'advanceWidthMax', type: 'UFWORD', value: 0},\n        {name: 'minLeftSideBearing', type: 'FWORD', value: 0},\n        {name: 'minRightSideBearing', type: 'FWORD', value: 0},\n        {name: 'xMaxExtent', type: 'FWORD', value: 0},\n        {name: 'caretSlopeRise', type: 'SHORT', value: 1},\n        {name: 'caretSlopeRun', type: 'SHORT', value: 0},\n        {name: 'caretOffset', type: 'SHORT', value: 0},\n        {name: 'reserved1', type: 'SHORT', value: 0},\n        {name: 'reserved2', type: 'SHORT', value: 0},\n        {name: 'reserved3', type: 'SHORT', value: 0},\n        {name: 'reserved4', type: 'SHORT', value: 0},\n        {name: 'metricDataFormat', type: 'SHORT', value: 0},\n        {name: 'numberOfHMetrics', type: 'USHORT', value: 0}\n    ], options);\n}\n\nexports.parse = parseHheaTable;\nexports.make = makeHheaTable;\n\n},{\"../parse\":7,\"../table\":9}],16:[function(require,module,exports){\n// The `hmtx` table contains the horizontal metrics for all glyphs.\n// https://www.microsoft.com/typography/OTSPEC/hmtx.htm\n\n'use strict';\n\nvar parse = require('../parse');\nvar table = require('../table');\n\n// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.\n// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.\nfunction parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {\n    var advanceWidth;\n    var leftSideBearing;\n    var p = new parse.Parser(data, start);\n    for (var i = 0; i < numGlyphs; i += 1) {\n        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.\n        if (i < numMetrics) {\n            advanceWidth = p.parseUShort();\n            leftSideBearing = p.parseShort();\n        }\n\n        var glyph = glyphs[i];\n        glyph.advanceWidth = advanceWidth;\n        glyph.leftSideBearing = leftSideBearing;\n    }\n}\n\nfunction makeHmtxTable(glyphs) {\n    var t = new table.Table('hmtx', []);\n    for (var i = 0; i < glyphs.length; i += 1) {\n        var glyph = glyphs[i];\n        var advanceWidth = glyph.advanceWidth || 0;\n        var leftSideBearing = glyph.leftSideBearing || 0;\n        t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});\n        t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});\n    }\n\n    return t;\n}\n\nexports.parse = parseHmtxTable;\nexports.make = makeHmtxTable;\n\n},{\"../parse\":7,\"../table\":9}],17:[function(require,module,exports){\n// The `kern` table contains kerning pairs.\n// Note that some fonts use the GPOS OpenType layout table to specify kerning.\n// https://www.microsoft.com/typography/OTSPEC/kern.htm\n\n'use strict';\n\nvar check = require('../check');\nvar parse = require('../parse');\n\n// Parse the `kern` table which contains kerning pairs.\nfunction parseKernTable(data, start) {\n    var pairs = {};\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseUShort();\n    check.argument(tableVersion === 0, 'Unsupported kern table version.');\n    // Skip nTables.\n    p.skip('uShort', 1);\n    var subTableVersion = p.parseUShort();\n    check.argument(subTableVersion === 0, 'Unsupported kern sub-table version.');\n    // Skip subTableLength, subTableCoverage\n    p.skip('uShort', 2);\n    var nPairs = p.parseUShort();\n    // Skip searchRange, entrySelector, rangeShift.\n    p.skip('uShort', 3);\n    for (var i = 0; i < nPairs; i += 1) {\n        var leftIndex = p.parseUShort();\n        var rightIndex = p.parseUShort();\n        var value = p.parseShort();\n        pairs[leftIndex + ',' + rightIndex] = value;\n    }\n\n    return pairs;\n}\n\nexports.parse = parseKernTable;\n\n},{\"../check\":1,\"../parse\":7}],18:[function(require,module,exports){\n// The `loca` table stores the offsets to the locations of the glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/loca.htm\n\n'use strict';\n\nvar parse = require('../parse');\n\n// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n// relative to the beginning of the glyphData table.\n// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n// The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n// version where offsets are stored as uLongs. The `head` table specifies which version to use\n// (under indexToLocFormat).\nfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n    var p = new parse.Parser(data, start);\n    var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n    // There is an extra entry after the last index element to compute the length of the last glyph.\n    // That's why we use numGlyphs + 1.\n    var glyphOffsets = [];\n    for (var i = 0; i < numGlyphs + 1; i += 1) {\n        var glyphOffset = parseFn.call(p);\n        if (shortVersion) {\n            // The short table version stores the actual offset divided by 2.\n            glyphOffset *= 2;\n        }\n\n        glyphOffsets.push(glyphOffset);\n    }\n\n    return glyphOffsets;\n}\n\nexports.parse = parseLocaTable;\n\n},{\"../parse\":7}],19:[function(require,module,exports){\n// The `maxp` table establishes the memory requirements for the font.\n// We need it just to get the number of glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/maxp.htm\n\n'use strict';\n\nvar parse = require('../parse');\nvar table = require('../table');\n\n// Parse the maximum profile `maxp` table.\nfunction parseMaxpTable(data, start) {\n    var maxp = {};\n    var p = new parse.Parser(data, start);\n    maxp.version = p.parseVersion();\n    maxp.numGlyphs = p.parseUShort();\n    if (maxp.version === 1.0) {\n        maxp.maxPoints = p.parseUShort();\n        maxp.maxContours = p.parseUShort();\n        maxp.maxCompositePoints = p.parseUShort();\n        maxp.maxCompositeContours = p.parseUShort();\n        maxp.maxZones = p.parseUShort();\n        maxp.maxTwilightPoints = p.parseUShort();\n        maxp.maxStorage = p.parseUShort();\n        maxp.maxFunctionDefs = p.parseUShort();\n        maxp.maxInstructionDefs = p.parseUShort();\n        maxp.maxStackElements = p.parseUShort();\n        maxp.maxSizeOfInstructions = p.parseUShort();\n        maxp.maxComponentElements = p.parseUShort();\n        maxp.maxComponentDepth = p.parseUShort();\n    }\n\n    return maxp;\n}\n\nfunction makeMaxpTable(numGlyphs) {\n    return new table.Table('maxp', [\n        {name: 'version', type: 'FIXED', value: 0x00005000},\n        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}\n    ]);\n}\n\nexports.parse = parseMaxpTable;\nexports.make = makeMaxpTable;\n\n},{\"../parse\":7,\"../table\":9}],20:[function(require,module,exports){\n// The `name` naming table.\n// https://www.microsoft.com/typography/OTSPEC/name.htm\n\n'use strict';\n\nvar encode = require('../types').encode;\nvar parse = require('../parse');\nvar table = require('../table');\n\n// NameIDs for the name table.\nvar nameTableNames = [\n    'copyright',              // 0\n    'fontFamily',             // 1\n    'fontSubfamily',          // 2\n    'uniqueID',               // 3\n    'fullName',               // 4\n    'version',                // 5\n    'postScriptName',         // 6\n    'trademark',              // 7\n    'manufacturer',           // 8\n    'designer',               // 9\n    'description',            // 10\n    'manufacturerURL',        // 11\n    'designerURL',            // 12\n    'licence',                // 13\n    'licenceURL',             // 14\n    'reserved',               // 15\n    'preferredFamily',        // 16\n    'preferredSubfamily',     // 17\n    'compatibleFullName',     // 18\n    'sampleText',             // 19\n    'postScriptFindFontName', // 20\n    'wwsFamily',              // 21\n    'wwsSubfamily'            // 22\n];\n\n// Parse the naming `name` table\n// Only Windows Unicode English names are supported.\n// Format 1 additional fields are not supported\nfunction parseNameTable(data, start) {\n    var name = {};\n    var p = new parse.Parser(data, start);\n    name.format = p.parseUShort();\n    var count = p.parseUShort();\n    var stringOffset = p.offset + p.parseUShort();\n    var unknownCount = 0;\n    for (var i = 0; i < count; i++) {\n        var platformID = p.parseUShort();\n        var encodingID = p.parseUShort();\n        var languageID = p.parseUShort();\n        var nameID = p.parseUShort();\n        var property = nameTableNames[nameID];\n        var byteLength = p.parseUShort();\n        var offset = p.parseUShort();\n        // platformID - encodingID - languageID standard combinations :\n        // 1 - 0 - 0 : Macintosh, Roman, English\n        // 3 - 1 - 0x409 : Windows, Unicode BMP (UCS-2), en-US\n        if (platformID === 3 && encodingID === 1 && languageID === 0x409) {\n            var codePoints = [];\n            var length = byteLength / 2;\n            for (var j = 0; j < length; j++, offset += 2) {\n                codePoints[j] = parse.getShort(data, stringOffset + offset);\n            }\n\n            var str = String.fromCharCode.apply(null, codePoints);\n            if (property) {\n                name[property] = str;\n            }\n            else {\n                unknownCount++;\n                name['unknown' + unknownCount] = str;\n            }\n        }\n\n    }\n\n    if (name.format === 1) {\n        name.langTagCount = p.parseUShort();\n    }\n\n    return name;\n}\n\nfunction makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {\n    return new table.Table('NameRecord', [\n        {name: 'platformID', type: 'USHORT', value: platformID},\n        {name: 'encodingID', type: 'USHORT', value: encodingID},\n        {name: 'languageID', type: 'USHORT', value: languageID},\n        {name: 'nameID', type: 'USHORT', value: nameID},\n        {name: 'length', type: 'USHORT', value: length},\n        {name: 'offset', type: 'USHORT', value: offset}\n    ]);\n}\n\nfunction addMacintoshNameRecord(t, recordID, s, offset) {\n    // Macintosh, Roman, English\n    var stringBytes = encode.STRING(s);\n    t.records.push(makeNameRecord(1, 0, 0, recordID, stringBytes.length, offset));\n    t.strings.push(stringBytes);\n    offset += stringBytes.length;\n    return offset;\n}\n\nfunction addWindowsNameRecord(t, recordID, s, offset) {\n    // Windows, Unicode BMP (UCS-2), US English\n    var utf16Bytes = encode.UTF16(s);\n    t.records.push(makeNameRecord(3, 1, 0x0409, recordID, utf16Bytes.length, offset));\n    t.strings.push(utf16Bytes);\n    offset += utf16Bytes.length;\n    return offset;\n}\n\nfunction makeNameTable(options) {\n    var t = new table.Table('name', [\n        {name: 'format', type: 'USHORT', value: 0},\n        {name: 'count', type: 'USHORT', value: 0},\n        {name: 'stringOffset', type: 'USHORT', value: 0}\n    ]);\n    t.records = [];\n    t.strings = [];\n    var offset = 0;\n    var i;\n    var s;\n    // Add Macintosh records first\n    for (i = 0; i < nameTableNames.length; i += 1) {\n        if (options[nameTableNames[i]] !== undefined) {\n            s = options[nameTableNames[i]];\n            offset = addMacintoshNameRecord(t, i, s, offset);\n        }\n    }\n    // Then add Windows records\n    for (i = 0; i < nameTableNames.length; i += 1) {\n        if (options[nameTableNames[i]] !== undefined) {\n            s = options[nameTableNames[i]];\n            offset = addWindowsNameRecord(t, i, s, offset);\n        }\n    }\n\n    t.count = t.records.length;\n    t.stringOffset = 6 + t.count * 12;\n    for (i = 0; i < t.records.length; i += 1) {\n        t.fields.push({name: 'record_' + i, type: 'TABLE', value: t.records[i]});\n    }\n\n    for (i = 0; i < t.strings.length; i += 1) {\n        t.fields.push({name: 'string_' + i, type: 'LITERAL', value: t.strings[i]});\n    }\n\n    return t;\n}\n\nexports.parse = parseNameTable;\nexports.make = makeNameTable;\n\n},{\"../parse\":7,\"../table\":9,\"../types\":24}],21:[function(require,module,exports){\n// The `OS/2` table contains metrics required in OpenType fonts.\n// https://www.microsoft.com/typography/OTSPEC/os2.htm\n\n'use strict';\n\nvar parse = require('../parse');\nvar table = require('../table');\n\nvar unicodeRanges = [\n    {begin: 0x0000, end: 0x007F}, // Basic Latin\n    {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement\n    {begin: 0x0100, end: 0x017F}, // Latin Extended-A\n    {begin: 0x0180, end: 0x024F}, // Latin Extended-B\n    {begin: 0x0250, end: 0x02AF}, // IPA Extensions\n    {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters\n    {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks\n    {begin: 0x0370, end: 0x03FF}, // Greek and Coptic\n    {begin: 0x2C80, end: 0x2CFF}, // Coptic\n    {begin: 0x0400, end: 0x04FF}, // Cyrillic\n    {begin: 0x0530, end: 0x058F}, // Armenian\n    {begin: 0x0590, end: 0x05FF}, // Hebrew\n    {begin: 0xA500, end: 0xA63F}, // Vai\n    {begin: 0x0600, end: 0x06FF}, // Arabic\n    {begin: 0x07C0, end: 0x07FF}, // NKo\n    {begin: 0x0900, end: 0x097F}, // Devanagari\n    {begin: 0x0980, end: 0x09FF}, // Bengali\n    {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi\n    {begin: 0x0A80, end: 0x0AFF}, // Gujarati\n    {begin: 0x0B00, end: 0x0B7F}, // Oriya\n    {begin: 0x0B80, end: 0x0BFF}, // Tamil\n    {begin: 0x0C00, end: 0x0C7F}, // Telugu\n    {begin: 0x0C80, end: 0x0CFF}, // Kannada\n    {begin: 0x0D00, end: 0x0D7F}, // Malayalam\n    {begin: 0x0E00, end: 0x0E7F}, // Thai\n    {begin: 0x0E80, end: 0x0EFF}, // Lao\n    {begin: 0x10A0, end: 0x10FF}, // Georgian\n    {begin: 0x1B00, end: 0x1B7F}, // Balinese\n    {begin: 0x1100, end: 0x11FF}, // Hangul Jamo\n    {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional\n    {begin: 0x1F00, end: 0x1FFF}, // Greek Extended\n    {begin: 0x2000, end: 0x206F}, // General Punctuation\n    {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts\n    {begin: 0x20A0, end: 0x20CF}, // Currency Symbol\n    {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols\n    {begin: 0x2100, end: 0x214F}, // Letterlike Symbols\n    {begin: 0x2150, end: 0x218F}, // Number Forms\n    {begin: 0x2190, end: 0x21FF}, // Arrows\n    {begin: 0x2200, end: 0x22FF}, // Mathematical Operators\n    {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical\n    {begin: 0x2400, end: 0x243F}, // Control Pictures\n    {begin: 0x2440, end: 0x245F}, // Optical Character Recognition\n    {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics\n    {begin: 0x2500, end: 0x257F}, // Box Drawing\n    {begin: 0x2580, end: 0x259F}, // Block Elements\n    {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes\n    {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols\n    {begin: 0x2700, end: 0x27BF}, // Dingbats\n    {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation\n    {begin: 0x3040, end: 0x309F}, // Hiragana\n    {begin: 0x30A0, end: 0x30FF}, // Katakana\n    {begin: 0x3100, end: 0x312F}, // Bopomofo\n    {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo\n    {begin: 0xA840, end: 0xA87F}, // Phags-pa\n    {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months\n    {begin: 0x3300, end: 0x33FF}, // CJK Compatibility\n    {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables\n    {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *\n    {begin: 0x10900, end: 0x1091F}, // Phoenicia\n    {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs\n    {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)\n    {begin: 0x31C0, end: 0x31EF}, // CJK Strokes\n    {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms\n    {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A\n    {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks\n    {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms\n    {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants\n    {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B\n    {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms\n    {begin: 0xFFF0, end: 0xFFFF}, // Specials\n    {begin: 0x0F00, end: 0x0FFF}, // Tibetan\n    {begin: 0x0700, end: 0x074F}, // Syriac\n    {begin: 0x0780, end: 0x07BF}, // Thaana\n    {begin: 0x0D80, end: 0x0DFF}, // Sinhala\n    {begin: 0x1000, end: 0x109F}, // Myanmar\n    {begin: 0x1200, end: 0x137F}, // Ethiopic\n    {begin: 0x13A0, end: 0x13FF}, // Cherokee\n    {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics\n    {begin: 0x1680, end: 0x169F}, // Ogham\n    {begin: 0x16A0, end: 0x16FF}, // Runic\n    {begin: 0x1780, end: 0x17FF}, // Khmer\n    {begin: 0x1800, end: 0x18AF}, // Mongolian\n    {begin: 0x2800, end: 0x28FF}, // Braille Patterns\n    {begin: 0xA000, end: 0xA48F}, // Yi Syllables\n    {begin: 0x1700, end: 0x171F}, // Tagalog\n    {begin: 0x10300, end: 0x1032F}, // Old Italic\n    {begin: 0x10330, end: 0x1034F}, // Gothic\n    {begin: 0x10400, end: 0x1044F}, // Deseret\n    {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols\n    {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols\n    {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)\n    {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors\n    {begin: 0xE0000, end: 0xE007F}, // Tags\n    {begin: 0x1900, end: 0x194F}, // Limbu\n    {begin: 0x1950, end: 0x197F}, // Tai Le\n    {begin: 0x1980, end: 0x19DF}, // New Tai Lue\n    {begin: 0x1A00, end: 0x1A1F}, // Buginese\n    {begin: 0x2C00, end: 0x2C5F}, // Glagolitic\n    {begin: 0x2D30, end: 0x2D7F}, // Tifinagh\n    {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols\n    {begin: 0xA800, end: 0xA82F}, // Syloti Nagri\n    {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary\n    {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers\n    {begin: 0x10380, end: 0x1039F}, // Ugaritic\n    {begin: 0x103A0, end: 0x103DF}, // Old Persian\n    {begin: 0x10450, end: 0x1047F}, // Shavian\n    {begin: 0x10480, end: 0x104AF}, // Osmanya\n    {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary\n    {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi\n    {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols\n    {begin: 0x12000, end: 0x123FF}, // Cuneiform\n    {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals\n    {begin: 0x1B80, end: 0x1BBF}, // Sundanese\n    {begin: 0x1C00, end: 0x1C4F}, // Lepcha\n    {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki\n    {begin: 0xA880, end: 0xA8DF}, // Saurashtra\n    {begin: 0xA900, end: 0xA92F}, // Kayah Li\n    {begin: 0xA930, end: 0xA95F}, // Rejang\n    {begin: 0xAA00, end: 0xAA5F}, // Cham\n    {begin: 0x10190, end: 0x101CF}, // Ancient Symbols\n    {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc\n    {begin: 0x102A0, end: 0x102DF}, // Carian\n    {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles\n];\n\nfunction getUnicodeRange(unicode) {\n    for (var i = 0; i < unicodeRanges.length; i += 1) {\n        var range = unicodeRanges[i];\n        if (unicode >= range.begin && unicode < range.end) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\n// Parse the OS/2 and Windows metrics `OS/2` table\nfunction parseOS2Table(data, start) {\n    var os2 = {};\n    var p = new parse.Parser(data, start);\n    os2.version = p.parseUShort();\n    os2.xAvgCharWidth = p.parseShort();\n    os2.usWeightClass = p.parseUShort();\n    os2.usWidthClass = p.parseUShort();\n    os2.fsType = p.parseUShort();\n    os2.ySubscriptXSize = p.parseShort();\n    os2.ySubscriptYSize = p.parseShort();\n    os2.ySubscriptXOffset = p.parseShort();\n    os2.ySubscriptYOffset = p.parseShort();\n    os2.ySuperscriptXSize = p.parseShort();\n    os2.ySuperscriptYSize = p.parseShort();\n    os2.ySuperscriptXOffset = p.parseShort();\n    os2.ySuperscriptYOffset = p.parseShort();\n    os2.yStrikeoutSize = p.parseShort();\n    os2.yStrikeoutPosition = p.parseShort();\n    os2.sFamilyClass = p.parseShort();\n    os2.panose = [];\n    for (var i = 0; i < 10; i++) {\n        os2.panose[i] = p.parseByte();\n    }\n\n    os2.ulUnicodeRange1 = p.parseULong();\n    os2.ulUnicodeRange2 = p.parseULong();\n    os2.ulUnicodeRange3 = p.parseULong();\n    os2.ulUnicodeRange4 = p.parseULong();\n    os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());\n    os2.fsSelection = p.parseUShort();\n    os2.usFirstCharIndex = p.parseUShort();\n    os2.usLastCharIndex = p.parseUShort();\n    os2.sTypoAscender = p.parseShort();\n    os2.sTypoDescender = p.parseShort();\n    os2.sTypoLineGap = p.parseShort();\n    os2.usWinAscent = p.parseUShort();\n    os2.usWinDescent = p.parseUShort();\n    if (os2.version >= 1) {\n        os2.ulCodePageRange1 = p.parseULong();\n        os2.ulCodePageRange2 = p.parseULong();\n    }\n\n    if (os2.version >= 2) {\n        os2.sxHeight = p.parseShort();\n        os2.sCapHeight = p.parseShort();\n        os2.usDefaultChar = p.parseUShort();\n        os2.usBreakChar = p.parseUShort();\n        os2.usMaxContent = p.parseUShort();\n    }\n\n    return os2;\n}\n\nfunction makeOS2Table(options) {\n    return new table.Table('OS/2', [\n        {name: 'version', type: 'USHORT', value: 0x0003},\n        {name: 'xAvgCharWidth', type: 'SHORT', value: 0},\n        {name: 'usWeightClass', type: 'USHORT', value: 0},\n        {name: 'usWidthClass', type: 'USHORT', value: 0},\n        {name: 'fsType', type: 'USHORT', value: 0},\n        {name: 'ySubscriptXSize', type: 'SHORT', value: 650},\n        {name: 'ySubscriptYSize', type: 'SHORT', value: 699},\n        {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},\n        {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},\n        {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},\n        {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},\n        {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},\n        {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},\n        {name: 'yStrikeoutSize', type: 'SHORT', value: 49},\n        {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},\n        {name: 'sFamilyClass', type: 'SHORT', value: 0},\n        {name: 'bFamilyType', type: 'BYTE', value: 0},\n        {name: 'bSerifStyle', type: 'BYTE', value: 0},\n        {name: 'bWeight', type: 'BYTE', value: 0},\n        {name: 'bProportion', type: 'BYTE', value: 0},\n        {name: 'bContrast', type: 'BYTE', value: 0},\n        {name: 'bStrokeVariation', type: 'BYTE', value: 0},\n        {name: 'bArmStyle', type: 'BYTE', value: 0},\n        {name: 'bLetterform', type: 'BYTE', value: 0},\n        {name: 'bMidline', type: 'BYTE', value: 0},\n        {name: 'bXHeight', type: 'BYTE', value: 0},\n        {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},\n        {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},\n        {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},\n        {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},\n        {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},\n        {name: 'fsSelection', type: 'USHORT', value: 0},\n        {name: 'usFirstCharIndex', type: 'USHORT', value: 0},\n        {name: 'usLastCharIndex', type: 'USHORT', value: 0},\n        {name: 'sTypoAscender', type: 'SHORT', value: 0},\n        {name: 'sTypoDescender', type: 'SHORT', value: 0},\n        {name: 'sTypoLineGap', type: 'SHORT', value: 0},\n        {name: 'usWinAscent', type: 'USHORT', value: 0},\n        {name: 'usWinDescent', type: 'USHORT', value: 0},\n        {name: 'ulCodePageRange1', type: 'ULONG', value: 0},\n        {name: 'ulCodePageRange2', type: 'ULONG', value: 0},\n        {name: 'sxHeight', type: 'SHORT', value: 0},\n        {name: 'sCapHeight', type: 'SHORT', value: 0},\n        {name: 'usDefaultChar', type: 'USHORT', value: 0},\n        {name: 'usBreakChar', type: 'USHORT', value: 0},\n        {name: 'usMaxContext', type: 'USHORT', value: 0}\n    ], options);\n}\n\nexports.unicodeRanges = unicodeRanges;\nexports.getUnicodeRange = getUnicodeRange;\nexports.parse = parseOS2Table;\nexports.make = makeOS2Table;\n\n},{\"../parse\":7,\"../table\":9}],22:[function(require,module,exports){\n// The `post` table stores additional PostScript information, such as glyph names.\n// https://www.microsoft.com/typography/OTSPEC/post.htm\n\n'use strict';\n\nvar encoding = require('../encoding');\nvar parse = require('../parse');\nvar table = require('../table');\n\n// Parse the PostScript `post` table\nfunction parsePostTable(data, start) {\n    var post = {};\n    var p = new parse.Parser(data, start);\n    var i;\n    post.version = p.parseVersion();\n    post.italicAngle = p.parseFixed();\n    post.underlinePosition = p.parseShort();\n    post.underlineThickness = p.parseShort();\n    post.isFixedPitch = p.parseULong();\n    post.minMemType42 = p.parseULong();\n    post.maxMemType42 = p.parseULong();\n    post.minMemType1 = p.parseULong();\n    post.maxMemType1 = p.parseULong();\n    switch (post.version) {\n    case 1:\n        post.names = encoding.standardNames.slice();\n        break;\n    case 2:\n        post.numberOfGlyphs = p.parseUShort();\n        post.glyphNameIndex = new Array(post.numberOfGlyphs);\n        for (i = 0; i < post.numberOfGlyphs; i++) {\n            post.glyphNameIndex[i] = p.parseUShort();\n        }\n\n        post.names = [];\n        for (i = 0; i < post.numberOfGlyphs; i++) {\n            if (post.glyphNameIndex[i] >= encoding.standardNames.length) {\n                var nameLength = p.parseChar();\n                post.names.push(p.parseString(nameLength));\n            }\n        }\n\n        break;\n    case 2.5:\n        post.numberOfGlyphs = p.parseUShort();\n        post.offset = new Array(post.numberOfGlyphs);\n        for (i = 0; i < post.numberOfGlyphs; i++) {\n            post.offset[i] = p.parseChar();\n        }\n\n        break;\n    }\n    return post;\n}\n\nfunction makePostTable() {\n    return new table.Table('post', [\n        {name: 'version', type: 'FIXED', value: 0x00030000},\n        {name: 'italicAngle', type: 'FIXED', value: 0},\n        {name: 'underlinePosition', type: 'FWORD', value: 0},\n        {name: 'underlineThickness', type: 'FWORD', value: 0},\n        {name: 'isFixedPitch', type: 'ULONG', value: 0},\n        {name: 'minMemType42', type: 'ULONG', value: 0},\n        {name: 'maxMemType42', type: 'ULONG', value: 0},\n        {name: 'minMemType1', type: 'ULONG', value: 0},\n        {name: 'maxMemType1', type: 'ULONG', value: 0}\n    ]);\n}\n\nexports.parse = parsePostTable;\nexports.make = makePostTable;\n\n},{\"../encoding\":3,\"../parse\":7,\"../table\":9}],23:[function(require,module,exports){\n// The `sfnt` wrapper provides organization for the tables in the font.\n// It is the top-level data structure in a font.\n// https://www.microsoft.com/typography/OTSPEC/otff.htm\n// Recommendations for creating OpenType Fonts:\n// http://www.microsoft.com/typography/otspec140/recom.htm\n\n'use strict';\n\nvar check = require('../check');\nvar table = require('../table');\n\nvar cmap = require('./cmap');\nvar cff = require('./cff');\nvar head = require('./head');\nvar hhea = require('./hhea');\nvar hmtx = require('./hmtx');\nvar maxp = require('./maxp');\nvar _name = require('./name');\nvar os2 = require('./os2');\nvar post = require('./post');\n\nfunction log2(v) {\n    return Math.log(v) / Math.log(2) | 0;\n}\n\nfunction computeCheckSum(bytes) {\n    while (bytes.length % 4 !== 0) {\n        bytes.push(0);\n    }\n\n    var sum = 0;\n    for (var i = 0; i < bytes.length; i += 4) {\n        sum += (bytes[i] << 24) +\n            (bytes[i + 1] << 16) +\n            (bytes[i + 2] << 8) +\n            (bytes[i + 3]);\n    }\n\n    sum %= Math.pow(2, 32);\n    return sum;\n}\n\nfunction makeTableRecord(tag, checkSum, offset, length) {\n    return new table.Table('Table Record', [\n        {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},\n        {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},\n        {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},\n        {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}\n    ]);\n}\n\nfunction makeSfntTable(tables) {\n    var sfnt = new table.Table('sfnt', [\n        {name: 'version', type: 'TAG', value: 'OTTO'},\n        {name: 'numTables', type: 'USHORT', value: 0},\n        {name: 'searchRange', type: 'USHORT', value: 0},\n        {name: 'entrySelector', type: 'USHORT', value: 0},\n        {name: 'rangeShift', type: 'USHORT', value: 0}\n    ]);\n    sfnt.tables = tables;\n    sfnt.numTables = tables.length;\n    var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));\n    sfnt.searchRange = 16 * highestPowerOf2;\n    sfnt.entrySelector = log2(highestPowerOf2);\n    sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;\n\n    var recordFields = [];\n    var tableFields = [];\n\n    var offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);\n    while (offset % 4 !== 0) {\n        offset += 1;\n        tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n    }\n\n    for (var i = 0; i < tables.length; i += 1) {\n        var t = tables[i];\n        check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');\n        var tableLength = t.sizeOf();\n        var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);\n        recordFields.push({name: tableRecord.tag + ' Table Record', type: 'TABLE', value: tableRecord});\n        tableFields.push({name: t.tableName + ' table', type: 'TABLE', value: t});\n        offset += tableLength;\n        check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');\n        while (offset % 4 !== 0) {\n            offset += 1;\n            tableFields.push({name: 'padding', type: 'BYTE', value: 0});\n        }\n    }\n\n    // Table records need to be sorted alphabetically.\n    recordFields.sort(function(r1, r2) {\n        if (r1.value.tag > r2.value.tag) {\n            return 1;\n        } else {\n            return -1;\n        }\n    });\n\n    sfnt.fields = sfnt.fields.concat(recordFields);\n    sfnt.fields = sfnt.fields.concat(tableFields);\n    return sfnt;\n}\n\n// Get the metrics for a character. If the string has more than one character\n// this function returns metrics for the first available character.\n// You can provide optional fallback metrics if no characters are available.\nfunction metricsForChar(font, chars, notFoundMetrics) {\n    for (var i = 0; i < chars.length; i += 1) {\n        var glyphIndex = font.charToGlyphIndex(chars[i]);\n        if (glyphIndex > 0) {\n            var glyph = font.glyphs[glyphIndex];\n            return glyph.getMetrics();\n        }\n    }\n\n    return notFoundMetrics;\n}\n\nfunction average(vs) {\n    var sum = 0;\n    for (var i = 0; i < vs.length; i += 1) {\n        sum += vs[i];\n    }\n\n    return sum / vs.length;\n}\n\n// Convert the font object to a SFNT data structure.\n// This structure contains all the necessary tables and metadata to create a binary OTF file.\nfunction fontToSfntTable(font) {\n    var xMins = [];\n    var yMins = [];\n    var xMaxs = [];\n    var yMaxs = [];\n    var advanceWidths = [];\n    var leftSideBearings = [];\n    var rightSideBearings = [];\n    var firstCharIndex = null;\n    var lastCharIndex = 0;\n    var ulUnicodeRange1 = 0;\n    var ulUnicodeRange2 = 0;\n    var ulUnicodeRange3 = 0;\n    var ulUnicodeRange4 = 0;\n    for (var i = 0; i < font.glyphs.length; i += 1) {\n        var glyph = font.glyphs[i];\n        var unicode = glyph.unicode | 0;\n        if (firstCharIndex > unicode || firstCharIndex === null) {\n            firstCharIndex = unicode;\n        }\n\n        if (lastCharIndex < unicode) {\n            lastCharIndex = unicode;\n        }\n\n        var position = os2.getUnicodeRange(unicode);\n        if (position < 32) {\n            ulUnicodeRange1 |= 1 << position;\n        } else if (position < 64) {\n            ulUnicodeRange2 |= 1 << position - 32;\n        } else if (position < 96) {\n            ulUnicodeRange3 |= 1 << position - 64;\n        } else if (position < 123) {\n            ulUnicodeRange4 |= 1 << position - 96;\n        } else {\n            throw new Error('Unicode ranges bits > 123 are reserved for internal usage');\n        }\n        // Skip non-important characters.\n        if (glyph.name === '.notdef') continue;\n        var metrics = glyph.getMetrics();\n        xMins.push(metrics.xMin);\n        yMins.push(metrics.yMin);\n        xMaxs.push(metrics.xMax);\n        yMaxs.push(metrics.yMax);\n        leftSideBearings.push(metrics.leftSideBearing);\n        rightSideBearings.push(metrics.rightSideBearing);\n        advanceWidths.push(glyph.advanceWidth);\n    }\n\n    var globals = {\n        xMin: Math.min.apply(null, xMins),\n        yMin: Math.min.apply(null, yMins),\n        xMax: Math.max.apply(null, xMaxs),\n        yMax: Math.max.apply(null, yMaxs),\n        advanceWidthMax: Math.max.apply(null, advanceWidths),\n        advanceWidthAvg: average(advanceWidths),\n        minLeftSideBearing: Math.min.apply(null, leftSideBearings),\n        maxLeftSideBearing: Math.max.apply(null, leftSideBearings),\n        minRightSideBearing: Math.min.apply(null, rightSideBearings)\n    };\n    globals.ascender = font.ascender !== undefined ? font.ascender : globals.yMax;\n    globals.descender = font.descender !== undefined ? font.descender : globals.yMin;\n\n    var headTable = head.make({\n        unitsPerEm: font.unitsPerEm,\n        xMin: globals.xMin,\n        yMin: globals.yMin,\n        xMax: globals.xMax,\n        yMax: globals.yMax\n    });\n\n    var hheaTable = hhea.make({\n        ascender: globals.ascender,\n        descender: globals.descender,\n        advanceWidthMax: globals.advanceWidthMax,\n        minLeftSideBearing: globals.minLeftSideBearing,\n        minRightSideBearing: globals.minRightSideBearing,\n        xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),\n        numberOfHMetrics: font.glyphs.length\n    });\n\n    var maxpTable = maxp.make(font.glyphs.length);\n\n    var os2Table = os2.make({\n        xAvgCharWidth: Math.round(globals.advanceWidthAvg),\n        usWeightClass: 500, // Medium FIXME Make this configurable\n        usWidthClass: 5, // Medium (normal) FIXME Make this configurable\n        usFirstCharIndex: firstCharIndex,\n        usLastCharIndex: lastCharIndex,\n        ulUnicodeRange1: ulUnicodeRange1,\n        ulUnicodeRange2: ulUnicodeRange2,\n        ulUnicodeRange3: ulUnicodeRange3,\n        ulUnicodeRange4: ulUnicodeRange4,\n        // See http://typophile.com/node/13081 for more info on vertical metrics.\n        // We get metrics for typical characters (such as \"x\" for xHeight).\n        // We provide some fallback characters if characters are unavailable: their\n        // ordering was chosen experimentally.\n        sTypoAscender: globals.ascender,\n        sTypoDescender: globals.descender,\n        sTypoLineGap: 0,\n        usWinAscent: globals.ascender,\n        usWinDescent: -globals.descender,\n        sxHeight: metricsForChar(font, 'xyvw', {yMax: 0}).yMax,\n        sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,\n        usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.\n    });\n\n    var hmtxTable = hmtx.make(font.glyphs);\n    var cmapTable = cmap.make(font.glyphs);\n\n    var fullName = font.familyName + ' ' + font.styleName;\n    var postScriptName = font.familyName.replace(/\\s/g, '') + '-' + font.styleName;\n    var nameTable = _name.make({\n        copyright: font.copyright,\n        fontFamily: font.familyName,\n        fontSubfamily: font.styleName,\n        uniqueID: font.manufacturer + ':' + fullName,\n        fullName: fullName,\n        version: font.version,\n        postScriptName: postScriptName,\n        trademark: font.trademark,\n        manufacturer: font.manufacturer,\n        designer: font.designer,\n        description: font.description,\n        manufacturerURL: font.manufacturerURL,\n        designerURL: font.designerURL,\n        license: font.license,\n        licenseURL: font.licenseURL,\n        preferredFamily: font.familyName,\n        preferredSubfamily: font.styleName\n    });\n    var postTable = post.make();\n    var cffTable = cff.make(font.glyphs, {\n        version: font.version,\n        fullName: fullName,\n        familyName: font.familyName,\n        weightName: font.styleName,\n        postScriptName: postScriptName\n    });\n    // Order the tables according to the the OpenType specification 1.4.\n    var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];\n\n    var sfntTable = makeSfntTable(tables);\n\n    // Compute the font's checkSum and store it in head.checkSumAdjustment.\n    var bytes = sfntTable.encode();\n    var checkSum = computeCheckSum(bytes);\n    var tableFields = sfntTable.fields;\n    var checkSumAdjusted = false;\n    for (i = 0; i < tableFields.length; i += 1) {\n        if (tableFields[i].name === 'head table') {\n            tableFields[i].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;\n            checkSumAdjusted = true;\n            break;\n        }\n    }\n\n    if (!checkSumAdjusted) {\n        throw new Error('Could not find head table with checkSum to adjust.');\n    }\n\n    return sfntTable;\n}\n\nexports.computeCheckSum = computeCheckSum;\nexports.make = makeSfntTable;\nexports.fontToTable = fontToSfntTable;\n\n},{\"../check\":1,\"../table\":9,\"./cff\":10,\"./cmap\":11,\"./head\":14,\"./hhea\":15,\"./hmtx\":16,\"./maxp\":19,\"./name\":20,\"./os2\":21,\"./post\":22}],24:[function(require,module,exports){\n// Data types used in the OpenType font file.\n// All OpenType fonts use Motorola-style byte ordering (Big Endian)\n\n/* global WeakMap */\n\n'use strict';\n\nvar check = require('./check');\n\nvar LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15\nvar LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31\n\nvar decode = {};\nvar encode = {};\nvar sizeOf = {};\n\n// Return a function that always returns the same value.\nfunction constant(v) {\n    return function() {\n        return v;\n    };\n}\n\n// OpenType data types //////////////////////////////////////////////////////\n\n// Convert an 8-bit unsigned integer to a list of 1 byte.\nencode.BYTE = function(v) {\n    check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');\n    return [v];\n};\n\nsizeOf.BYTE = constant(1);\n\n// Convert a 8-bit signed integer to a list of 1 byte.\nencode.CHAR = function(v) {\n    return [v.charCodeAt(0)];\n};\n\nsizeOf.BYTE = constant(1);\n\n// Convert an ASCII string to a list of bytes.\nencode.CHARARRAY = function(v) {\n    var b = [];\n    for (var i = 0; i < v.length; i += 1) {\n        b.push(v.charCodeAt(i));\n    }\n\n    return b;\n};\n\nsizeOf.CHARARRAY = function(v) {\n    return v.length;\n};\n\n// Convert a 16-bit unsigned integer to a list of 2 bytes.\nencode.USHORT = function(v) {\n    return [(v >> 8) & 0xFF, v & 0xFF];\n};\n\nsizeOf.USHORT = constant(2);\n\n// Convert a 16-bit signed integer to a list of 2 bytes.\nencode.SHORT = function(v) {\n    // Two's complement\n    if (v >= LIMIT16) {\n        v = -(2 * LIMIT16 - v);\n    }\n\n    return [(v >> 8) & 0xFF, v & 0xFF];\n};\n\nsizeOf.SHORT = constant(2);\n\n// Convert a 24-bit unsigned integer to a list of 3 bytes.\nencode.UINT24 = function(v) {\n    return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\nsizeOf.UINT24 = constant(3);\n\n// Convert a 32-bit unsigned integer to a list of 4 bytes.\nencode.ULONG = function(v) {\n    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\nsizeOf.ULONG = constant(4);\n\n// Convert a 32-bit unsigned integer to a list of 4 bytes.\nencode.LONG = function(v) {\n    // Two's complement\n    if (v >= LIMIT32) {\n        v = -(2 * LIMIT32 - v);\n    }\n\n    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\nsizeOf.LONG = constant(4);\n\nencode.FIXED = encode.ULONG;\nsizeOf.FIXED = sizeOf.ULONG;\n\nencode.FWORD = encode.SHORT;\nsizeOf.FWORD = sizeOf.SHORT;\n\nencode.UFWORD = encode.USHORT;\nsizeOf.UFWORD = sizeOf.USHORT;\n\n// FIXME Implement LONGDATETIME\nencode.LONGDATETIME = function() {\n    return [0, 0, 0, 0, 0, 0, 0, 0];\n};\n\nsizeOf.LONGDATETIME = constant(8);\n\n// Convert a 4-char tag to a list of 4 bytes.\nencode.TAG = function(v) {\n    check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');\n    return [v.charCodeAt(0),\n            v.charCodeAt(1),\n            v.charCodeAt(2),\n            v.charCodeAt(3)];\n};\n\nsizeOf.TAG = constant(4);\n\n// CFF data types ///////////////////////////////////////////////////////////\n\nencode.Card8 = encode.BYTE;\nsizeOf.Card8 = sizeOf.BYTE;\n\nencode.Card16 = encode.USHORT;\nsizeOf.Card16 = sizeOf.USHORT;\n\nencode.OffSize = encode.BYTE;\nsizeOf.OffSize = sizeOf.BYTE;\n\nencode.SID = encode.USHORT;\nsizeOf.SID = sizeOf.USHORT;\n\n// Convert a numeric operand or charstring number to a variable-size list of bytes.\nencode.NUMBER = function(v) {\n    if (v >= -107 && v <= 107) {\n        return [v + 139];\n    } else if (v >= 108 && v <= 1131) {\n        v = v - 108;\n        return [(v >> 8) + 247, v & 0xFF];\n    } else if (v >= -1131 && v <= -108) {\n        v = -v - 108;\n        return [(v >> 8) + 251, v & 0xFF];\n    } else if (v >= -32768 && v <= 32767) {\n        return encode.NUMBER16(v);\n    } else {\n        return encode.NUMBER32(v);\n    }\n};\n\nsizeOf.NUMBER = function(v) {\n    return encode.NUMBER(v).length;\n};\n\n// Convert a signed number between -32768 and +32767 to a three-byte value.\n// This ensures we always use three bytes, but is not the most compact format.\nencode.NUMBER16 = function(v) {\n    return [28, (v >> 8) & 0xFF, v & 0xFF];\n};\n\nsizeOf.NUMBER16 = constant(2);\n\n// Convert a signed number between -(2^31) and +(2^31-1) to a four-byte value.\n// This is useful if you want to be sure you always use four bytes,\n// at the expense of wasting a few bytes for smaller numbers.\nencode.NUMBER32 = function(v) {\n    return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];\n};\n\nsizeOf.NUMBER32 = constant(4);\n\nencode.NAME = encode.CHARARRAY;\nsizeOf.NAME = sizeOf.CHARARRAY;\n\nencode.STRING = encode.CHARARRAY;\nsizeOf.STRING = sizeOf.CHARARRAY;\n\n// Convert a ASCII string to a list of UTF16 bytes.\nencode.UTF16 = function(v) {\n    var b = [];\n    for (var i = 0; i < v.length; i += 1) {\n        b.push(0);\n        b.push(v.charCodeAt(i));\n    }\n\n    return b;\n};\n\nsizeOf.UTF16 = function(v) {\n    return v.length * 2;\n};\n\n// Convert a list of values to a CFF INDEX structure.\n// The values should be objects containing name / type / value.\nencode.INDEX = function(l) {\n    var i;\n    //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,\n    //    dataSize, i, v;\n    // Because we have to know which data type to use to encode the offsets,\n    // we have to go through the values twice: once to encode the data and\n    // calculate the offets, then again to encode the offsets using the fitting data type.\n    var offset = 1; // First offset is always 1.\n    var offsets = [offset];\n    var data = [];\n    var dataSize = 0;\n    for (i = 0; i < l.length; i += 1) {\n        var v = encode.OBJECT(l[i]);\n        Array.prototype.push.apply(data, v);\n        dataSize += v.length;\n        offset += v.length;\n        offsets.push(offset);\n    }\n\n    if (data.length === 0) {\n        return [0, 0];\n    }\n\n    var encodedOffsets = [];\n    var offSize = (1 + Math.floor(Math.log(dataSize) / Math.log(2)) / 8) | 0;\n    var offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];\n    for (i = 0; i < offsets.length; i += 1) {\n        var encodedOffset = offsetEncoder(offsets[i]);\n        Array.prototype.push.apply(encodedOffsets, encodedOffset);\n    }\n\n    return Array.prototype.concat(encode.Card16(l.length),\n                           encode.OffSize(offSize),\n                           encodedOffsets,\n                           data);\n};\n\nsizeOf.INDEX = function(v) {\n    return encode.INDEX(v).length;\n};\n\n// Convert an object to a CFF DICT structure.\n// The keys should be numeric.\n// The values should be objects containing name / type / value.\nencode.DICT = function(m) {\n    var d = [];\n    var keys = Object.keys(m);\n    var length = keys.length;\n\n    for (var i = 0; i < length; i += 1) {\n        // Object.keys() return string keys, but our keys are always numeric.\n        var k = parseInt(keys[i], 0);\n        var v = m[k];\n        // Value comes before the key.\n        d = d.concat(encode.OPERAND(v.value, v.type));\n        d = d.concat(encode.OPERATOR(k));\n    }\n\n    return d;\n};\n\nsizeOf.DICT = function(m) {\n    return encode.DICT(m).length;\n};\n\nencode.OPERATOR = function(v) {\n    if (v < 1200) {\n        return [v];\n    } else {\n        return [12, v - 1200];\n    }\n};\n\nencode.OPERAND = function(v, type) {\n    var d = [];\n    if (Array.isArray(type)) {\n        for (var i = 0; i < type.length; i += 1) {\n            check.argument(v.length === type.length, 'Not enough arguments given for type' + type);\n            d = d.concat(encode.OPERAND(v[i], type[i]));\n        }\n    } else {\n        if (type === 'SID') {\n            d = d.concat(encode.NUMBER(v));\n        } else if (type === 'offset') {\n            // We make it easy for ourselves and always encode offsets as\n            // 4 bytes. This makes offset calculation for the top dict easier.\n            d = d.concat(encode.NUMBER32(v));\n        } else {\n            // FIXME Add support for booleans\n            d = d.concat(encode.NUMBER(v));\n        }\n    }\n\n    return d;\n};\n\nencode.OP = encode.BYTE;\nsizeOf.OP = sizeOf.BYTE;\n\n// memoize charstring encoding using WeakMap if available\nvar wmm = typeof WeakMap === 'function' && new WeakMap();\n// Convert a list of CharString operations to bytes.\nencode.CHARSTRING = function(ops) {\n    if (wmm && wmm.has(ops)) {\n        return wmm.get(ops);\n    }\n\n    var d = [];\n    var length = ops.length;\n\n    for (var i = 0; i < length; i += 1) {\n        var op = ops[i];\n        d = d.concat(encode[op.type](op.value));\n    }\n\n    if (wmm) {\n        wmm.set(ops, d);\n    }\n\n    return d;\n};\n\nsizeOf.CHARSTRING = function(ops) {\n    return encode.CHARSTRING(ops).length;\n};\n\n// Utility functions ////////////////////////////////////////////////////////\n\n// Convert an object containing name / type / value to bytes.\nencode.OBJECT = function(v) {\n    var encodingFunction = encode[v.type];\n    check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);\n    return encodingFunction(v.value);\n};\n\n// Convert a table object to bytes.\n// A table contains a list of fields containing the metadata (name, type and default value).\n// The table itself has the field values set as attributes.\nencode.TABLE = function(table) {\n    var d = [];\n    var length = table.fields.length;\n\n    for (var i = 0; i < length; i += 1) {\n        var field = table.fields[i];\n        var encodingFunction = encode[field.type];\n        check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type);\n        var value = table[field.name];\n        if (value === undefined) {\n            value = field.value;\n        }\n\n        var bytes = encodingFunction(value);\n        d = d.concat(bytes);\n    }\n\n    return d;\n};\n\n// Merge in a list of bytes.\nencode.LITERAL = function(v) {\n    return v;\n};\n\nsizeOf.LITERAL = function(v) {\n    return v.length;\n};\n\nexports.decode = decode;\nexports.encode = encode;\nexports.sizeOf = sizeOf;\n\n},{\"./check\":1}]},{},[6])(6)\n});","/*!\n * Paper.js v0.9.22 - The Swiss Army Knife of Vector Graphics Scripting.\n * http://paperjs.org/\n *\n * Copyright (c) 2011 - 2014, Juerg Lehni & Jonathan Puckey\n * http://scratchdisk.com/ & http://jonathanpuckey.com/\n *\n * Distributed under the MIT license. See LICENSE file for details.\n *\n * All rights reserved.\n *\n * Date: Wed Mar 18 10:25:56 2015 +0100\n *\n ***\n *\n * Straps.js - Class inheritance library with support for bean-style accessors\n *\n * Copyright (c) 2006 - 2013 Juerg Lehni\n * http://scratchdisk.com/\n *\n * Distributed under the MIT license.\n *\n ***\n *\n * Acorn.js\n * http://marijnhaverbeke.nl/acorn/\n *\n * Acorn is a tiny, fast JavaScript parser written in JavaScript,\n * created by Marijn Haverbeke and released under an MIT license.\n *\n */\n\nvar paper = new function(undefined) {\n\n\t\t  var noCanvas =\n\t\t\t  ( typeof process === 'object' && process.browser !== true ) ||\n\t\t\t  ( typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope );\n\nvar Base = new function() {\n\tvar hidden = /^(statics|enumerable|beans|preserve)$/,\n\n\t\tforEach = [].forEach || function(iter, bind) {\n\t\t\tfor (var i = 0, l = this.length; i < l; i++)\n\t\t\t\titer.call(bind, this[i], i, this);\n\t\t},\n\n\t\tforIn = function(iter, bind) {\n\t\t\tfor (var i in this)\n\t\t\t\tif (this.hasOwnProperty(i))\n\t\t\t\t\titer.call(bind, this[i], i, this);\n\t\t},\n\n\t\tcreate = Object.create || function(proto) {\n\t\t\treturn { __proto__: proto };\n\t\t},\n\n\t\tdescribe = Object.getOwnPropertyDescriptor || function(obj, name) {\n\t\t\tvar get = obj.__lookupGetter__ && obj.__lookupGetter__(name);\n\t\t\treturn get\n\t\t\t\t\t? { get: get, set: obj.__lookupSetter__(name),\n\t\t\t\t\t\tenumerable: true, configurable: true }\n\t\t\t\t\t: obj.hasOwnProperty(name)\n\t\t\t\t\t\t? { value: obj[name], enumerable: true,\n\t\t\t\t\t\t\tconfigurable: true, writable: true }\n\t\t\t\t\t\t: null;\n\t\t},\n\n\t\t_define = Object.defineProperty || function(obj, name, desc) {\n\t\t\tif ((desc.get || desc.set) && obj.__defineGetter__) {\n\t\t\t\tif (desc.get)\n\t\t\t\t\tobj.__defineGetter__(name, desc.get);\n\t\t\t\tif (desc.set)\n\t\t\t\t\tobj.__defineSetter__(name, desc.set);\n\t\t\t} else {\n\t\t\t\tobj[name] = desc.value;\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\n\t\tdefine = function(obj, name, desc) {\n\t\t\tdelete obj[name];\n\t\t\treturn _define(obj, name, desc);\n\t\t};\n\n\tfunction inject(dest, src, enumerable, beans, preserve) {\n\t\tvar beansNames = {};\n\n\t\tfunction field(name, val) {\n\t\t\tval = val || (val = describe(src, name))\n\t\t\t\t\t&& (val.get ? val : val.value);\n\t\t\tif (typeof val === 'string' && val[0] === '#')\n\t\t\t\tval = dest[val.substring(1)] || val;\n\t\t\tvar isFunc = typeof val === 'function',\n\t\t\t\tres = val,\n\t\t\t\tprev = preserve || isFunc\n\t\t\t\t\t\t? (val && val.get ? name in dest : dest[name])\n\t\t\t\t\t\t: null,\n\t\t\t\tbean;\n\t\t\tif (!preserve || !prev) {\n\t\t\t\tif (isFunc && prev)\n\t\t\t\t\tval.base = prev;\n\t\t\t\tif (isFunc && beans !== false\n\t\t\t\t\t\t&& (bean = name.match(/^([gs]et|is)(([A-Z])(.*))$/)))\n\t\t\t\t\tbeansNames[bean[3].toLowerCase() + bean[4]] = bean[2];\n\t\t\t\tif (!res || isFunc || !res.get || typeof res.get !== 'function'\n\t\t\t\t\t\t|| !Base.isPlainObject(res))\n\t\t\t\t\tres = { value: res, writable: true };\n\t\t\t\tif ((describe(dest, name)\n\t\t\t\t\t\t|| { configurable: true }).configurable) {\n\t\t\t\t\tres.configurable = true;\n\t\t\t\t\tres.enumerable = enumerable;\n\t\t\t\t}\n\t\t\t\tdefine(dest, name, res);\n\t\t\t}\n\t\t}\n\t\tif (src) {\n\t\t\tfor (var name in src) {\n\t\t\t\tif (src.hasOwnProperty(name) && !hidden.test(name))\n\t\t\t\t\tfield(name);\n\t\t\t}\n\t\t\tfor (var name in beansNames) {\n\t\t\t\tvar part = beansNames[name],\n\t\t\t\t\tset = dest['set' + part],\n\t\t\t\t\tget = dest['get' + part] || set && dest['is' + part];\n\t\t\t\tif (get && (beans === true || get.length === 0))\n\t\t\t\t\tfield(name, { get: get, set: set });\n\t\t\t}\n\t\t}\n\t\treturn dest;\n\t}\n\n\tfunction each(obj, iter, bind) {\n\t\tif (obj)\n\t\t\t('length' in obj && !obj.getLength\n\t\t\t\t\t&& typeof obj.length === 'number'\n\t\t\t\t? forEach\n\t\t\t\t: forIn).call(obj, iter, bind = bind || obj);\n\t\treturn bind;\n\t}\n\n\tfunction set(obj, props, exclude) {\n\t\tfor (var key in props)\n\t\t\tif (props.hasOwnProperty(key) && (!exclude || !exclude[key]))\n\t\t\t\tobj[key] = props[key];\n\t\treturn obj;\n\t}\n\n\treturn inject(function Base() {\n\t\tfor (var i = 0, l = arguments.length; i < l; i++)\n\t\t\tset(this, arguments[i]);\n\t}, {\n\t\tinject: function(src) {\n\t\t\tif (src) {\n\t\t\t\tvar statics = src.statics === true ? src : src.statics,\n\t\t\t\t\tbeans = src.beans,\n\t\t\t\t\tpreserve = src.preserve;\n\t\t\t\tif (statics !== src)\n\t\t\t\t\tinject(this.prototype, src, src.enumerable, beans, preserve);\n\t\t\t\tinject(this, statics, true, beans, preserve);\n\t\t\t}\n\t\t\tfor (var i = 1, l = arguments.length; i < l; i++)\n\t\t\t\tthis.inject(arguments[i]);\n\t\t\treturn this;\n\t\t},\n\n\t\textend: function() {\n\t\t\tvar base = this,\n\t\t\t\tctor;\n\t\t\tfor (var i = 0, l = arguments.length; i < l; i++)\n\t\t\t\tif (ctor = arguments[i].initialize)\n\t\t\t\t\tbreak;\n\t\t\tctor = ctor || function() {\n\t\t\t\tbase.apply(this, arguments);\n\t\t\t};\n\t\t\tctor.prototype = create(this.prototype);\n\t\t\tctor.base = base;\n\t\t\tdefine(ctor.prototype, 'constructor',\n\t\t\t\t\t{ value: ctor, writable: true, configurable: true });\n\t\t\tinject(ctor, this, true);\n\t\t\treturn arguments.length ? this.inject.apply(ctor, arguments) : ctor;\n\t\t}\n\t}, true).inject({\n\t\tinject: function() {\n\t\t\tfor (var i = 0, l = arguments.length; i < l; i++) {\n\t\t\t\tvar src = arguments[i];\n\t\t\t\tif (src)\n\t\t\t\t\tinject(this, src, src.enumerable, src.beans, src.preserve);\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\n\t\textend: function() {\n\t\t\tvar res = create(this);\n\t\t\treturn res.inject.apply(res, arguments);\n\t\t},\n\n\t\teach: function(iter, bind) {\n\t\t\treturn each(this, iter, bind);\n\t\t},\n\n\t\tset: function(props) {\n\t\t\treturn set(this, props);\n\t\t},\n\n\t\tclone: function() {\n\t\t\treturn new this.constructor(this);\n\t\t},\n\n\t\tstatics: {\n\t\t\teach: each,\n\t\t\tcreate: create,\n\t\t\tdefine: define,\n\t\t\tdescribe: describe,\n\t\t\tset: set,\n\n\t\t\tclone: function(obj) {\n\t\t\t\treturn set(new obj.constructor(), obj);\n\t\t\t},\n\n\t\t\tisPlainObject: function(obj) {\n\t\t\t\tvar ctor = obj != null && obj.constructor;\n\t\t\t\treturn ctor && (ctor === Object || ctor === Base\n\t\t\t\t\t\t|| ctor.name === 'Object');\n\t\t\t},\n\n\t\t\tpick: function() {\n\t\t\t\tfor (var i = 0, l = arguments.length; i < l; i++)\n\t\t\t\t\tif (arguments[i] !== undefined)\n\t\t\t\t\t\treturn arguments[i];\n\t\t\t}\n\t\t}\n\t});\n};\n\nif (typeof module !== 'undefined')\n\tmodule.exports = Base;\n\nBase.inject({\n\ttoString: function() {\n\t\treturn this._id != null\n\t\t\t?  (this._class || 'Object') + (this._name\n\t\t\t\t? \" '\" + this._name + \"'\"\n\t\t\t\t: ' @' + this._id)\n\t\t\t: '{ ' + Base.each(this, function(value, key) {\n\t\t\t\tif (!/^_/.test(key)) {\n\t\t\t\t\tvar type = typeof value;\n\t\t\t\t\tthis.push(key + ': ' + (type === 'number'\n\t\t\t\t\t\t\t? Formatter.instance.number(value)\n\t\t\t\t\t\t\t: type === 'string' ? \"'\" + value + \"'\" : value));\n\t\t\t\t}\n\t\t\t}, []).join(', ') + ' }';\n\t},\n\n\tgetClassName: function() {\n\t\treturn this._class || '';\n\t},\n\n\texportJSON: function(options) {\n\t\treturn Base.exportJSON(this, options);\n\t},\n\n\ttoJSON: function() {\n\t\treturn Base.serialize(this);\n\t},\n\n\t_set: function(props, exclude, dontCheck) {\n\t\tif (props && (dontCheck || Base.isPlainObject(props))) {\n\t\t\tvar orig = props._filtering || props;\n\t\t\tfor (var key in orig) {\n\t\t\t\tif (orig.hasOwnProperty(key) && !(exclude && exclude[key])) {\n\t\t\t\t\tvar value = props[key];\n\t\t\t\t\tif (value !== undefined)\n\t\t\t\t\t\tthis[key] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t},\n\n\tstatics: {\n\n\t\texports: {\n\t\t\tenumerable: true\n\t\t},\n\n\t\textend: function extend() {\n\t\t\tvar res = extend.base.apply(this, arguments),\n\t\t\t\tname = res.prototype._class;\n\t\t\tif (name && !Base.exports[name])\n\t\t\t\tBase.exports[name] = res;\n\t\t\treturn res;\n\t\t},\n\n\t\tequals: function(obj1, obj2) {\n\t\t\tfunction checkKeys(o1, o2) {\n\t\t\t\tfor (var i in o1)\n\t\t\t\t\tif (o1.hasOwnProperty(i) && !o2.hasOwnProperty(i))\n\t\t\t\t\t\treturn false;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (obj1 === obj2)\n\t\t\t\treturn true;\n\t\t\tif (obj1 && obj1.equals)\n\t\t\t\treturn obj1.equals(obj2);\n\t\t\tif (obj2 && obj2.equals)\n\t\t\t\treturn obj2.equals(obj1);\n\t\t\tif (Array.isArray(obj1) && Array.isArray(obj2)) {\n\t\t\t\tif (obj1.length !== obj2.length)\n\t\t\t\t\treturn false;\n\t\t\t\tfor (var i = 0, l = obj1.length; i < l; i++) {\n\t\t\t\t\tif (!Base.equals(obj1[i], obj2[i]))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (obj1 && typeof obj1 === 'object'\n\t\t\t\t\t&& obj2 && typeof obj2 === 'object') {\n\t\t\t\tif (!checkKeys(obj1, obj2) || !checkKeys(obj2, obj1))\n\t\t\t\t\treturn false;\n\t\t\t\tfor (var i in obj1) {\n\t\t\t\t\tif (obj1.hasOwnProperty(i)\n\t\t\t\t\t\t\t&& !Base.equals(obj1[i], obj2[i]))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\n\t\tread: function(list, start, options, length) {\n\t\t\tif (this === Base) {\n\t\t\t\tvar value = this.peek(list, start);\n\t\t\t\tlist.__index++;\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tvar proto = this.prototype,\n\t\t\t\treadIndex = proto._readIndex,\n\t\t\t\tindex = start || readIndex && list.__index || 0;\n\t\t\tif (!length)\n\t\t\t\tlength = list.length - index;\n\t\t\tvar obj = list[index];\n\t\t\tif (obj instanceof this\n\t\t\t\t|| options && options.readNull && obj == null && length <= 1) {\n\t\t\t\tif (readIndex)\n\t\t\t\t\tlist.__index = index + 1;\n\t\t\t\treturn obj && options && options.clone ? obj.clone() : obj;\n\t\t\t}\n\t\t\tobj = Base.create(this.prototype);\n\t\t\tif (readIndex)\n\t\t\t\tobj.__read = true;\n\t\t\tobj = obj.initialize.apply(obj, index > 0 || length < list.length\n\t\t\t\t? Array.prototype.slice.call(list, index, index + length)\n\t\t\t\t: list) || obj;\n\t\t\tif (readIndex) {\n\t\t\t\tlist.__index = index + obj.__read;\n\t\t\t\tobj.__read = undefined;\n\t\t\t}\n\t\t\treturn obj;\n\t\t},\n\n\t\tpeek: function(list, start) {\n\t\t\treturn list[list.__index = start || list.__index || 0];\n\t\t},\n\n\t\tremain: function(list) {\n\t\t\treturn list.length - (list.__index || 0);\n\t\t},\n\n\t\treadAll: function(list, start, options) {\n\t\t\tvar res = [],\n\t\t\t\tentry;\n\t\t\tfor (var i = start || 0, l = list.length; i < l; i++) {\n\t\t\t\tres.push(Array.isArray(entry = list[i])\n\t\t\t\t\t\t? this.read(entry, 0, options)\n\t\t\t\t\t\t: this.read(list, i, options, 1));\n\t\t\t}\n\t\t\treturn res;\n\t\t},\n\n\t\treadNamed: function(list, name, start, options, length) {\n\t\t\tvar value = this.getNamed(list, name),\n\t\t\t\thasObject = value !== undefined;\n\t\t\tif (hasObject) {\n\t\t\t\tvar filtered = list._filtered;\n\t\t\t\tif (!filtered) {\n\t\t\t\t\tfiltered = list._filtered = Base.create(list[0]);\n\t\t\t\t\tfiltered._filtering = list[0];\n\t\t\t\t}\n\t\t\t\tfiltered[name] = undefined;\n\t\t\t}\n\t\t\treturn this.read(hasObject ? [value] : list, start, options, length);\n\t\t},\n\n\t\tgetNamed: function(list, name) {\n\t\t\tvar arg = list[0];\n\t\t\tif (list._hasObject === undefined)\n\t\t\t\tlist._hasObject = list.length === 1 && Base.isPlainObject(arg);\n\t\t\tif (list._hasObject)\n\t\t\t\treturn name ? arg[name] : list._filtered || arg;\n\t\t},\n\n\t\thasNamed: function(list, name) {\n\t\t\treturn !!this.getNamed(list, name);\n\t\t},\n\n\t\tisPlainValue: function(obj, asString) {\n\t\t\treturn this.isPlainObject(obj) || Array.isArray(obj)\n\t\t\t\t\t|| asString && typeof obj === 'string';\n\t\t},\n\n\t\tserialize: function(obj, options, compact, dictionary) {\n\t\t\toptions = options || {};\n\n\t\t\tvar root = !dictionary,\n\t\t\t\tres;\n\t\t\tif (root) {\n\t\t\t\toptions.formatter = new Formatter(options.precision);\n\t\t\t\tdictionary = {\n\t\t\t\t\tlength: 0,\n\t\t\t\t\tdefinitions: {},\n\t\t\t\t\treferences: {},\n\t\t\t\t\tadd: function(item, create) {\n\t\t\t\t\t\tvar id = '#' + item._id,\n\t\t\t\t\t\t\tref = this.references[id];\n\t\t\t\t\t\tif (!ref) {\n\t\t\t\t\t\t\tthis.length++;\n\t\t\t\t\t\t\tvar res = create.call(item),\n\t\t\t\t\t\t\t\tname = item._class;\n\t\t\t\t\t\t\tif (name && res[0] !== name)\n\t\t\t\t\t\t\t\tres.unshift(name);\n\t\t\t\t\t\t\tthis.definitions[id] = res;\n\t\t\t\t\t\t\tref = this.references[id] = [id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn ref;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (obj && obj._serialize) {\n\t\t\t\tres = obj._serialize(options, dictionary);\n\t\t\t\tvar name = obj._class;\n\t\t\t\tif (name && !compact && !res._compact && res[0] !== name)\n\t\t\t\t\tres.unshift(name);\n\t\t\t} else if (Array.isArray(obj)) {\n\t\t\t\tres = [];\n\t\t\t\tfor (var i = 0, l = obj.length; i < l; i++)\n\t\t\t\t\tres[i] = Base.serialize(obj[i], options, compact,\n\t\t\t\t\t\t\tdictionary);\n\t\t\t\tif (compact)\n\t\t\t\t\tres._compact = true;\n\t\t\t} else if (Base.isPlainObject(obj)) {\n\t\t\t\tres = {};\n\t\t\t\tfor (var i in obj)\n\t\t\t\t\tif (obj.hasOwnProperty(i))\n\t\t\t\t\t\tres[i] = Base.serialize(obj[i], options, compact,\n\t\t\t\t\t\t\t\tdictionary);\n\t\t\t} else if (typeof obj === 'number') {\n\t\t\t\tres = options.formatter.number(obj, options.precision);\n\t\t\t} else {\n\t\t\t\tres = obj;\n\t\t\t}\n\t\t\treturn root && dictionary.length > 0\n\t\t\t\t\t? [['dictionary', dictionary.definitions], res]\n\t\t\t\t\t: res;\n\t\t},\n\n\t\tdeserialize: function(json, create, _data) {\n\t\t\tvar res = json,\n\t\t\t\tisRoot = !_data;\n\t\t\t_data = _data || {};\n\t\t\tif (Array.isArray(json)) {\n\t\t\t\tvar type = json[0],\n\t\t\t\t\tisDictionary = type === 'dictionary';\n\t\t\t\tif (!isDictionary) {\n\t\t\t\t\tif (_data.dictionary && json.length == 1 && /^#/.test(type))\n\t\t\t\t\t\treturn _data.dictionary[type];\n\t\t\t\t\ttype = Base.exports[type];\n\t\t\t\t}\n\t\t\t\tres = [];\n\t\t\t\tfor (var i = type ? 1 : 0, l = json.length; i < l; i++)\n\t\t\t\t\tres.push(Base.deserialize(json[i], create, _data));\n\t\t\t\tif (isDictionary) {\n\t\t\t\t\t_data.dictionary = res[0];\n\t\t\t\t} else if (type) {\n\t\t\t\t\tvar args = res;\n\t\t\t\t\tif (create) {\n\t\t\t\t\t\tres = create(type, args);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres = Base.create(type.prototype);\n\t\t\t\t\t\ttype.apply(res, args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (Base.isPlainObject(json)) {\n\t\t\t\tres = {};\n\t\t\t\tfor (var key in json)\n\t\t\t\t\tres[key] = Base.deserialize(json[key], create, _data);\n\t\t\t}\n\t\t\treturn isRoot && json && json.length && json[0][0] === 'dictionary'\n\t\t\t\t\t? res[1]\n\t\t\t\t\t: res;\n\t\t},\n\n\t\texportJSON: function(obj, options) {\n\t\t\tvar json = Base.serialize(obj, options);\n\t\t\treturn options && options.asString === false\n\t\t\t\t\t? json\n\t\t\t\t\t: JSON.stringify(json);\n\t\t},\n\n\t\timportJSON: function(json, target) {\n\t\t\treturn Base.deserialize(\n\t\t\t\t\ttypeof json === 'string' ? JSON.parse(json) : json,\n\t\t\t\t\tfunction(type, args) {\n\t\t\t\t\t\tvar obj = target && target.constructor === type\n\t\t\t\t\t\t\t\t? target\n\t\t\t\t\t\t\t\t: Base.create(type.prototype),\n\t\t\t\t\t\t\tisTarget = obj === target;\n\t\t\t\t\t\tif (args.length === 1 && obj instanceof Item\n\t\t\t\t\t\t\t\t&& (isTarget || !(obj instanceof Layer))) {\n\t\t\t\t\t\t\tvar arg = args[0];\n\t\t\t\t\t\t\tif (Base.isPlainObject(arg))\n\t\t\t\t\t\t\t\targ.insert = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttype.apply(obj, args);\n\t\t\t\t\t\tif (isTarget)\n\t\t\t\t\t\t\ttarget = null;\n\t\t\t\t\t\treturn obj;\n\t\t\t\t\t});\n\t\t},\n\n\t\tsplice: function(list, items, index, remove) {\n\t\t\tvar amount = items && items.length,\n\t\t\t\tappend = index === undefined;\n\t\t\tindex = append ? list.length : index;\n\t\t\tif (index > list.length)\n\t\t\t\tindex = list.length;\n\t\t\tfor (var i = 0; i < amount; i++)\n\t\t\t\titems[i]._index = index + i;\n\t\t\tif (append) {\n\t\t\t\tlist.push.apply(list, items);\n\t\t\t\treturn [];\n\t\t\t} else {\n\t\t\t\tvar args = [index, remove];\n\t\t\t\tif (items)\n\t\t\t\t\targs.push.apply(args, items);\n\t\t\t\tvar removed = list.splice.apply(list, args);\n\t\t\t\tfor (var i = 0, l = removed.length; i < l; i++)\n\t\t\t\t\tremoved[i]._index = undefined;\n\t\t\t\tfor (var i = index + amount, l = list.length; i < l; i++)\n\t\t\t\t\tlist[i]._index = i;\n\t\t\t\treturn removed;\n\t\t\t}\n\t\t},\n\n\t\tcapitalize: function(str) {\n\t\t\treturn str.replace(/\\b[a-z]/g, function(match) {\n\t\t\t\treturn match.toUpperCase();\n\t\t\t});\n\t\t},\n\n\t\tcamelize: function(str) {\n\t\t\treturn str.replace(/-(.)/g, function(all, chr) {\n\t\t\t\treturn chr.toUpperCase();\n\t\t\t});\n\t\t},\n\n\t\thyphenate: function(str) {\n\t\t\treturn str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\t\t}\n\t}\n});\n\nvar Emitter = {\n\ton: function(type, func) {\n\t\tif (typeof type !== 'string') {\n\t\t\tBase.each(type, function(value, key) {\n\t\t\t\tthis.on(key, value);\n\t\t\t}, this);\n\t\t} else {\n\t\t\tvar entry = this._eventTypes[type];\n\t\t\tif (entry) {\n\t\t\t\tvar handlers = this._callbacks = this._callbacks || {};\n\t\t\t\thandlers = handlers[type] = handlers[type] || [];\n\t\t\t\tif (handlers.indexOf(func) === -1) {\n\t\t\t\t\thandlers.push(func);\n\t\t\t\t\tif (entry.install && handlers.length == 1)\n\t\t\t\t\t\tentry.install.call(this, type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\n\toff: function(type, func) {\n\t\tif (typeof type !== 'string') {\n\t\t\tBase.each(type, function(value, key) {\n\t\t\t\tthis.off(key, value);\n\t\t\t}, this);\n\t\t\treturn;\n\t\t}\n\t\tvar entry = this._eventTypes[type],\n\t\t\thandlers = this._callbacks && this._callbacks[type],\n\t\t\tindex;\n\t\tif (entry && handlers) {\n\t\t\tif (!func || (index = handlers.indexOf(func)) !== -1\n\t\t\t\t\t&& handlers.length === 1) {\n\t\t\t\tif (entry.uninstall)\n\t\t\t\t\tentry.uninstall.call(this, type);\n\t\t\t\tdelete this._callbacks[type];\n\t\t\t} else if (index !== -1) {\n\t\t\t\thandlers.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\n\tonce: function(type, func) {\n\t\treturn this.on(type, function() {\n\t\t\tfunc.apply(this, arguments);\n\t\t\tthis.off(type, func);\n\t\t});\n\t},\n\n\temit: function(type, event) {\n\t\tvar handlers = this._callbacks && this._callbacks[type];\n\t\tif (!handlers)\n\t\t\treturn false;\n\t\tvar args = [].slice.call(arguments, 1);\n\t\tfor (var i = 0, l = handlers.length; i < l; i++) {\n\t\t\tif (handlers[i].apply(this, args) === false\n\t\t\t\t\t&& event && event.stop) {\n\t\t\t\tevent.stop();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t},\n\n\tresponds: function(type) {\n\t\treturn !!(this._callbacks && this._callbacks[type]);\n\t},\n\n\tattach: '#on',\n\tdetach: '#off',\n\tfire: '#emit',\n\n\t_installEvents: function(install) {\n\t\tvar handlers = this._callbacks,\n\t\t\tkey = install ? 'install' : 'uninstall';\n\t\tfor (var type in handlers) {\n\t\t\tif (handlers[type].length > 0) {\n\t\t\t\tvar entry = this._eventTypes[type],\n\t\t\t\t\tfunc = entry[key];\n\t\t\t\tif (func)\n\t\t\t\t\tfunc.call(this, type);\n\t\t\t}\n\t\t}\n\t},\n\n\tstatics: {\n\t\tinject: function inject(src) {\n\t\t\tvar events = src._events;\n\t\t\tif (events) {\n\t\t\t\tvar types = {};\n\t\t\t\tBase.each(events, function(entry, key) {\n\t\t\t\t\tvar isString = typeof entry === 'string',\n\t\t\t\t\t\tname = isString ? entry : key,\n\t\t\t\t\t\tpart = Base.capitalize(name),\n\t\t\t\t\t\ttype = name.substring(2).toLowerCase();\n\t\t\t\t\ttypes[type] = isString ? {} : entry;\n\t\t\t\t\tname = '_' + name;\n\t\t\t\t\tsrc['get' + part] = function() {\n\t\t\t\t\t\treturn this[name];\n\t\t\t\t\t};\n\t\t\t\t\tsrc['set' + part] = function(func) {\n\t\t\t\t\t\tvar prev = this[name];\n\t\t\t\t\t\tif (prev)\n\t\t\t\t\t\t\tthis.off(type, prev);\n\t\t\t\t\t\tif (func)\n\t\t\t\t\t\t\tthis.on(type, func);\n\t\t\t\t\t\tthis[name] = func;\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tsrc._eventTypes = types;\n\t\t\t}\n\t\t\treturn inject.base.apply(this, arguments);\n\t\t}\n\t}\n};\n\nvar PaperScope = Base.extend({\n\t_class: 'PaperScope',\n\n\tinitialize: function PaperScope() {\n\t\tpaper = this;\n\t\tthis.settings = new Base({\n\t\t\tapplyMatrix: true,\n\t\t\thandleSize: 4,\n\t\t\thitTolerance: 0\n\t\t});\n\t\tthis.project = null;\n\t\tthis.projects = [];\n\t\tthis.tools = [];\n\t\tthis.palettes = [];\n\t\tthis._id = PaperScope._id++;\n\t\tPaperScope._scopes[this._id] = this;\n\t\tvar proto = PaperScope.prototype;\n\t\tif ( noCanvas ) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this.support) {\n\t\t\tvar ctx = CanvasProvider.getContext(1, 1);\n\t\t\tproto.support = {\n\t\t\t\tnativeDash: 'setLineDash' in ctx || 'mozDash' in ctx,\n\t\t\t\tnativeBlendModes: BlendMode.nativeModes\n\t\t\t};\n\t\t\tCanvasProvider.release(ctx);\n\t\t}\n\n\t\tif (!this.browser) {\n\t\t\tvar browser = proto.browser = {};\n\t\t\tnavigator.userAgent.toLowerCase().replace(\n\t\t\t\t/(opera|chrome|safari|webkit|firefox|msie|trident|atom)\\/?\\s*([.\\d]+)(?:.*version\\/([.\\d]+))?(?:.*rv\\:([.\\d]+))?/g,\n\t\t\t\tfunction(all, n, v1, v2, rv) {\n\t\t\t\t\tif (!browser.chrome) {\n\t\t\t\t\t\tvar v = n === 'opera' ? v2 : v1;\n\t\t\t\t\t\tif (n === 'trident') {\n\t\t\t\t\t\t\tv = rv;\n\t\t\t\t\t\t\tn = 'msie';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbrowser.version = v;\n\t\t\t\t\t\tbrowser.versionNumber = parseFloat(v);\n\t\t\t\t\t\tbrowser.name = n;\n\t\t\t\t\t\tbrowser[n] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (browser.chrome)\n\t\t\t\tdelete browser.webkit;\n\t\t\tif (browser.atom)\n\t\t\t\tdelete browser.chrome;\n\t\t}\n\t},\n\n\tversion: '0.9.22',\n\n\tgetView: function() {\n\t\treturn this.project && this.project.getView();\n\t},\n\n\tgetPaper: function() {\n\t\treturn this;\n\t},\n\n\texecute: function(code, url, options) {\n\t\tpaper.PaperScript.execute(code, this, url, options);\n\t\tView.updateFocus();\n\t},\n\n\tinstall: function(scope) {\n\t\tvar that = this;\n\t\tBase.each(['project', 'view', 'tool'], function(key) {\n\t\t\tBase.define(scope, key, {\n\t\t\t\tconfigurable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn that[key];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tfor (var key in this)\n\t\t\tif (!/^_/.test(key) && this[key])\n\t\t\t\tscope[key] = this[key];\n\t},\n\n\tsetup: function(element) {\n\t\tpaper = this;\n\t\tthis.project = new Project(element);\n\t\treturn this;\n\t},\n\n\tactivate: function() {\n\t\tpaper = this;\n\t},\n\n\tclear: function() {\n\t\tfor (var i = this.projects.length - 1; i >= 0; i--)\n\t\t\tthis.projects[i].remove();\n\t\tfor (var i = this.tools.length - 1; i >= 0; i--)\n\t\t\tthis.tools[i].remove();\n\t\tfor (var i = this.palettes.length - 1; i >= 0; i--)\n\t\t\tthis.palettes[i].remove();\n\t},\n\n\tremove: function() {\n\t\tthis.clear();\n\t\tdelete PaperScope._scopes[this._id];\n\t},\n\n\tstatics: new function() {\n\t\tfunction handleAttribute(name) {\n\t\t\tname += 'Attribute';\n\t\t\treturn function(el, attr) {\n\t\t\t\treturn el[name](attr) || el[name]('data-paper-' + attr);\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\t_scopes: {},\n\t\t\t_id: 0,\n\n\t\t\tget: function(id) {\n\t\t\t\treturn this._scopes[id] || null;\n\t\t\t},\n\n\t\t\tgetAttribute: handleAttribute('get'),\n\t\t\thasAttribute: handleAttribute('has')\n\t\t};\n\t}\n});\n\nvar PaperScopeItem = Base.extend(Emitter, {\n\n\tinitialize: function(activate) {\n\t\tthis._scope = paper;\n\t\tthis._index = this._scope[this._list].push(this) - 1;\n\t\tif (activate || !this._scope[this._reference])\n\t\t\tthis.activate();\n\t},\n\n\tactivate: function() {\n\t\tif (!this._scope)\n\t\t\treturn false;\n\t\tvar prev = this._scope[this._reference];\n\t\tif (prev && prev !== this)\n\t\t\tprev.emit('deactivate');\n\t\tthis._scope[this._reference] = this;\n\t\tthis.emit('activate', prev);\n\t\treturn true;\n\t},\n\n\tisActive: function() {\n\t\treturn this._scope[this._reference] === this;\n\t},\n\n\tremove: function() {\n\t\tif (this._index == null)\n\t\t\treturn false;\n\t\tBase.splice(this._scope[this._list], null, this._index, 1);\n\t\tif (this._scope[this._reference] == this)\n\t\t\tthis._scope[this._reference] = null;\n\t\tthis._scope = null;\n\t\treturn true;\n\t}\n});\n\nvar Formatter = Base.extend({\n\tinitialize: function(precision) {\n\t\tthis.precision = precision || 5;\n\t\tthis.multiplier = Math.pow(10, this.precision);\n\t},\n\n\tnumber: function(val) {\n\t\treturn Math.round(val * this.multiplier) / this.multiplier;\n\t},\n\n\tpair: function(val1, val2, separator) {\n\t\treturn this.number(val1) + (separator || ',') + this.number(val2);\n\t},\n\n\tpoint: function(val, separator) {\n\t\treturn this.number(val.x) + (separator || ',') + this.number(val.y);\n\t},\n\n\tsize: function(val, separator) {\n\t\treturn this.number(val.width) + (separator || ',')\n\t\t\t\t+ this.number(val.height);\n\t},\n\n\trectangle: function(val, separator) {\n\t\treturn this.point(val, separator) + (separator || ',')\n\t\t\t\t+ this.size(val, separator);\n\t}\n});\n\nFormatter.instance = new Formatter();\n\nvar Numerical = new function() {\n\n\tvar abscissas = [\n\t\t[  0.5773502691896257645091488],\n\t\t[0,0.7745966692414833770358531],\n\t\t[  0.3399810435848562648026658,0.8611363115940525752239465],\n\t\t[0,0.5384693101056830910363144,0.9061798459386639927976269],\n\t\t[  0.2386191860831969086305017,0.6612093864662645136613996,0.9324695142031520278123016],\n\t\t[0,0.4058451513773971669066064,0.7415311855993944398638648,0.9491079123427585245261897],\n\t\t[  0.1834346424956498049394761,0.5255324099163289858177390,0.7966664774136267395915539,0.9602898564975362316835609],\n\t\t[0,0.3242534234038089290385380,0.6133714327005903973087020,0.8360311073266357942994298,0.9681602395076260898355762],\n\t\t[  0.1488743389816312108848260,0.4333953941292471907992659,0.6794095682990244062343274,0.8650633666889845107320967,0.9739065285171717200779640],\n\t\t[0,0.2695431559523449723315320,0.5190961292068118159257257,0.7301520055740493240934163,0.8870625997680952990751578,0.9782286581460569928039380],\n\t\t[  0.1252334085114689154724414,0.3678314989981801937526915,0.5873179542866174472967024,0.7699026741943046870368938,0.9041172563704748566784659,0.9815606342467192506905491],\n\t\t[0,0.2304583159551347940655281,0.4484927510364468528779129,0.6423493394403402206439846,0.8015780907333099127942065,0.9175983992229779652065478,0.9841830547185881494728294],\n\t\t[  0.1080549487073436620662447,0.3191123689278897604356718,0.5152486363581540919652907,0.6872929048116854701480198,0.8272013150697649931897947,0.9284348836635735173363911,0.9862838086968123388415973],\n\t\t[0,0.2011940939974345223006283,0.3941513470775633698972074,0.5709721726085388475372267,0.7244177313601700474161861,0.8482065834104272162006483,0.9372733924007059043077589,0.9879925180204854284895657],\n\t\t[  0.0950125098376374401853193,0.2816035507792589132304605,0.4580167776572273863424194,0.6178762444026437484466718,0.7554044083550030338951012,0.8656312023878317438804679,0.9445750230732325760779884,0.9894009349916499325961542]\n\t];\n\n\tvar weights = [\n\t\t[1],\n\t\t[0.8888888888888888888888889,0.5555555555555555555555556],\n\t\t[0.6521451548625461426269361,0.3478548451374538573730639],\n\t\t[0.5688888888888888888888889,0.4786286704993664680412915,0.2369268850561890875142640],\n\t\t[0.4679139345726910473898703,0.3607615730481386075698335,0.1713244923791703450402961],\n\t\t[0.4179591836734693877551020,0.3818300505051189449503698,0.2797053914892766679014678,0.1294849661688696932706114],\n\t\t[0.3626837833783619829651504,0.3137066458778872873379622,0.2223810344533744705443560,0.1012285362903762591525314],\n\t\t[0.3302393550012597631645251,0.3123470770400028400686304,0.2606106964029354623187429,0.1806481606948574040584720,0.0812743883615744119718922],\n\t\t[0.2955242247147528701738930,0.2692667193099963550912269,0.2190863625159820439955349,0.1494513491505805931457763,0.0666713443086881375935688],\n\t\t[0.2729250867779006307144835,0.2628045445102466621806889,0.2331937645919904799185237,0.1862902109277342514260976,0.1255803694649046246346943,0.0556685671161736664827537],\n\t\t[0.2491470458134027850005624,0.2334925365383548087608499,0.2031674267230659217490645,0.1600783285433462263346525,0.1069393259953184309602547,0.0471753363865118271946160],\n\t\t[0.2325515532308739101945895,0.2262831802628972384120902,0.2078160475368885023125232,0.1781459807619457382800467,0.1388735102197872384636018,0.0921214998377284479144218,0.0404840047653158795200216],\n\t\t[0.2152638534631577901958764,0.2051984637212956039659241,0.1855383974779378137417166,0.1572031671581935345696019,0.1215185706879031846894148,0.0801580871597602098056333,0.0351194603317518630318329],\n\t\t[0.2025782419255612728806202,0.1984314853271115764561183,0.1861610000155622110268006,0.1662692058169939335532009,0.1395706779261543144478048,0.1071592204671719350118695,0.0703660474881081247092674,0.0307532419961172683546284],\n\t\t[0.1894506104550684962853967,0.1826034150449235888667637,0.1691565193950025381893121,0.1495959888165767320815017,0.1246289712555338720524763,0.0951585116824927848099251,0.0622535239386478928628438,0.0271524594117540948517806]\n\t];\n\n\tvar abs = Math.abs,\n\t\tsqrt = Math.sqrt,\n\t\tpow = Math.pow,\n\t\tTOLERANCE = 1e-6,\n\t\tEPSILON = 1e-12,\n\t\tMACHINE_EPSILON = 1.12e-16;\n\n\treturn {\n\t\tTOLERANCE: TOLERANCE,\n\t\tEPSILON: EPSILON,\n\t\tMACHINE_EPSILON: MACHINE_EPSILON,\n\t\tKAPPA: 4 * (sqrt(2) - 1) / 3,\n\n\t\tisZero: function(val) {\n\t\t\treturn abs(val) <= EPSILON;\n\t\t},\n\n\t\tintegrate: function(f, a, b, n) {\n\t\t\tvar x = abscissas[n - 2],\n\t\t\t\tw = weights[n - 2],\n\t\t\t\tA = (b - a) * 0.5,\n\t\t\t\tB = A + a,\n\t\t\t\ti = 0,\n\t\t\t\tm = (n + 1) >> 1,\n\t\t\t\tsum = n & 1 ? w[i++] * f(B) : 0;\n\t\t\twhile (i < m) {\n\t\t\t\tvar Ax = A * x[i];\n\t\t\t\tsum += w[i++] * (f(B + Ax) + f(B - Ax));\n\t\t\t}\n\t\t\treturn A * sum;\n\t\t},\n\n\t\tfindRoot: function(f, df, x, a, b, n, tolerance) {\n\t\t\tfor (var i = 0; i < n; i++) {\n\t\t\t\tvar fx = f(x),\n\t\t\t\t\tdx = fx / df(x),\n\t\t\t\t\tnx = x - dx;\n\t\t\t\tif (abs(dx) < tolerance)\n\t\t\t\t\treturn nx;\n\t\t\t\tif (fx > 0) {\n\t\t\t\t\tb = x;\n\t\t\t\t\tx = nx <= a ? (a + b) * 0.5 : nx;\n\t\t\t\t} else {\n\t\t\t\t\ta = x;\n\t\t\t\t\tx = nx >= b ? (a + b) * 0.5 : nx;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn x;\n\t\t},\n\n\t\tsolveQuadratic: function(a, b, c, roots, min, max) {\n\t\t\tvar count = 0,\n\t\t\t\tx1, x2 = Infinity,\n\t\t\t\tB = b,\n\t\t\t\tD;\n\t\t\tb /= 2;\n\t\t\tD = b * b - a * c;\n\t\t\tif (abs(D) < MACHINE_EPSILON) {\n\t\t\t\tvar pow = Math.pow,\n\t\t\t\t\tgmC = pow(abs(a*b*c), 1/3);\n\t\t\t\tif (gmC < 1e-8) {\n\t\t\t\t\t/*\n\t\t\t\t\t * we multiply with a factor to normalize the\n\t\t\t\t\t * coefficients. The factor is just the nearest exponent\n\t\t\t\t\t * of 10, big enough to raise all the coefficients to\n\t\t\t\t\t * nearly [-1, +1] range.\n\t\t\t\t\t */\n\t\t\t\t\tvar mult = pow(10, abs(\n\t\t\t\t\t\tMath.floor(Math.log(gmC) * Math.LOG10E)));\n\t\t\t\t\tif (!isFinite(mult))\n\t\t\t\t\t\tmult = 0;\n\t\t\t\t\ta *= mult;\n\t\t\t\t\tb *= mult;\n\t\t\t\t\tc *= mult;\n\t\t\t\t\tD = b * b - a * c;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (abs(a) < MACHINE_EPSILON) {\n\t\t\t\tif (abs(B) < MACHINE_EPSILON)\n\t\t\t\t\treturn abs(c) < MACHINE_EPSILON ? -1 : 0;\n\t\t\t\tx1 = -c / B;\n\t\t\t} else {\n\t\t\t\tif (D >= -MACHINE_EPSILON) {\n\t\t\t\t\tD = D < 0 ? 0 : D;\n\t\t\t\t\tvar R = sqrt(D);\n\t\t\t\t\tif (b >= MACHINE_EPSILON && b <= MACHINE_EPSILON) {\n\t\t\t\t\t\tx1 = abs(a) >= abs(c) ? R / a : -c / R;\n\t\t\t\t\t\tx2 = -x1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar q = -(b + (b < 0 ? -1 : 1) * R);\n\t\t\t\t\t\tx1 = q / a;\n\t\t\t\t\t\tx2 = c / q;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isFinite(x1) && (min == null || x1 >= min && x1 <= max))\n\t\t\t\troots[count++] = x1;\n\t\t\tif (x2 !== x1\n\t\t\t\t\t&& isFinite(x2) && (min == null || x2 >= min && x2 <= max))\n\t\t\t\troots[count++] = x2;\n\t\t\treturn count;\n\t\t},\n\n\t\tsolveCubic: function(a, b, c, d, roots, min, max) {\n\t\t\tvar x, b1, c2, count = 0;\n\t\t\tif (a === 0) {\n\t\t\t\ta = b;\n\t\t\t\tb1 = c;\n\t\t\t\tc2 = d;\n\t\t\t\tx = Infinity;\n\t\t\t} else if (d === 0) {\n\t\t\t\tb1 = b;\n\t\t\t\tc2 = c;\n\t\t\t\tx = 0;\n\t\t\t} else {\n\t\t\t\tvar ec = 1 + MACHINE_EPSILON,\n\t\t\t\t\tx0, q, qd, t, r, s, tmp;\n\t\t\t\tx = -(b / a) / 3;\n\t\t\t\ttmp = a * x,\n\t\t\t\tb1 = tmp + b,\n\t\t\t\tc2 = b1 * x + c,\n\t\t\t\tqd = (tmp + b1) * x + c2,\n\t\t\t\tq = c2 * x + d;\n\t\t\t\tt = q /a;\n\t\t\t\tr = pow(abs(t), 1/3);\n\t\t\t\ts = t < 0 ? -1 : 1;\n\t\t\t\tt = -qd / a;\n\t\t\t\tr = t > 0 ? 1.3247179572 * Math.max(r, sqrt(t)) : r;\n\t\t\t\tx0 = x - s * r;\n\t\t\t\tif (x0 !== x) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tx = x0;\n\t\t\t\t\t\ttmp = a * x,\n\t\t\t\t\t\tb1 = tmp + b,\n\t\t\t\t\t\tc2 = b1 * x + c,\n\t\t\t\t\t\tqd = (tmp + b1) * x + c2,\n\t\t\t\t\t\tq = c2 * x + d;\n\t\t\t\t\t\tx0 = qd === 0 ? x : x - q / qd / ec;\n\t\t\t\t\t\tif (x0 === x) {\n\t\t\t\t\t\t\tx = x0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (s * x0 > s * x);\n\t\t\t\t\tif (abs(a) * x * x > abs(d / x)) {\n\t\t\t\t\t\tc2 = -d / x;\n\t\t\t\t\t\tb1 = (c2 - c) / x;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar count = Numerical.solveQuadratic(a, b1, c2, roots, min, max);\n\t\t\tif (isFinite(x) && (count === 0 || x !== roots[count - 1])\n\t\t\t\t\t&& (min == null || x >= min && x <= max))\n\t\t\t\troots[count++] = x;\n\t\t\treturn count;\n\t\t}\n\t};\n};\n\nvar Point = Base.extend({\n\t_class: 'Point',\n\t_readIndex: true,\n\n\tinitialize: function Point(arg0, arg1) {\n\t\tvar type = typeof arg0;\n\t\tif (type === 'number') {\n\t\t\tvar hasY = typeof arg1 === 'number';\n\t\t\tthis.x = arg0;\n\t\t\tthis.y = hasY ? arg1 : arg0;\n\t\t\tif (this.__read)\n\t\t\t\tthis.__read = hasY ? 2 : 1;\n\t\t} else if (type === 'undefined' || arg0 === null) {\n\t\t\tthis.x = this.y = 0;\n\t\t\tif (this.__read)\n\t\t\t\tthis.__read = arg0 === null ? 1 : 0;\n\t\t} else {\n\t\t\tif (Array.isArray(arg0)) {\n\t\t\t\tthis.x = arg0[0];\n\t\t\t\tthis.y = arg0.length > 1 ? arg0[1] : arg0[0];\n\t\t\t} else if (arg0.x != null) {\n\t\t\t\tthis.x = arg0.x;\n\t\t\t\tthis.y = arg0.y;\n\t\t\t} else if (arg0.width != null) {\n\t\t\t\tthis.x = arg0.width;\n\t\t\t\tthis.y = arg0.height;\n\t\t\t} else if (arg0.angle != null) {\n\t\t\t\tthis.x = arg0.length;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.setAngle(arg0.angle);\n\t\t\t} else {\n\t\t\t\tthis.x = this.y = 0;\n\t\t\t\tif (this.__read)\n\t\t\t\t\tthis.__read = 0;\n\t\t\t}\n\t\t\tif (this.__read)\n\t\t\t\tthis.__read = 1;\n\t\t}\n\t},\n\n\tset: function(x, y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn this;\n\t},\n\n\tequals: function(point) {\n\t\treturn this === point || point\n\t\t\t\t&& (this.x === point.x && this.y === point.y\n\t\t\t\t\t|| Array.isArray(point)\n\t\t\t\t\t\t&& this.x === point[0] && this.y === point[1])\n\t\t\t\t|| false;\n\t},\n\n\tclone: function() {\n\t\treturn new Point(this.x, this.y);\n\t},\n\n\ttoString: function() {\n\t\tvar f = Formatter.instance;\n\t\treturn '{ x: ' + f.number(this.x) + ', y: ' + f.number(this.y) + ' }';\n\t},\n\n\t_serialize: function(options) {\n\t\tvar f = options.formatter;\n\t\treturn [f.number(this.x), f.number(this.y)];\n\t},\n\n\tgetLength: function() {\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t},\n\n\tsetLength: function(length) {\n\t\tif (this.isZero()) {\n\t\t\tvar angle = this._angle || 0;\n\t\t\tthis.set(\n\t\t\t\tMath.cos(angle) * length,\n\t\t\t\tMath.sin(angle) * length\n\t\t\t);\n\t\t} else {\n\t\t\tvar scale = length / this.getLength();\n\t\t\tif (Numerical.isZero(scale))\n\t\t\t\tthis.getAngle();\n\t\t\tthis.set(\n\t\t\t\tthis.x * scale,\n\t\t\t\tthis.y * scale\n\t\t\t);\n\t\t}\n\t},\n\tgetAngle: function() {\n\t\treturn this.getAngleInRadians.apply(this, arguments) * 180 / Math.PI;\n\t},\n\n\tsetAngle: function(angle) {\n\t\tthis.setAngleInRadians.call(this, angle * Math.PI / 180);\n\t},\n\n\tgetAngleInDegrees: '#getAngle',\n\tsetAngleInDegrees: '#setAngle',\n\n\tgetAngleInRadians: function() {\n\t\tif (!arguments.length) {\n\t\t\treturn this.isZero()\n\t\t\t\t\t? this._angle || 0\n\t\t\t\t\t: this._angle = Math.atan2(this.y, this.x);\n\t\t} else {\n\t\t\tvar point = Point.read(arguments),\n\t\t\t\tdiv = this.getLength() * point.getLength();\n\t\t\tif (Numerical.isZero(div)) {\n\t\t\t\treturn NaN;\n\t\t\t} else {\n\t\t\t\tvar a = this.dot(point) / div;\n\t\t\t\treturn Math.acos(a < -1 ? -1 : a > 1 ? 1 : a);\n\t\t\t}\n\t\t}\n\t},\n\n\tsetAngleInRadians: function(angle) {\n\t\tthis._angle = angle;\n\t\tif (!this.isZero()) {\n\t\t\tvar length = this.getLength();\n\t\t\tthis.set(\n\t\t\t\tMath.cos(angle) * length,\n\t\t\t\tMath.sin(angle) * length\n\t\t\t);\n\t\t}\n\t},\n\n\tgetQuadrant: function() {\n\t\treturn this.x >= 0 ? this.y >= 0 ? 1 : 4 : this.y >= 0 ? 2 : 3;\n\t}\n}, {\n\tbeans: false,\n\n\tgetDirectedAngle: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn Math.atan2(this.cross(point), this.dot(point)) * 180 / Math.PI;\n\t},\n\n\tgetDistance: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tx = point.x - this.x,\n\t\t\ty = point.y - this.y,\n\t\t\td = x * x + y * y,\n\t\t\tsquared = Base.read(arguments);\n\t\treturn squared ? d : Math.sqrt(d);\n\t},\n\n\tnormalize: function(length) {\n\t\tif (length === undefined)\n\t\t\tlength = 1;\n\t\tvar current = this.getLength(),\n\t\t\tscale = current !== 0 ? length / current : 0,\n\t\t\tpoint = new Point(this.x * scale, this.y * scale);\n\t\tif (scale >= 0)\n\t\t\tpoint._angle = this._angle;\n\t\treturn point;\n\t},\n\n\trotate: function(angle, center) {\n\t\tif (angle === 0)\n\t\t\treturn this.clone();\n\t\tangle = angle * Math.PI / 180;\n\t\tvar point = center ? this.subtract(center) : this,\n\t\t\ts = Math.sin(angle),\n\t\t\tc = Math.cos(angle);\n\t\tpoint = new Point(\n\t\t\tpoint.x * c - point.y * s,\n\t\t\tpoint.x * s + point.y * c\n\t\t);\n\t\treturn center ? point.add(center) : point;\n\t},\n\n\ttransform: function(matrix) {\n\t\treturn matrix ? matrix._transformPoint(this) : this;\n\t},\n\n\tadd: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x + point.x, this.y + point.y);\n\t},\n\n\tsubtract: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x - point.x, this.y - point.y);\n\t},\n\n\tmultiply: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x * point.x, this.y * point.y);\n\t},\n\n\tdivide: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x / point.x, this.y / point.y);\n\t},\n\n\tmodulo: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn new Point(this.x % point.x, this.y % point.y);\n\t},\n\n\tnegate: function() {\n\t\treturn new Point(-this.x, -this.y);\n\t},\n\n\tisInside: function() {\n\t\treturn Rectangle.read(arguments).contains(this);\n\t},\n\n\tisClose: function(point, tolerance) {\n\t\treturn this.getDistance(point) < tolerance;\n\t},\n\n\tisColinear: function(point) {\n\t\treturn Math.abs(this.cross(point)) < 1e-12;\n\t},\n\n\tisOrthogonal: function(point) {\n\t\treturn Math.abs(this.dot(point)) < 1e-12;\n\t},\n\n\tisZero: function() {\n\t\treturn Numerical.isZero(this.x) && Numerical.isZero(this.y);\n\t},\n\n\tisNaN: function() {\n\t\treturn isNaN(this.x) || isNaN(this.y);\n\t},\n\n\tdot: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn this.x * point.x + this.y * point.y;\n\t},\n\n\tcross: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn this.x * point.y - this.y * point.x;\n\t},\n\n\tproject: function() {\n\t\tvar point = Point.read(arguments);\n\t\tif (point.isZero()) {\n\t\t\treturn new Point(0, 0);\n\t\t} else {\n\t\t\tvar scale = this.dot(point) / point.dot(point);\n\t\t\treturn new Point(\n\t\t\t\tpoint.x * scale,\n\t\t\t\tpoint.y * scale\n\t\t\t);\n\t\t}\n\t},\n\n\tstatics: {\n\t\tmin: function() {\n\t\t\tvar point1 = Point.read(arguments),\n\t\t\t\tpoint2 = Point.read(arguments);\n\t\t\treturn new Point(\n\t\t\t\tMath.min(point1.x, point2.x),\n\t\t\t\tMath.min(point1.y, point2.y)\n\t\t\t);\n\t\t},\n\n\t\tmax: function() {\n\t\t\tvar point1 = Point.read(arguments),\n\t\t\t\tpoint2 = Point.read(arguments);\n\t\t\treturn new Point(\n\t\t\t\tMath.max(point1.x, point2.x),\n\t\t\t\tMath.max(point1.y, point2.y)\n\t\t\t);\n\t\t},\n\n\t\trandom: function() {\n\t\t\treturn new Point(Math.random(), Math.random());\n\t\t}\n\t}\n}, Base.each(['round', 'ceil', 'floor', 'abs'], function(name) {\n\tvar op = Math[name];\n\tthis[name] = function() {\n\t\treturn new Point(op(this.x), op(this.y));\n\t};\n}, {}));\n\nvar LinkedPoint = Point.extend({\n\tinitialize: function Point(x, y, owner, setter) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._owner = owner;\n\t\tthis._setter = setter;\n\t},\n\n\tset: function(x, y, _dontNotify) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tif (!_dontNotify)\n\t\t\tthis._owner[this._setter](this);\n\t\treturn this;\n\t},\n\n\tgetX: function() {\n\t\treturn this._x;\n\t},\n\n\tsetX: function(x) {\n\t\tthis._x = x;\n\t\tthis._owner[this._setter](this);\n\t},\n\n\tgetY: function() {\n\t\treturn this._y;\n\t},\n\n\tsetY: function(y) {\n\t\tthis._y = y;\n\t\tthis._owner[this._setter](this);\n\t}\n});\n\nvar Size = Base.extend({\n\t_class: 'Size',\n\t_readIndex: true,\n\n\tinitialize: function Size(arg0, arg1) {\n\t\tvar type = typeof arg0;\n\t\tif (type === 'number') {\n\t\t\tvar hasHeight = typeof arg1 === 'number';\n\t\t\tthis.width = arg0;\n\t\t\tthis.height = hasHeight ? arg1 : arg0;\n\t\t\tif (this.__read)\n\t\t\t\tthis.__read = hasHeight ? 2 : 1;\n\t\t} else if (type === 'undefined' || arg0 === null) {\n\t\t\tthis.width = this.height = 0;\n\t\t\tif (this.__read)\n\t\t\t\tthis.__read = arg0 === null ? 1 : 0;\n\t\t} else {\n\t\t\tif (Array.isArray(arg0)) {\n\t\t\t\tthis.width = arg0[0];\n\t\t\t\tthis.height = arg0.length > 1 ? arg0[1] : arg0[0];\n\t\t\t} else if (arg0.width != null) {\n\t\t\t\tthis.width = arg0.width;\n\t\t\t\tthis.height = arg0.height;\n\t\t\t} else if (arg0.x != null) {\n\t\t\t\tthis.width = arg0.x;\n\t\t\t\tthis.height = arg0.y;\n\t\t\t} else {\n\t\t\t\tthis.width = this.height = 0;\n\t\t\t\tif (this.__read)\n\t\t\t\t\tthis.__read = 0;\n\t\t\t}\n\t\t\tif (this.__read)\n\t\t\t\tthis.__read = 1;\n\t\t}\n\t},\n\n\tset: function(width, height) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\treturn this;\n\t},\n\n\tequals: function(size) {\n\t\treturn size === this || size && (this.width === size.width\n\t\t\t\t&& this.height === size.height\n\t\t\t\t|| Array.isArray(size) && this.width === size[0]\n\t\t\t\t\t&& this.height === size[1]) || false;\n\t},\n\n\tclone: function() {\n\t\treturn new Size(this.width, this.height);\n\t},\n\n\ttoString: function() {\n\t\tvar f = Formatter.instance;\n\t\treturn '{ width: ' + f.number(this.width)\n\t\t\t\t+ ', height: ' + f.number(this.height) + ' }';\n\t},\n\n\t_serialize: function(options) {\n\t\tvar f = options.formatter;\n\t\treturn [f.number(this.width),\n\t\t\t\tf.number(this.height)];\n\t},\n\n\tadd: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width + size.width, this.height + size.height);\n\t},\n\n\tsubtract: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width - size.width, this.height - size.height);\n\t},\n\n\tmultiply: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width * size.width, this.height * size.height);\n\t},\n\n\tdivide: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width / size.width, this.height / size.height);\n\t},\n\n\tmodulo: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn new Size(this.width % size.width, this.height % size.height);\n\t},\n\n\tnegate: function() {\n\t\treturn new Size(-this.width, -this.height);\n\t},\n\n\tisZero: function() {\n\t\treturn Numerical.isZero(this.width) && Numerical.isZero(this.height);\n\t},\n\n\tisNaN: function() {\n\t\treturn isNaN(this.width) || isNaN(this.height);\n\t},\n\n\tstatics: {\n\t\tmin: function(size1, size2) {\n\t\t\treturn new Size(\n\t\t\t\tMath.min(size1.width, size2.width),\n\t\t\t\tMath.min(size1.height, size2.height));\n\t\t},\n\n\t\tmax: function(size1, size2) {\n\t\t\treturn new Size(\n\t\t\t\tMath.max(size1.width, size2.width),\n\t\t\t\tMath.max(size1.height, size2.height));\n\t\t},\n\n\t\trandom: function() {\n\t\t\treturn new Size(Math.random(), Math.random());\n\t\t}\n\t}\n}, Base.each(['round', 'ceil', 'floor', 'abs'], function(name) {\n\tvar op = Math[name];\n\tthis[name] = function() {\n\t\treturn new Size(op(this.width), op(this.height));\n\t};\n}, {}));\n\nvar LinkedSize = Size.extend({\n\tinitialize: function Size(width, height, owner, setter) {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tthis._owner = owner;\n\t\tthis._setter = setter;\n\t},\n\n\tset: function(width, height, _dontNotify) {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tif (!_dontNotify)\n\t\t\tthis._owner[this._setter](this);\n\t\treturn this;\n\t},\n\n\tgetWidth: function() {\n\t\treturn this._width;\n\t},\n\n\tsetWidth: function(width) {\n\t\tthis._width = width;\n\t\tthis._owner[this._setter](this);\n\t},\n\n\tgetHeight: function() {\n\t\treturn this._height;\n\t},\n\n\tsetHeight: function(height) {\n\t\tthis._height = height;\n\t\tthis._owner[this._setter](this);\n\t}\n});\n\nvar Rectangle = Base.extend({\n\t_class: 'Rectangle',\n\t_readIndex: true,\n\tbeans: true,\n\n\tinitialize: function Rectangle(arg0, arg1, arg2, arg3) {\n\t\tvar type = typeof arg0,\n\t\t\tread = 0;\n\t\tif (type === 'number') {\n\t\t\tthis.x = arg0;\n\t\t\tthis.y = arg1;\n\t\t\tthis.width = arg2;\n\t\t\tthis.height = arg3;\n\t\t\tread = 4;\n\t\t} else if (type === 'undefined' || arg0 === null) {\n\t\t\tthis.x = this.y = this.width = this.height = 0;\n\t\t\tread = arg0 === null ? 1 : 0;\n\t\t} else if (arguments.length === 1) {\n\t\t\tif (Array.isArray(arg0)) {\n\t\t\t\tthis.x = arg0[0];\n\t\t\t\tthis.y = arg0[1];\n\t\t\t\tthis.width = arg0[2];\n\t\t\t\tthis.height = arg0[3];\n\t\t\t\tread = 1;\n\t\t\t} else if (arg0.x !== undefined || arg0.width !== undefined) {\n\t\t\t\tthis.x = arg0.x || 0;\n\t\t\t\tthis.y = arg0.y || 0;\n\t\t\t\tthis.width = arg0.width || 0;\n\t\t\t\tthis.height = arg0.height || 0;\n\t\t\t\tread = 1;\n\t\t\t} else if (arg0.from === undefined && arg0.to === undefined) {\n\t\t\t\tthis.x = this.y = this.width = this.height = 0;\n\t\t\t\tthis._set(arg0);\n\t\t\t\tread = 1;\n\t\t\t}\n\t\t}\n\t\tif (!read) {\n\t\t\tvar point = Point.readNamed(arguments, 'from'),\n\t\t\t\tnext = Base.peek(arguments);\n\t\t\tthis.x = point.x;\n\t\t\tthis.y = point.y;\n\t\t\tif (next && next.x !== undefined || Base.hasNamed(arguments, 'to')) {\n\t\t\t\tvar to = Point.readNamed(arguments, 'to');\n\t\t\t\tthis.width = to.x - point.x;\n\t\t\t\tthis.height = to.y - point.y;\n\t\t\t\tif (this.width < 0) {\n\t\t\t\t\tthis.x = to.x;\n\t\t\t\t\tthis.width = -this.width;\n\t\t\t\t}\n\t\t\t\tif (this.height < 0) {\n\t\t\t\t\tthis.y = to.y;\n\t\t\t\t\tthis.height = -this.height;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar size = Size.read(arguments);\n\t\t\t\tthis.width = size.width;\n\t\t\t\tthis.height = size.height;\n\t\t\t}\n\t\t\tread = arguments.__index;\n\t\t}\n\t\tif (this.__read)\n\t\t\tthis.__read = read;\n\t},\n\n\tset: function(x, y, width, height) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\treturn this;\n\t},\n\n\tclone: function() {\n\t\treturn new Rectangle(this.x, this.y, this.width, this.height);\n\t},\n\n\tequals: function(rect) {\n\t\tvar rt = Base.isPlainValue(rect)\n\t\t\t\t? Rectangle.read(arguments)\n\t\t\t\t: rect;\n\t\treturn rt === this\n\t\t\t\t|| rt && this.x === rt.x && this.y === rt.y\n\t\t\t\t\t&& this.width === rt.width && this.height === rt.height\n\t\t\t\t|| false;\n\t},\n\n\ttoString: function() {\n\t\tvar f = Formatter.instance;\n\t\treturn '{ x: ' + f.number(this.x)\n\t\t\t\t+ ', y: ' + f.number(this.y)\n\t\t\t\t+ ', width: ' + f.number(this.width)\n\t\t\t\t+ ', height: ' + f.number(this.height)\n\t\t\t\t+ ' }';\n\t},\n\n\t_serialize: function(options) {\n\t\tvar f = options.formatter;\n\t\treturn [f.number(this.x),\n\t\t\t\tf.number(this.y),\n\t\t\t\tf.number(this.width),\n\t\t\t\tf.number(this.height)];\n\t},\n\n\tgetPoint: function(_dontLink) {\n\t\tvar ctor = _dontLink ? Point : LinkedPoint;\n\t\treturn new ctor(this.x, this.y, this, 'setPoint');\n\t},\n\n\tsetPoint: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis.x = point.x;\n\t\tthis.y = point.y;\n\t},\n\n\tgetSize: function(_dontLink) {\n\t\tvar ctor = _dontLink ? Size : LinkedSize;\n\t\treturn new ctor(this.width, this.height, this, 'setSize');\n\t},\n\n\tsetSize: function() {\n\t\tvar size = Size.read(arguments);\n\t\tif (this._fixX)\n\t\t\tthis.x += (this.width - size.width) * this._fixX;\n\t\tif (this._fixY)\n\t\t\tthis.y += (this.height - size.height) * this._fixY;\n\t\tthis.width = size.width;\n\t\tthis.height = size.height;\n\t\tthis._fixW = 1;\n\t\tthis._fixH = 1;\n\t},\n\n\tgetLeft: function() {\n\t\treturn this.x;\n\t},\n\n\tsetLeft: function(left) {\n\t\tif (!this._fixW)\n\t\t\tthis.width -= left - this.x;\n\t\tthis.x = left;\n\t\tthis._fixX = 0;\n\t},\n\n\tgetTop: function() {\n\t\treturn this.y;\n\t},\n\n\tsetTop: function(top) {\n\t\tif (!this._fixH)\n\t\t\tthis.height -= top - this.y;\n\t\tthis.y = top;\n\t\tthis._fixY = 0;\n\t},\n\n\tgetRight: function() {\n\t\treturn this.x + this.width;\n\t},\n\n\tsetRight: function(right) {\n\t\tif (this._fixX !== undefined && this._fixX !== 1)\n\t\t\tthis._fixW = 0;\n\t\tif (this._fixW)\n\t\t\tthis.x = right - this.width;\n\t\telse\n\t\t\tthis.width = right - this.x;\n\t\tthis._fixX = 1;\n\t},\n\n\tgetBottom: function() {\n\t\treturn this.y + this.height;\n\t},\n\n\tsetBottom: function(bottom) {\n\t\tif (this._fixY !== undefined && this._fixY !== 1)\n\t\t\tthis._fixH = 0;\n\t\tif (this._fixH)\n\t\t\tthis.y = bottom - this.height;\n\t\telse\n\t\t\tthis.height = bottom - this.y;\n\t\tthis._fixY = 1;\n\t},\n\n\tgetCenterX: function() {\n\t\treturn this.x + this.width * 0.5;\n\t},\n\n\tsetCenterX: function(x) {\n\t\tthis.x = x - this.width * 0.5;\n\t\tthis._fixX = 0.5;\n\t},\n\n\tgetCenterY: function() {\n\t\treturn this.y + this.height * 0.5;\n\t},\n\n\tsetCenterY: function(y) {\n\t\tthis.y = y - this.height * 0.5;\n\t\tthis._fixY = 0.5;\n\t},\n\n\tgetCenter: function(_dontLink) {\n\t\tvar ctor = _dontLink ? Point : LinkedPoint;\n\t\treturn new ctor(this.getCenterX(), this.getCenterY(), this, 'setCenter');\n\t},\n\n\tsetCenter: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis.setCenterX(point.x);\n\t\tthis.setCenterY(point.y);\n\t\treturn this;\n\t},\n\n\tgetArea: function() {\n\t\treturn this.width * this.height;\n\t},\n\n\tisEmpty: function() {\n\t\treturn this.width === 0 || this.height === 0;\n\t},\n\n\tcontains: function(arg) {\n\t\treturn arg && arg.width !== undefined\n\t\t\t\t|| (Array.isArray(arg) ? arg : arguments).length == 4\n\t\t\t\t? this._containsRectangle(Rectangle.read(arguments))\n\t\t\t\t: this._containsPoint(Point.read(arguments));\n\t},\n\n\t_containsPoint: function(point) {\n\t\tvar x = point.x,\n\t\t\ty = point.y;\n\t\treturn x >= this.x && y >= this.y\n\t\t\t\t&& x <= this.x + this.width\n\t\t\t\t&& y <= this.y + this.height;\n\t},\n\n\t_containsRectangle: function(rect) {\n\t\tvar x = rect.x,\n\t\t\ty = rect.y;\n\t\treturn x >= this.x && y >= this.y\n\t\t\t\t&& x + rect.width <= this.x + this.width\n\t\t\t\t&& y + rect.height <= this.y + this.height;\n\t},\n\n\tintersects: function() {\n\t\tvar rect = Rectangle.read(arguments);\n\t\treturn rect.x + rect.width > this.x\n\t\t\t\t&& rect.y + rect.height > this.y\n\t\t\t\t&& rect.x < this.x + this.width\n\t\t\t\t&& rect.y < this.y + this.height;\n\t},\n\n\ttouches: function() {\n\t\tvar rect = Rectangle.read(arguments);\n\t\treturn rect.x + rect.width >= this.x\n\t\t\t\t&& rect.y + rect.height >= this.y\n\t\t\t\t&& rect.x <= this.x + this.width\n\t\t\t\t&& rect.y <= this.y + this.height;\n\t},\n\n\tintersect: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tx1 = Math.max(this.x, rect.x),\n\t\t\ty1 = Math.max(this.y, rect.y),\n\t\t\tx2 = Math.min(this.x + this.width, rect.x + rect.width),\n\t\t\ty2 = Math.min(this.y + this.height, rect.y + rect.height);\n\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t},\n\n\tunite: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tx1 = Math.min(this.x, rect.x),\n\t\t\ty1 = Math.min(this.y, rect.y),\n\t\t\tx2 = Math.max(this.x + this.width, rect.x + rect.width),\n\t\t\ty2 = Math.max(this.y + this.height, rect.y + rect.height);\n\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t},\n\n\tinclude: function() {\n\t\tvar point = Point.read(arguments);\n\t\tvar x1 = Math.min(this.x, point.x),\n\t\t\ty1 = Math.min(this.y, point.y),\n\t\t\tx2 = Math.max(this.x + this.width, point.x),\n\t\t\ty2 = Math.max(this.y + this.height, point.y);\n\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t},\n\n\texpand: function() {\n\t\tvar amount = Size.read(arguments),\n\t\t\thor = amount.width,\n\t\t\tver = amount.height;\n\t\treturn new Rectangle(this.x - hor / 2, this.y - ver / 2,\n\t\t\t\tthis.width + hor, this.height + ver);\n\t},\n\n\tscale: function(hor, ver) {\n\t\treturn this.expand(this.width * hor - this.width,\n\t\t\t\tthis.height * (ver === undefined ? hor : ver) - this.height);\n\t}\n}, Base.each([\n\t\t['Top', 'Left'], ['Top', 'Right'],\n\t\t['Bottom', 'Left'], ['Bottom', 'Right'],\n\t\t['Left', 'Center'], ['Top', 'Center'],\n\t\t['Right', 'Center'], ['Bottom', 'Center']\n\t],\n\tfunction(parts, index) {\n\t\tvar part = parts.join('');\n\t\tvar xFirst = /^[RL]/.test(part);\n\t\tif (index >= 4)\n\t\t\tparts[1] += xFirst ? 'Y' : 'X';\n\t\tvar x = parts[xFirst ? 0 : 1],\n\t\t\ty = parts[xFirst ? 1 : 0],\n\t\t\tgetX = 'get' + x,\n\t\t\tgetY = 'get' + y,\n\t\t\tsetX = 'set' + x,\n\t\t\tsetY = 'set' + y,\n\t\t\tget = 'get' + part,\n\t\t\tset = 'set' + part;\n\t\tthis[get] = function(_dontLink) {\n\t\t\tvar ctor = _dontLink ? Point : LinkedPoint;\n\t\t\treturn new ctor(this[getX](), this[getY](), this, set);\n\t\t};\n\t\tthis[set] = function() {\n\t\t\tvar point = Point.read(arguments);\n\t\t\tthis[setX](point.x);\n\t\t\tthis[setY](point.y);\n\t\t};\n\t}, {\n\t\tbeans: true\n\t}\n));\n\nvar LinkedRectangle = Rectangle.extend({\n\tinitialize: function Rectangle(x, y, width, height, owner, setter) {\n\t\tthis.set(x, y, width, height, true);\n\t\tthis._owner = owner;\n\t\tthis._setter = setter;\n\t},\n\n\tset: function(x, y, width, height, _dontNotify) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tif (!_dontNotify)\n\t\t\tthis._owner[this._setter](this);\n\t\treturn this;\n\t}\n}, new function() {\n\tvar proto = Rectangle.prototype;\n\n\treturn Base.each(['x', 'y', 'width', 'height'], function(key) {\n\t\tvar part = Base.capitalize(key);\n\t\tvar internal = '_' + key;\n\t\tthis['get' + part] = function() {\n\t\t\treturn this[internal];\n\t\t};\n\n\t\tthis['set' + part] = function(value) {\n\t\t\tthis[internal] = value;\n\t\t\tif (!this._dontNotify)\n\t\t\t\tthis._owner[this._setter](this);\n\t\t};\n\t}, Base.each(['Point', 'Size', 'Center',\n\t\t\t'Left', 'Top', 'Right', 'Bottom', 'CenterX', 'CenterY',\n\t\t\t'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',\n\t\t\t'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'],\n\t\tfunction(key) {\n\t\t\tvar name = 'set' + key;\n\t\t\tthis[name] = function() {\n\t\t\t\tthis._dontNotify = true;\n\t\t\t\tproto[name].apply(this, arguments);\n\t\t\t\tthis._dontNotify = false;\n\t\t\t\tthis._owner[this._setter](this);\n\t\t\t};\n\t\t}, {\n\t\t\tisSelected: function() {\n\t\t\t\treturn this._owner._boundsSelected;\n\t\t\t},\n\n\t\t\tsetSelected: function(selected) {\n\t\t\t\tvar owner = this._owner;\n\t\t\t\tif (owner.setSelected) {\n\t\t\t\t\towner._boundsSelected = selected;\n\t\t\t\t\towner.setSelected(selected || owner._selectedSegmentState > 0);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t);\n});\n\nvar Matrix = Base.extend({\n\t_class: 'Matrix',\n\n\tinitialize: function Matrix(arg) {\n\t\tvar count = arguments.length,\n\t\t\tok = true;\n\t\tif (count === 6) {\n\t\t\tthis.set.apply(this, arguments);\n\t\t} else if (count === 1) {\n\t\t\tif (arg instanceof Matrix) {\n\t\t\t\tthis.set(arg._a, arg._c, arg._b, arg._d, arg._tx, arg._ty);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tthis.set.apply(this, arg);\n\t\t\t} else {\n\t\t\t\tok = false;\n\t\t\t}\n\t\t} else if (count === 0) {\n\t\t\tthis.reset();\n\t\t} else {\n\t\t\tok = false;\n\t\t}\n\t\tif (!ok)\n\t\t\tthrow new Error('Unsupported matrix parameters');\n\t},\n\n\tset: function(a, c, b, d, tx, ty, _dontNotify) {\n\t\tthis._a = a;\n\t\tthis._c = c;\n\t\tthis._b = b;\n\t\tthis._d = d;\n\t\tthis._tx = tx;\n\t\tthis._ty = ty;\n\t\tif (!_dontNotify)\n\t\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\t_serialize: function(options) {\n\t\treturn Base.serialize(this.getValues(), options);\n\t},\n\n\t_changed: function() {\n\t\tvar owner = this._owner;\n\t\tif (owner) {\n\t\t\tif (owner._applyMatrix) {\n\t\t\t\towner.transform(null, true);\n\t\t\t} else {\n\t\t\t\towner._changed(9);\n\t\t\t}\n\t\t}\n\t},\n\n\tclone: function() {\n\t\treturn new Matrix(this._a, this._c, this._b, this._d,\n\t\t\t\tthis._tx, this._ty);\n\t},\n\n\tequals: function(mx) {\n\t\treturn mx === this || mx && this._a === mx._a && this._b === mx._b\n\t\t\t\t&& this._c === mx._c && this._d === mx._d\n\t\t\t\t&& this._tx === mx._tx && this._ty === mx._ty\n\t\t\t\t|| false;\n\t},\n\n\ttoString: function() {\n\t\tvar f = Formatter.instance;\n\t\treturn '[[' + [f.number(this._a), f.number(this._b),\n\t\t\t\t\tf.number(this._tx)].join(', ') + '], ['\n\t\t\t\t+ [f.number(this._c), f.number(this._d),\n\t\t\t\t\tf.number(this._ty)].join(', ') + ']]';\n\t},\n\n\treset: function(_dontNotify) {\n\t\tthis._a = this._d = 1;\n\t\tthis._c = this._b = this._tx = this._ty = 0;\n\t\tif (!_dontNotify)\n\t\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tapply: function(recursively, _setApplyMatrix) {\n\t\tvar owner = this._owner;\n\t\tif (owner) {\n\t\t\towner.transform(null, true, Base.pick(recursively, true),\n\t\t\t\t\t_setApplyMatrix);\n\t\t\treturn this.isIdentity();\n\t\t}\n\t\treturn false;\n\t},\n\n\ttranslate: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tx = point.x,\n\t\t\ty = point.y;\n\t\tthis._tx += x * this._a + y * this._b;\n\t\tthis._ty += x * this._c + y * this._d;\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tscale: function() {\n\t\tvar scale = Point.read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\tif (center)\n\t\t\tthis.translate(center);\n\t\tthis._a *= scale.x;\n\t\tthis._c *= scale.x;\n\t\tthis._b *= scale.y;\n\t\tthis._d *= scale.y;\n\t\tif (center)\n\t\t\tthis.translate(center.negate());\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\trotate: function(angle ) {\n\t\tangle *= Math.PI / 180;\n\t\tvar center = Point.read(arguments, 1),\n\t\t\tx = center.x,\n\t\t\ty = center.y,\n\t\t\tcos = Math.cos(angle),\n\t\t\tsin = Math.sin(angle),\n\t\t\ttx = x - x * cos + y * sin,\n\t\t\tty = y - x * sin - y * cos,\n\t\t\ta = this._a,\n\t\t\tb = this._b,\n\t\t\tc = this._c,\n\t\t\td = this._d;\n\t\tthis._a = cos * a + sin * b;\n\t\tthis._b = -sin * a + cos * b;\n\t\tthis._c = cos * c + sin * d;\n\t\tthis._d = -sin * c + cos * d;\n\t\tthis._tx += tx * a + ty * b;\n\t\tthis._ty += tx * c + ty * d;\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tshear: function() {\n\t\tvar shear = Point.read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\tif (center)\n\t\t\tthis.translate(center);\n\t\tvar a = this._a,\n\t\t\tc = this._c;\n\t\tthis._a += shear.y * this._b;\n\t\tthis._c += shear.y * this._d;\n\t\tthis._b += shear.x * a;\n\t\tthis._d += shear.x * c;\n\t\tif (center)\n\t\t\tthis.translate(center.negate());\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tskew: function() {\n\t\tvar skew = Point.read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true }),\n\t\t\ttoRadians = Math.PI / 180,\n\t\t\tshear = new Point(Math.tan(skew.x * toRadians),\n\t\t\t\tMath.tan(skew.y * toRadians));\n\t\treturn this.shear(shear, center);\n\t},\n\n\tconcatenate: function(mx) {\n\t\tvar a1 = this._a,\n\t\t\tb1 = this._b,\n\t\t\tc1 = this._c,\n\t\t\td1 = this._d,\n\t\t\ta2 = mx._a,\n\t\t\tb2 = mx._b,\n\t\t\tc2 = mx._c,\n\t\t\td2 = mx._d,\n\t\t\ttx2 = mx._tx,\n\t\t\tty2 = mx._ty;\n\t\tthis._a = a2 * a1 + c2 * b1;\n\t\tthis._b = b2 * a1 + d2 * b1;\n\t\tthis._c = a2 * c1 + c2 * d1;\n\t\tthis._d = b2 * c1 + d2 * d1;\n\t\tthis._tx += tx2 * a1 + ty2 * b1;\n\t\tthis._ty += tx2 * c1 + ty2 * d1;\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tpreConcatenate: function(mx) {\n\t\tvar a1 = this._a,\n\t\t\tb1 = this._b,\n\t\t\tc1 = this._c,\n\t\t\td1 = this._d,\n\t\t\ttx1 = this._tx,\n\t\t\tty1 = this._ty,\n\t\t\ta2 = mx._a,\n\t\t\tb2 = mx._b,\n\t\t\tc2 = mx._c,\n\t\t\td2 = mx._d,\n\t\t\ttx2 = mx._tx,\n\t\t\tty2 = mx._ty;\n\t\tthis._a = a2 * a1 + b2 * c1;\n\t\tthis._b = a2 * b1 + b2 * d1;\n\t\tthis._c = c2 * a1 + d2 * c1;\n\t\tthis._d = c2 * b1 + d2 * d1;\n\t\tthis._tx = a2 * tx1 + b2 * ty1 + tx2;\n\t\tthis._ty = c2 * tx1 + d2 * ty1 + ty2;\n\t\tthis._changed();\n\t\treturn this;\n\t},\n\n\tchain: function(mx) {\n\t\tvar a1 = this._a,\n\t\t\tb1 = this._b,\n\t\t\tc1 = this._c,\n\t\t\td1 = this._d,\n\t\t\ttx1 = this._tx,\n\t\t\tty1 = this._ty,\n\t\t\ta2 = mx._a,\n\t\t\tb2 = mx._b,\n\t\t\tc2 = mx._c,\n\t\t\td2 = mx._d,\n\t\t\ttx2 = mx._tx,\n\t\t\tty2 = mx._ty;\n\t\treturn new Matrix(\n\t\t\t\ta2 * a1 + c2 * b1,\n\t\t\t\ta2 * c1 + c2 * d1,\n\t\t\t\tb2 * a1 + d2 * b1,\n\t\t\t\tb2 * c1 + d2 * d1,\n\t\t\t\ttx1 + tx2 * a1 + ty2 * b1,\n\t\t\t\tty1 + tx2 * c1 + ty2 * d1);\n\t},\n\n\tisIdentity: function() {\n\t\treturn this._a === 1 && this._c === 0 && this._b === 0 && this._d === 1\n\t\t\t\t&& this._tx === 0 && this._ty === 0;\n\t},\n\n\torNullIfIdentity: function() {\n\t\treturn this.isIdentity() ? null : this;\n\t},\n\n\tisInvertible: function() {\n\t\treturn !!this._getDeterminant();\n\t},\n\n\tisSingular: function() {\n\t\treturn !this._getDeterminant();\n\t},\n\n\ttransform: function( src, dst, count) {\n\t\treturn arguments.length < 3\n\t\t\t? this._transformPoint(Point.read(arguments))\n\t\t\t: this._transformCoordinates(src, dst, count);\n\t},\n\n\t_transformPoint: function(point, dest, _dontNotify) {\n\t\tvar x = point.x,\n\t\t\ty = point.y;\n\t\tif (!dest)\n\t\t\tdest = new Point();\n\t\treturn dest.set(\n\t\t\tx * this._a + y * this._b + this._tx,\n\t\t\tx * this._c + y * this._d + this._ty,\n\t\t\t_dontNotify\n\t\t);\n\t},\n\n\t_transformCoordinates: function(src, dst, count) {\n\t\tvar i = 0,\n\t\t\tj = 0,\n\t\t\tmax = 2 * count;\n\t\twhile (i < max) {\n\t\t\tvar x = src[i++],\n\t\t\t\ty = src[i++];\n\t\t\tdst[j++] = x * this._a + y * this._b + this._tx;\n\t\t\tdst[j++] = x * this._c + y * this._d + this._ty;\n\t\t}\n\t\treturn dst;\n\t},\n\n\t_transformCorners: function(rect) {\n\t\tvar x1 = rect.x,\n\t\t\ty1 = rect.y,\n\t\t\tx2 = x1 + rect.width,\n\t\t\ty2 = y1 + rect.height,\n\t\t\tcoords = [ x1, y1, x2, y1, x2, y2, x1, y2 ];\n\t\treturn this._transformCoordinates(coords, coords, 4);\n\t},\n\n\t_transformBounds: function(bounds, dest, _dontNotify) {\n\t\tvar coords = this._transformCorners(bounds),\n\t\t\tmin = coords.slice(0, 2),\n\t\t\tmax = coords.slice();\n\t\tfor (var i = 2; i < 8; i++) {\n\t\t\tvar val = coords[i],\n\t\t\t\tj = i & 1;\n\t\t\tif (val < min[j])\n\t\t\t\tmin[j] = val;\n\t\t\telse if (val > max[j])\n\t\t\t\tmax[j] = val;\n\t\t}\n\t\tif (!dest)\n\t\t\tdest = new Rectangle();\n\t\treturn dest.set(min[0], min[1], max[0] - min[0], max[1] - min[1],\n\t\t\t\t_dontNotify);\n\t},\n\n\tinverseTransform: function() {\n\t\treturn this._inverseTransform(Point.read(arguments));\n\t},\n\n\t_getDeterminant: function() {\n\t\tvar det = this._a * this._d - this._b * this._c;\n\t\treturn isFinite(det) && !Numerical.isZero(det)\n\t\t\t\t&& isFinite(this._tx) && isFinite(this._ty)\n\t\t\t\t? det : null;\n\t},\n\n\t_inverseTransform: function(point, dest, _dontNotify) {\n\t\tvar det = this._getDeterminant();\n\t\tif (!det)\n\t\t\treturn null;\n\t\tvar x = point.x - this._tx,\n\t\t\ty = point.y - this._ty;\n\t\tif (!dest)\n\t\t\tdest = new Point();\n\t\treturn dest.set(\n\t\t\t(x * this._d - y * this._b) / det,\n\t\t\t(y * this._a - x * this._c) / det,\n\t\t\t_dontNotify\n\t\t);\n\t},\n\n\tdecompose: function() {\n\t\tvar a = this._a, b = this._b, c = this._c, d = this._d;\n\t\tif (Numerical.isZero(a * d - b * c))\n\t\t\treturn null;\n\n\t\tvar scaleX = Math.sqrt(a * a + b * b);\n\t\ta /= scaleX;\n\t\tb /= scaleX;\n\n\t\tvar shear = a * c + b * d;\n\t\tc -= a * shear;\n\t\td -= b * shear;\n\n\t\tvar scaleY = Math.sqrt(c * c + d * d);\n\t\tc /= scaleY;\n\t\td /= scaleY;\n\t\tshear /= scaleY;\n\n\t\tif (a * d < b * c) {\n\t\t\ta = -a;\n\t\t\tb = -b;\n\t\t\tshear = -shear;\n\t\t\tscaleX = -scaleX;\n\t\t}\n\n\t\treturn {\n\t\t\tscaling: new Point(scaleX, scaleY),\n\t\t\trotation: -Math.atan2(b, a) * 180 / Math.PI,\n\t\t\tshearing: shear\n\t\t};\n\t},\n\n\tgetValues: function() {\n\t\treturn [ this._a, this._c, this._b, this._d, this._tx, this._ty ];\n\t},\n\n\tgetTranslation: function() {\n\t\treturn new Point(this._tx, this._ty);\n\t},\n\n\tgetScaling: function() {\n\t\treturn (this.decompose() || {}).scaling;\n\t},\n\n\tgetRotation: function() {\n\t\treturn (this.decompose() || {}).rotation;\n\t},\n\n\tinverted: function() {\n\t\tvar det = this._getDeterminant();\n\t\treturn det && new Matrix(\n\t\t\t\tthis._d / det,\n\t\t\t\t-this._c / det,\n\t\t\t\t-this._b / det,\n\t\t\t\tthis._a / det,\n\t\t\t\t(this._b * this._ty - this._d * this._tx) / det,\n\t\t\t\t(this._c * this._tx - this._a * this._ty) / det);\n\t},\n\n\tshiftless: function() {\n\t\treturn new Matrix(this._a, this._c, this._b, this._d, 0, 0);\n\t},\n\n\tapplyToContext: function(ctx) {\n\t\tctx.transform(this._a, this._c, this._b, this._d, this._tx, this._ty);\n\t}\n}, Base.each(['a', 'c', 'b', 'd', 'tx', 'ty'], function(name) {\n\tvar part = Base.capitalize(name),\n\t\tprop = '_' + name;\n\tthis['get' + part] = function() {\n\t\treturn this[prop];\n\t};\n\tthis['set' + part] = function(value) {\n\t\tthis[prop] = value;\n\t\tthis._changed();\n\t};\n}, {}));\n\nvar Line = Base.extend({\n\t_class: 'Line',\n\n\tinitialize: function Line(arg0, arg1, arg2, arg3, arg4) {\n\t\tvar asVector = false;\n\t\tif (arguments.length >= 4) {\n\t\t\tthis._px = arg0;\n\t\t\tthis._py = arg1;\n\t\t\tthis._vx = arg2;\n\t\t\tthis._vy = arg3;\n\t\t\tasVector = arg4;\n\t\t} else {\n\t\t\tthis._px = arg0.x;\n\t\t\tthis._py = arg0.y;\n\t\t\tthis._vx = arg1.x;\n\t\t\tthis._vy = arg1.y;\n\t\t\tasVector = arg2;\n\t\t}\n\t\tif (!asVector) {\n\t\t\tthis._vx -= this._px;\n\t\t\tthis._vy -= this._py;\n\t\t}\n\t},\n\n\tgetPoint: function() {\n\t\treturn new Point(this._px, this._py);\n\t},\n\n\tgetVector: function() {\n\t\treturn new Point(this._vx, this._vy);\n\t},\n\n\tgetLength: function() {\n\t\treturn this.getVector().getLength();\n\t},\n\n\tintersect: function(line, isInfinite) {\n\t\treturn Line.intersect(\n\t\t\t\tthis._px, this._py, this._vx, this._vy,\n\t\t\t\tline._px, line._py, line._vx, line._vy,\n\t\t\t\ttrue, isInfinite);\n\t},\n\n\tgetSide: function(point) {\n\t\treturn Line.getSide(\n\t\t\t\tthis._px, this._py, this._vx, this._vy,\n\t\t\t\tpoint.x, point.y, true);\n\t},\n\n\tgetDistance: function(point) {\n\t\treturn Math.abs(Line.getSignedDistance(\n\t\t\t\tthis._px, this._py, this._vx, this._vy,\n\t\t\t\tpoint.x, point.y, true));\n\t},\n\n\tstatics: {\n\t\tintersect: function(apx, apy, avx, avy, bpx, bpy, bvx, bvy, asVector,\n\t\t\t\tisInfinite) {\n\t\t\tif (!asVector) {\n\t\t\t\tavx -= apx;\n\t\t\t\tavy -= apy;\n\t\t\t\tbvx -= bpx;\n\t\t\t\tbvy -= bpy;\n\t\t\t}\n\t\t\tvar cross = avx * bvy - avy * bvx;\n\t\t\tif (!Numerical.isZero(cross)) {\n\t\t\t\tvar dx = apx - bpx,\n\t\t\t\t\tdy = apy - bpy,\n\t\t\t\t\tta = (bvx * dy - bvy * dx) / cross,\n\t\t\t\t\ttb = (avx * dy - avy * dx) / cross;\n\t\t\t\tif (isInfinite || 0 <= ta && ta <= 1 && 0 <= tb && tb <= 1)\n\t\t\t\t\treturn new Point(\n\t\t\t\t\t\t\t\tapx + ta * avx,\n\t\t\t\t\t\t\t\tapy + ta * avy);\n\t\t\t}\n\t\t},\n\n\t\tgetSide: function(px, py, vx, vy, x, y, asVector) {\n\t\t\tif (!asVector) {\n\t\t\t\tvx -= px;\n\t\t\t\tvy -= py;\n\t\t\t}\n\t\t\tvar v2x = x - px,\n\t\t\t\tv2y = y - py,\n\t\t\t\tccw = v2x * vy - v2y * vx;\n\t\t\tif (ccw === 0) {\n\t\t\t\tccw = v2x * vx + v2y * vy;\n\t\t\t\tif (ccw > 0) {\n\t\t\t\t\tv2x -= vx;\n\t\t\t\t\tv2y -= vy;\n\t\t\t\t\tccw = v2x * vx + v2y * vy;\n\t\t\t\t\tif (ccw < 0)\n\t\t\t\t\t\tccw = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn ccw < 0 ? -1 : ccw > 0 ? 1 : 0;\n\t\t},\n\n\t\tgetSignedDistance: function(px, py, vx, vy, x, y, asVector) {\n\t\t\tif (!asVector) {\n\t\t\t\tvx -= px;\n\t\t\t\tvy -= py;\n\t\t\t}\n\t\t\treturn Numerical.isZero(vx)\n\t\t\t\t\t? vy >= 0 ? px - x : x - px\n\t\t\t\t\t: Numerical.isZero(vy)\n\t\t\t\t\t\t? vx >= 0 ? y - py : py - y\n\t\t\t\t\t\t: (vx * (y - py) - vy * (x - px)) / Math.sqrt(vx * vx + vy * vy);\n\t\t}\n\t}\n});\n\nvar Project = PaperScopeItem.extend({\n\t_class: 'Project',\n\t_list: 'projects',\n\t_reference: 'project',\n\n\tinitialize: function Project(element) {\n\t\tPaperScopeItem.call(this, true);\n\t\tthis.layers = [];\n\t\tthis._activeLayer = null;\n\t\tthis.symbols = [];\n\t\tthis._currentStyle = new Style(null, null, this);\n\t\tthis._view = View.create(this,\n\t\t\t\telement || CanvasProvider.getCanvas(1, 1));\n\t\tthis._selectedItems = {};\n\t\tthis._selectedItemCount = 0;\n\t\tthis._updateVersion = 0;\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn Base.serialize(this.layers, options, true, dictionary);\n\t},\n\n\tclear: function() {\n\t\tfor (var i = this.layers.length - 1; i >= 0; i--)\n\t\t\tthis.layers[i].remove();\n\t\tthis.symbols = [];\n\t},\n\n\tisEmpty: function() {\n\t\treturn this.layers.length === 0;\n\t},\n\n\tremove: function remove() {\n\t\tif (!remove.base.call(this))\n\t\t\treturn false;\n\t\tif (this._view)\n\t\t\tthis._view.remove();\n\t\treturn true;\n\t},\n\n\tgetView: function() {\n\t\treturn this._view;\n\t},\n\n\tgetCurrentStyle: function() {\n\t\treturn this._currentStyle;\n\t},\n\n\tsetCurrentStyle: function(style) {\n\t\tthis._currentStyle.initialize(style);\n\t},\n\n\tgetIndex: function() {\n\t\treturn this._index;\n\t},\n\n\tgetOptions: function() {\n\t\treturn this._scope.settings;\n\t},\n\n\tgetActiveLayer: function() {\n\t\treturn this._activeLayer || new Layer({ project: this });\n\t},\n\n\tgetSelectedItems: function() {\n\t\tvar items = [];\n\t\tfor (var id in this._selectedItems) {\n\t\t\tvar item = this._selectedItems[id];\n\t\t\tif (item.isInserted())\n\t\t\t\titems.push(item);\n\t\t}\n\t\treturn items;\n\t},\n\n\tinsertChild: function(index, item, _preserve) {\n\t\tif (item instanceof Layer) {\n\t\t\titem._remove(false, true);\n\t\t\tBase.splice(this.layers, [item], index, 0);\n\t\t\titem._setProject(this, true);\n\t\t\tif (this._changes)\n\t\t\t\titem._changed(5);\n\t\t\tif (!this._activeLayer)\n\t\t\t\tthis._activeLayer = item;\n\t\t} else if (item instanceof Item) {\n\t\t\t(this._activeLayer\n\t\t\t\t|| this.insertChild(index, new Layer(Item.NO_INSERT)))\n\t\t\t\t\t.insertChild(index, item, _preserve);\n\t\t} else {\n\t\t\titem = null;\n\t\t}\n\t\treturn item;\n\t},\n\n\taddChild: function(item, _preserve) {\n\t\treturn this.insertChild(undefined, item, _preserve);\n\t},\n\n\t_updateSelection: function(item) {\n\t\tvar id = item._id,\n\t\t\tselectedItems = this._selectedItems;\n\t\tif (item._selected) {\n\t\t\tif (selectedItems[id] !== item) {\n\t\t\t\tthis._selectedItemCount++;\n\t\t\t\tselectedItems[id] = item;\n\t\t\t}\n\t\t} else if (selectedItems[id] === item) {\n\t\t\tthis._selectedItemCount--;\n\t\t\tdelete selectedItems[id];\n\t\t}\n\t},\n\n\tselectAll: function() {\n\t\tvar layers = this.layers;\n\t\tfor (var i = 0, l = layers.length; i < l; i++)\n\t\t\tlayers[i].setFullySelected(true);\n\t},\n\n\tdeselectAll: function() {\n\t\tvar selectedItems = this._selectedItems;\n\t\tfor (var i in selectedItems)\n\t\t\tselectedItems[i].setFullySelected(false);\n\t},\n\n\thitTest: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\toptions = HitResult.getOptions(Base.read(arguments));\n\t\tfor (var i = this.layers.length - 1; i >= 0; i--) {\n\t\t\tvar res = this.layers[i]._hitTest(point, options);\n\t\t\tif (res) return res;\n\t\t}\n\t\treturn null;\n\t},\n\n\tgetItems: function(match) {\n\t\treturn Item._getItems(this.layers, match);\n\t},\n\n\tgetItem: function(match) {\n\t\treturn Item._getItems(this.layers, match, null, null, true)[0] || null;\n\t},\n\n\timportJSON: function(json) {\n\t\tthis.activate();\n\t\tvar layer = this._activeLayer;\n\t\treturn Base.importJSON(json, layer && layer.isEmpty() && layer);\n\t},\n\n\tdraw: function(ctx, matrix, pixelRatio) {\n\t\tthis._updateVersion++;\n\t\tctx.save();\n\t\tmatrix.applyToContext(ctx);\n\t\tvar param = new Base({\n\t\t\toffset: new Point(0, 0),\n\t\t\tpixelRatio: pixelRatio,\n\t\t\tviewMatrix: matrix.isIdentity() ? null : matrix,\n\t\t\tmatrices: [new Matrix()],\n\t\t\tupdateMatrix: true\n\t\t});\n\t\tfor (var i = 0, layers = this.layers, l = layers.length; i < l; i++)\n\t\t\tlayers[i].draw(ctx, param);\n\t\tctx.restore();\n\n\t\tif (this._selectedItemCount > 0) {\n\t\t\tctx.save();\n\t\t\tctx.strokeWidth = 1;\n\t\t\tvar items = this._selectedItems,\n\t\t\t\tsize = this._scope.settings.handleSize,\n\t\t\t\tversion = this._updateVersion;\n\t\t\tfor (var id in items)\n\t\t\t\titems[id]._drawSelection(ctx, matrix, size, items, version);\n\t\t\tctx.restore();\n\t\t}\n\t}\n});\n\nvar Symbol = Base.extend({\n\t_class: 'Symbol',\n\n\tinitialize: function Symbol(item, dontCenter) {\n\t\tthis._id = Symbol._id = (Symbol._id || 0) + 1;\n\t\tthis.project = paper.project;\n\t\tthis.project.symbols.push(this);\n\t\tif (item)\n\t\t\tthis.setDefinition(item, dontCenter);\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn dictionary.add(this, function() {\n\t\t\treturn Base.serialize([this._class, this._definition],\n\t\t\t\t\toptions, false, dictionary);\n\t\t});\n\t},\n\n\t_changed: function(flags) {\n\t\tif (flags & 8) {\n\t\t\tItem._clearBoundsCache(this);\n\t\t}\n\t\tif (flags & 1) {\n\t\t\tthis.project._needsUpdate = true;\n\t\t}\n\t},\n\n\tgetDefinition: function() {\n\t\treturn this._definition;\n\t},\n\n\tsetDefinition: function(item, _dontCenter) {\n\t\tif (item._parentSymbol)\n\t\t\titem = item.clone();\n\t\tif (this._definition)\n\t\t\tthis._definition._parentSymbol = null;\n\t\tthis._definition = item;\n\t\titem.remove();\n\t\titem.setSelected(false);\n\t\tif (!_dontCenter)\n\t\t\titem.setPosition(new Point());\n\t\titem._parentSymbol = this;\n\t\tthis._changed(9);\n\t},\n\n\tplace: function(position) {\n\t\treturn new PlacedSymbol(this, position);\n\t},\n\n\tclone: function() {\n\t\treturn new Symbol(this._definition.clone(false));\n\t},\n\n\tequals: function(symbol) {\n\t\treturn symbol === this\n\t\t\t\t|| symbol && this.definition.equals(symbol.definition)\n\t\t\t\t|| false;\n\t}\n});\n\nvar Item = Base.extend(Emitter, {\n\tstatics: {\n\t\textend: function extend(src) {\n\t\t\tif (src._serializeFields)\n\t\t\t\tsrc._serializeFields = new Base(\n\t\t\t\t\t\tthis.prototype._serializeFields, src._serializeFields);\n\t\t\treturn extend.base.apply(this, arguments);\n\t\t},\n\n\t\tNO_INSERT: { insert: false }\n\t},\n\n\t_class: 'Item',\n\t_applyMatrix: true,\n\t_canApplyMatrix: true,\n\t_boundsSelected: false,\n\t_selectChildren: false,\n\t_serializeFields: {\n\t\tname: null,\n\t\tapplyMatrix: null,\n\t\tmatrix: new Matrix(),\n\t\tpivot: null,\n\t\tlocked: false,\n\t\tvisible: true,\n\t\tblendMode: 'normal',\n\t\topacity: 1,\n\t\tguide: false,\n\t\tselected: false,\n\t\tclipMask: false,\n\t\tdata: {}\n\t},\n\n\tinitialize: function Item() {\n\t},\n\n\t_initialize: function(props, point) {\n\t\tvar hasProps = props && Base.isPlainObject(props),\n\t\t\tinternal = hasProps && props.internal === true,\n\t\t\tmatrix = this._matrix = new Matrix(),\n\t\t\tproject = hasProps && props.project || paper.project;\n\t\tif (!internal)\n\t\t\tthis._id = Item._id = (Item._id || 0) + 1;\n\t\tthis._applyMatrix = this._canApplyMatrix && paper.settings.applyMatrix;\n\t\tif (point)\n\t\t\tmatrix.translate(point);\n\t\tmatrix._owner = this;\n\t\tthis._style = new Style(project._currentStyle, this, project);\n\t\tif (!this._project) {\n\t\t\tif (internal || hasProps && props.insert === false) {\n\t\t\t\tthis._setProject(project);\n\t\t\t} else if (hasProps && props.parent) {\n\t\t\t\tthis.setParent(props.parent);\n\t\t\t} else {\n\t\t\t\t(project._activeLayer || new Layer()).addChild(this);\n\t\t\t}\n\t\t}\n\t\tif (hasProps && props !== Item.NO_INSERT)\n\t\t\tthis._set(props, { insert: true, parent: true }, true);\n\t\treturn hasProps;\n\t},\n\n\t_events: new function() {\n\n\t\tvar mouseFlags = {\n\t\t\tmousedown: {\n\t\t\t\tmousedown: 1,\n\t\t\t\tmousedrag: 1,\n\t\t\t\tclick: 1,\n\t\t\t\tdoubleclick: 1\n\t\t\t},\n\t\t\tmouseup: {\n\t\t\t\tmouseup: 1,\n\t\t\t\tmousedrag: 1,\n\t\t\t\tclick: 1,\n\t\t\t\tdoubleclick: 1\n\t\t\t},\n\t\t\tmousemove: {\n\t\t\t\tmousedrag: 1,\n\t\t\t\tmousemove: 1,\n\t\t\t\tmouseenter: 1,\n\t\t\t\tmouseleave: 1\n\t\t\t}\n\t\t};\n\n\t\tvar mouseEvent = {\n\t\t\tinstall: function(type) {\n\t\t\t\tvar counters = this.getView()._eventCounters;\n\t\t\t\tif (counters) {\n\t\t\t\t\tfor (var key in mouseFlags) {\n\t\t\t\t\t\tcounters[key] = (counters[key] || 0)\n\t\t\t\t\t\t\t\t+ (mouseFlags[key][type] || 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tuninstall: function(type) {\n\t\t\t\tvar counters = this.getView()._eventCounters;\n\t\t\t\tif (counters) {\n\t\t\t\t\tfor (var key in mouseFlags)\n\t\t\t\t\t\tcounters[key] -= mouseFlags[key][type] || 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn Base.each(['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onClick',\n\t\t\t'onDoubleClick', 'onMouseMove', 'onMouseEnter', 'onMouseLeave'],\n\t\t\tfunction(name) {\n\t\t\t\tthis[name] = mouseEvent;\n\t\t\t}, {\n\t\t\t\tonFrame: {\n\t\t\t\t\tinstall: function() {\n\t\t\t\t\t\tthis._animateItem(true);\n\t\t\t\t\t},\n\t\t\t\t\tuninstall: function() {\n\t\t\t\t\t\tthis._animateItem(false);\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tonLoad: {}\n\t\t\t}\n\t\t);\n\t},\n\n\t_animateItem: function(animate) {\n\t\tthis.getView()._animateItem(this, animate);\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\tvar props = {},\n\t\t\tthat = this;\n\n\t\tfunction serialize(fields) {\n\t\t\tfor (var key in fields) {\n\t\t\t\tvar value = that[key];\n\t\t\t\tif (!Base.equals(value, key === 'leading'\n\t\t\t\t\t\t? fields.fontSize * 1.2 : fields[key])) {\n\t\t\t\t\tprops[key] = Base.serialize(value, options,\n\t\t\t\t\t\t\tkey !== 'data', dictionary);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tserialize(this._serializeFields);\n\t\tif (!(this instanceof Group))\n\t\t\tserialize(this._style._defaults);\n\t\treturn [ this._class, props ];\n\t},\n\n\t_changed: function(flags) {\n\t\tvar symbol = this._parentSymbol,\n\t\t\tcacheParent = this._parent || symbol,\n\t\t\tproject = this._project;\n\t\tif (flags & 8) {\n\t\t\tthis._bounds = this._position = this._decomposed =\n\t\t\t\t\tthis._globalMatrix = this._currentPath = undefined;\n\t\t}\n\t\tif (cacheParent\n\t\t\t\t&& (flags & 40)) {\n\t\t\tItem._clearBoundsCache(cacheParent);\n\t\t}\n\t\tif (flags & 2) {\n\t\t\tItem._clearBoundsCache(this);\n\t\t}\n\t\tif (project) {\n\t\t\tif (flags & 1) {\n\t\t\t\tproject._needsUpdate = true;\n\t\t\t}\n\t\t\tif (project._changes) {\n\t\t\t\tvar entry = project._changesById[this._id];\n\t\t\t\tif (entry) {\n\t\t\t\t\tentry.flags |= flags;\n\t\t\t\t} else {\n\t\t\t\t\tentry = { item: this, flags: flags };\n\t\t\t\t\tproject._changesById[this._id] = entry;\n\t\t\t\t\tproject._changes.push(entry);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (symbol)\n\t\t\tsymbol._changed(flags);\n\t},\n\n\tset: function(props) {\n\t\tif (props)\n\t\t\tthis._set(props);\n\t\treturn this;\n\t},\n\n\tgetId: function() {\n\t\treturn this._id;\n\t},\n\n\tgetName: function() {\n\t\treturn this._name;\n\t},\n\n\tsetName: function(name, unique) {\n\n\t\tif (this._name)\n\t\t\tthis._removeNamed();\n\t\tif (name === (+name) + '')\n\t\t\tthrow new Error(\n\t\t\t\t\t'Names consisting only of numbers are not supported.');\n\t\tvar parent = this._parent;\n\t\tif (name && parent) {\n\t\t\tvar children = parent._children,\n\t\t\t\tnamedChildren = parent._namedChildren,\n\t\t\t\torig = name,\n\t\t\t\ti = 1;\n\t\t\twhile (unique && children[name])\n\t\t\t\tname = orig + ' ' + (i++);\n\t\t\t(namedChildren[name] = namedChildren[name] || []).push(this);\n\t\t\tchildren[name] = this;\n\t\t}\n\t\tthis._name = name || undefined;\n\t\tthis._changed(128);\n\t},\n\n\tgetStyle: function() {\n\t\treturn this._style;\n\t},\n\n\tsetStyle: function(style) {\n\t\tthis.getStyle().set(style);\n\t}\n}, Base.each(['locked', 'visible', 'blendMode', 'opacity', 'guide'],\n\tfunction(name) {\n\t\tvar part = Base.capitalize(name),\n\t\t\tname = '_' + name;\n\t\tthis['get' + part] = function() {\n\t\t\treturn this[name];\n\t\t};\n\t\tthis['set' + part] = function(value) {\n\t\t\tif (value != this[name]) {\n\t\t\t\tthis[name] = value;\n\t\t\t\tthis._changed(name === '_locked'\n\t\t\t\t\t\t? 128 : 129);\n\t\t\t}\n\t\t};\n\t},\n{}), {\n\tbeans: true,\n\n\t_locked: false,\n\n\t_visible: true,\n\n\t_blendMode: 'normal',\n\n\t_opacity: 1,\n\n\t_guide: false,\n\n\tisSelected: function() {\n\t\tif (this._selectChildren) {\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tif (children[i].isSelected())\n\t\t\t\t\treturn true;\n\t\t}\n\t\treturn this._selected;\n\t},\n\n\tsetSelected: function(selected, noChildren) {\n\t\tif (!noChildren && this._selectChildren) {\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tchildren[i].setSelected(selected);\n\t\t}\n\t\tif ((selected = !!selected) ^ this._selected) {\n\t\t\tthis._selected = selected;\n\t\t\tthis._project._updateSelection(this);\n\t\t\tthis._changed(129);\n\t\t}\n\t},\n\n\t_selected: false,\n\n\tisFullySelected: function() {\n\t\tvar children = this._children;\n\t\tif (children && this._selected) {\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tif (!children[i].isFullySelected())\n\t\t\t\t\treturn false;\n\t\t\treturn true;\n\t\t}\n\t\treturn this._selected;\n\t},\n\n\tsetFullySelected: function(selected) {\n\t\tvar children = this._children;\n\t\tif (children) {\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tchildren[i].setFullySelected(selected);\n\t\t}\n\t\tthis.setSelected(selected, true);\n\t},\n\n\tisClipMask: function() {\n\t\treturn this._clipMask;\n\t},\n\n\tsetClipMask: function(clipMask) {\n\t\tif (this._clipMask != (clipMask = !!clipMask)) {\n\t\t\tthis._clipMask = clipMask;\n\t\t\tif (clipMask) {\n\t\t\t\tthis.setFillColor(null);\n\t\t\t\tthis.setStrokeColor(null);\n\t\t\t}\n\t\t\tthis._changed(129);\n\t\t\tif (this._parent)\n\t\t\t\tthis._parent._changed(1024);\n\t\t}\n\t},\n\n\t_clipMask: false,\n\n\tgetData: function() {\n\t\tif (!this._data)\n\t\t\tthis._data = {};\n\t\treturn this._data;\n\t},\n\n\tsetData: function(data) {\n\t\tthis._data = data;\n\t},\n\n\tgetPosition: function(_dontLink) {\n\t\tvar position = this._position,\n\t\t\tctor = _dontLink ? Point : LinkedPoint;\n\t\tif (!position) {\n\t\t\tvar pivot = this._pivot;\n\t\t\tposition = this._position = pivot\n\t\t\t\t\t? this._matrix._transformPoint(pivot)\n\t\t\t\t\t: this.getBounds().getCenter(true);\n\t\t}\n\t\treturn new ctor(position.x, position.y, this, 'setPosition');\n\t},\n\n\tsetPosition: function() {\n\t\tthis.translate(Point.read(arguments).subtract(this.getPosition(true)));\n\t},\n\n\tgetPivot: function(_dontLink) {\n\t\tvar pivot = this._pivot;\n\t\tif (pivot) {\n\t\t\tvar ctor = _dontLink ? Point : LinkedPoint;\n\t\t\tpivot = new ctor(pivot.x, pivot.y, this, 'setPivot');\n\t\t}\n\t\treturn pivot;\n\t},\n\n\tsetPivot: function() {\n\t\tthis._pivot = Point.read(arguments);\n\t\tthis._position = undefined;\n\t},\n\n\t_pivot: null,\n\n\tgetRegistration: '#getPivot',\n\tsetRegistration: '#setPivot'\n}, Base.each(['bounds', 'strokeBounds', 'handleBounds', 'roughBounds',\n\t\t'internalBounds', 'internalRoughBounds'],\n\tfunction(key) {\n\t\tvar getter = 'get' + Base.capitalize(key),\n\t\t\tmatch = key.match(/^internal(.*)$/),\n\t\t\tinternalGetter = match ? 'get' + match[1] : null;\n\t\tthis[getter] = function(_matrix) {\n\t\t\tvar boundsGetter = this._boundsGetter,\n\t\t\t\tname = !internalGetter && (typeof boundsGetter === 'string'\n\t\t\t\t\t\t? boundsGetter : boundsGetter && boundsGetter[getter])\n\t\t\t\t\t\t|| getter,\n\t\t\t\tbounds = this._getCachedBounds(name, _matrix, this,\n\t\t\t\t\t\tinternalGetter);\n\t\t\treturn key === 'bounds'\n\t\t\t\t\t? new LinkedRectangle(bounds.x, bounds.y, bounds.width,\n\t\t\t\t\t\t\tbounds.height, this, 'setBounds')\n\t\t\t\t\t: bounds;\n\t\t};\n\t},\n{\n\tbeans: true,\n\n\t_getBounds: function(getter, matrix, cacheItem) {\n\t\tvar children = this._children;\n\t\tif (!children || children.length == 0)\n\t\t\treturn new Rectangle();\n\t\tvar x1 = Infinity,\n\t\t\tx2 = -x1,\n\t\t\ty1 = x1,\n\t\t\ty2 = x2;\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tvar child = children[i];\n\t\t\tif (child._visible && !child.isEmpty()) {\n\t\t\t\tvar rect = child._getCachedBounds(getter,\n\t\t\t\t\t\tmatrix && matrix.chain(child._matrix), cacheItem);\n\t\t\t\tx1 = Math.min(rect.x, x1);\n\t\t\t\ty1 = Math.min(rect.y, y1);\n\t\t\t\tx2 = Math.max(rect.x + rect.width, x2);\n\t\t\t\ty2 = Math.max(rect.y + rect.height, y2);\n\t\t\t}\n\t\t}\n\t\treturn isFinite(x1)\n\t\t\t\t? new Rectangle(x1, y1, x2 - x1, y2 - y1)\n\t\t\t\t: new Rectangle();\n\t},\n\n\tsetBounds: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tbounds = this.getBounds(),\n\t\t\tmatrix = new Matrix(),\n\t\t\tcenter = rect.getCenter();\n\t\tmatrix.translate(center);\n\t\tif (rect.width != bounds.width || rect.height != bounds.height) {\n\t\t\tmatrix.scale(\n\t\t\t\t\tbounds.width != 0 ? rect.width / bounds.width : 1,\n\t\t\t\t\tbounds.height != 0 ? rect.height / bounds.height : 1);\n\t\t}\n\t\tcenter = bounds.getCenter();\n\t\tmatrix.translate(-center.x, -center.y);\n\t\tthis.transform(matrix);\n\t},\n\n\t_getCachedBounds: function(getter, matrix, cacheItem, internalGetter) {\n\t\tmatrix = matrix && matrix.orNullIfIdentity();\n\t\tvar _matrix = internalGetter ? null : this._matrix.orNullIfIdentity(),\n\t\t\tcache = (!matrix || matrix.equals(_matrix)) && getter;\n\t\tvar cacheParent = this._parent || this._parentSymbol;\n\t\tif (cacheParent) {\n\t\t\tvar id = cacheItem._id,\n\t\t\t\tref = cacheParent._boundsCache = cacheParent._boundsCache || {\n\t\t\t\t\tids: {},\n\t\t\t\t\tlist: []\n\t\t\t\t};\n\t\t\tif (!ref.ids[id]) {\n\t\t\t\tref.list.push(cacheItem);\n\t\t\t\tref.ids[id] = cacheItem;\n\t\t\t}\n\t\t}\n\t\tif (cache && this._bounds && this._bounds[cache])\n\t\t\treturn this._bounds[cache].clone();\n\t\tvar bounds = this._getBounds(internalGetter || getter,\n\t\t\t\tmatrix || _matrix, cacheItem);\n\t\tif (cache) {\n\t\t\tif (!this._bounds)\n\t\t\t\tthis._bounds = {};\n\t\t\tvar cached = this._bounds[cache] = bounds.clone();\n\t\t\tcached._internal = !!internalGetter;\n\t\t}\n\t\treturn bounds;\n\t},\n\n\tstatics: {\n\t\t_clearBoundsCache: function(item) {\n\t\t\tvar cache = item._boundsCache;\n\t\t\tif (cache) {\n\t\t\t\titem._bounds = item._position = item._boundsCache = undefined;\n\t\t\t\tfor (var i = 0, list = cache.list, l = list.length; i < l; i++) {\n\t\t\t\t\tvar other = list[i];\n\t\t\t\t\tif (other !== item) {\n\t\t\t\t\t\tother._bounds = other._position = undefined;\n\t\t\t\t\t\tif (other._boundsCache)\n\t\t\t\t\t\t\tItem._clearBoundsCache(other);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}), {\n\tbeans: true,\n\n\t_decompose: function() {\n\t\treturn this._decomposed = this._matrix.decompose();\n\t},\n\n\tgetRotation: function() {\n\t\tvar decomposed = this._decomposed || this._decompose();\n\t\treturn decomposed && decomposed.rotation;\n\t},\n\n\tsetRotation: function(rotation) {\n\t\tvar current = this.getRotation();\n\t\tif (current != null && rotation != null) {\n\t\t\tvar decomposed = this._decomposed;\n\t\t\tthis.rotate(rotation - current);\n\t\t\tdecomposed.rotation = rotation;\n\t\t\tthis._decomposed = decomposed;\n\t\t}\n\t},\n\n\tgetScaling: function(_dontLink) {\n\t\tvar decomposed = this._decomposed || this._decompose(),\n\t\t\tscaling = decomposed && decomposed.scaling,\n\t\t\tctor = _dontLink ? Point : LinkedPoint;\n\t\treturn scaling && new ctor(scaling.x, scaling.y, this, 'setScaling');\n\t},\n\n\tsetScaling: function() {\n\t\tvar current = this.getScaling();\n\t\tif (current) {\n\t\t\tvar scaling = Point.read(arguments, 0, { clone: true }),\n\t\t\t\tdecomposed = this._decomposed;\n\t\t\tthis.scale(scaling.x / current.x, scaling.y / current.y);\n\t\t\tdecomposed.scaling = scaling;\n\t\t\tthis._decomposed = decomposed;\n\t\t}\n\t},\n\n\tgetMatrix: function() {\n\t\treturn this._matrix;\n\t},\n\n\tsetMatrix: function(matrix) {\n\t\tthis._matrix.initialize(matrix);\n\t\tif (this._applyMatrix) {\n\t\t\tthis.transform(null, true);\n\t\t} else {\n\t\t\tthis._changed(9);\n\t\t}\n\t},\n\n\tgetGlobalMatrix: function(_dontClone) {\n\t\tvar matrix = this._globalMatrix,\n\t\t\tupdateVersion = this._project._updateVersion;\n\t\tif (matrix && matrix._updateVersion !== updateVersion)\n\t\t\tmatrix = null;\n\t\tif (!matrix) {\n\t\t\tmatrix = this._globalMatrix = this._matrix.clone();\n\t\t\tvar parent = this._parent;\n\t\t\tif (parent)\n\t\t\t\tmatrix.preConcatenate(parent.getGlobalMatrix(true));\n\t\t\tmatrix._updateVersion = updateVersion;\n\t\t}\n\t\treturn _dontClone ? matrix : matrix.clone();\n\t},\n\n\tgetApplyMatrix: function() {\n\t\treturn this._applyMatrix;\n\t},\n\n\tsetApplyMatrix: function(apply) {\n\t\tif (this._applyMatrix = this._canApplyMatrix && !!apply)\n\t\t\tthis.transform(null, true);\n\t},\n\n\tgetTransformContent: '#getApplyMatrix',\n\tsetTransformContent: '#setApplyMatrix',\n}, {\n\tgetProject: function() {\n\t\treturn this._project;\n\t},\n\n\t_setProject: function(project, installEvents) {\n\t\tif (this._project !== project) {\n\t\t\tif (this._project)\n\t\t\t\tthis._installEvents(false);\n\t\t\tthis._project = project;\n\t\t\tvar children = this._children;\n\t\t\tfor (var i = 0, l = children && children.length; i < l; i++)\n\t\t\t\tchildren[i]._setProject(project);\n\t\t\tinstallEvents = true;\n\t\t}\n\t\tif (installEvents)\n\t\t\tthis._installEvents(true);\n\t},\n\n\tgetView: function() {\n\t\treturn this._project.getView();\n\t},\n\n\t_installEvents: function _installEvents(install) {\n\t\t_installEvents.base.call(this, install);\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children && children.length; i < l; i++)\n\t\t\tchildren[i]._installEvents(install);\n\t},\n\n\tgetLayer: function() {\n\t\tvar parent = this;\n\t\twhile (parent = parent._parent) {\n\t\t\tif (parent instanceof Layer)\n\t\t\t\treturn parent;\n\t\t}\n\t\treturn null;\n\t},\n\n\tgetParent: function() {\n\t\treturn this._parent;\n\t},\n\n\tsetParent: function(item) {\n\t\treturn item.addChild(this);\n\t},\n\n\tgetChildren: function() {\n\t\treturn this._children;\n\t},\n\n\tsetChildren: function(items) {\n\t\tthis.removeChildren();\n\t\tthis.addChildren(items);\n\t},\n\n\tgetFirstChild: function() {\n\t\treturn this._children && this._children[0] || null;\n\t},\n\n\tgetLastChild: function() {\n\t\treturn this._children && this._children[this._children.length - 1]\n\t\t\t\t|| null;\n\t},\n\n\tgetNextSibling: function() {\n\t\treturn this._parent && this._parent._children[this._index + 1] || null;\n\t},\n\n\tgetPreviousSibling: function() {\n\t\treturn this._parent && this._parent._children[this._index - 1] || null;\n\t},\n\n\tgetIndex: function() {\n\t\treturn this._index;\n\t},\n\n\tequals: function(item) {\n\t\treturn item === this || item && this._class === item._class\n\t\t\t\t&& this._style.equals(item._style)\n\t\t\t\t&& this._matrix.equals(item._matrix)\n\t\t\t\t&& this._locked === item._locked\n\t\t\t\t&& this._visible === item._visible\n\t\t\t\t&& this._blendMode === item._blendMode\n\t\t\t\t&& this._opacity === item._opacity\n\t\t\t\t&& this._clipMask === item._clipMask\n\t\t\t\t&& this._guide === item._guide\n\t\t\t\t&& this._equals(item)\n\t\t\t\t|| false;\n\t},\n\n\t_equals: function(item) {\n\t\treturn Base.equals(this._children, item._children);\n\t},\n\n\tclone: function(insert) {\n\t\treturn this._clone(new this.constructor(Item.NO_INSERT), insert);\n\t},\n\n\t_clone: function(copy, insert) {\n\t\tcopy.setStyle(this._style);\n\t\tif (this._children) {\n\t\t\tfor (var i = 0, l = this._children.length; i < l; i++)\n\t\t\t\tcopy.addChild(this._children[i].clone(false), true);\n\t\t}\n\t\tif (insert || insert === undefined)\n\t\t\tcopy.insertAbove(this);\n\t\tvar keys = ['_locked', '_visible', '_blendMode', '_opacity',\n\t\t\t\t'_clipMask', '_guide', '_applyMatrix'];\n\t\tfor (var i = 0, l = keys.length; i < l; i++) {\n\t\t\tvar key = keys[i];\n\t\t\tif (this.hasOwnProperty(key))\n\t\t\t\tcopy[key] = this[key];\n\t\t}\n\t\tcopy._matrix.initialize(this._matrix);\n\t\tcopy._data = this._data ? Base.clone(this._data) : null;\n\t\tcopy.setSelected(this._selected);\n\t\tif (this._name)\n\t\t\tcopy.setName(this._name, true);\n\t\treturn copy;\n\t},\n\n\tcopyTo: function(itemOrProject) {\n\t\treturn itemOrProject.addChild(this.clone(false));\n\t},\n\n\trasterize: function(resolution) {\n\t\tvar bounds = this.getStrokeBounds(),\n\t\t\tscale = (resolution || this.getView().getResolution()) / 72,\n\t\t\ttopLeft = bounds.getTopLeft().floor(),\n\t\t\tbottomRight = bounds.getBottomRight().ceil(),\n\t\t\tsize = new Size(bottomRight.subtract(topLeft)),\n\t\t\tcanvas = CanvasProvider.getCanvas(size.multiply(scale)),\n\t\t\tctx = canvas.getContext('2d'),\n\t\t\tmatrix = new Matrix().scale(scale).translate(topLeft.negate());\n\t\tctx.save();\n\t\tmatrix.applyToContext(ctx);\n\t\tthis.draw(ctx, new Base({ matrices: [matrix] }));\n\t\tctx.restore();\n\t\tvar raster = new Raster(Item.NO_INSERT);\n\t\traster.setCanvas(canvas);\n\t\traster.transform(new Matrix().translate(topLeft.add(size.divide(2)))\n\t\t\t\t.scale(1 / scale));\n\t\traster.insertAbove(this);\n\t\treturn raster;\n\t},\n\n\tcontains: function() {\n\t\treturn !!this._contains(\n\t\t\t\tthis._matrix._inverseTransform(Point.read(arguments)));\n\t},\n\n\t_contains: function(point) {\n\t\tif (this._children) {\n\t\t\tfor (var i = this._children.length - 1; i >= 0; i--) {\n\t\t\t\tif (this._children[i].contains(point))\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn point.isInside(this.getInternalBounds());\n\t},\n\n\tisInside: function() {\n\t\treturn Rectangle.read(arguments).contains(this.getBounds());\n\t},\n\n\t_asPathItem: function() {\n\t\treturn new Path.Rectangle({\n\t\t\trectangle: this.getInternalBounds(),\n\t\t\tmatrix: this._matrix,\n\t\t\tinsert: false,\n\t\t});\n\t},\n\n\tintersects: function(item, _matrix) {\n\t\tif (!(item instanceof Item))\n\t\t\treturn false;\n\t\treturn this._asPathItem().getIntersections(item._asPathItem(),\n\t\t\t\t_matrix || item._matrix).length > 0;\n\t},\n\n\thitTest: function() {\n\t\treturn this._hitTest(\n\t\t\t\tPoint.read(arguments),\n\t\t\t\tHitResult.getOptions(Base.read(arguments)));\n\t},\n\n\t_hitTest: function(point, options) {\n\t\tif (this._locked || !this._visible || this._guide && !options.guides\n\t\t\t\t|| this.isEmpty())\n\t\t\treturn null;\n\n\t\tvar matrix = this._matrix,\n\t\t\tparentTotalMatrix = options._totalMatrix,\n\t\t\tview = this.getView(),\n\t\t\ttotalMatrix = options._totalMatrix = parentTotalMatrix\n\t\t\t\t\t? parentTotalMatrix.chain(matrix)\n\t\t\t\t\t: this.getGlobalMatrix().preConcatenate(view._matrix),\n\t\t\ttolerancePadding = options._tolerancePadding = new Size(\n\t\t\t\t\t\tPath._getPenPadding(1, totalMatrix.inverted())\n\t\t\t\t\t).multiply(\n\t\t\t\t\t\tMath.max(options.tolerance, 0.000001)\n\t\t\t\t\t);\n\t\tpoint = matrix._inverseTransform(point);\n\n\t\tif (!this._children && !this.getInternalRoughBounds()\n\t\t\t\t.expand(tolerancePadding.multiply(2))._containsPoint(point))\n\t\t\treturn null;\n\t\tvar checkSelf = !(options.guides && !this._guide\n\t\t\t\t|| options.selected && !this._selected\n\t\t\t\t|| options.type && options.type !== Base.hyphenate(this._class)\n\t\t\t\t|| options.class && !(this instanceof options.class)),\n\t\t\tthat = this,\n\t\t\tres;\n\n\t\tfunction checkBounds(type, part) {\n\t\t\tvar pt = bounds['get' + part]();\n\t\t\tif (point.subtract(pt).divide(tolerancePadding).length <= 1)\n\t\t\t\treturn new HitResult(type, that,\n\t\t\t\t\t\t{ name: Base.hyphenate(part), point: pt });\n\t\t}\n\n\t\tif (checkSelf && (options.center || options.bounds) && this._parent) {\n\t\t\tvar bounds = this.getInternalBounds();\n\t\t\tif (options.center)\n\t\t\t\tres = checkBounds('center', 'Center');\n\t\t\tif (!res && options.bounds) {\n\t\t\t\tvar points = [\n\t\t\t\t\t'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',\n\t\t\t\t\t'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'\n\t\t\t\t];\n\t\t\t\tfor (var i = 0; i < 8 && !res; i++)\n\t\t\t\t\tres = checkBounds('bounds', points[i]);\n\t\t\t}\n\t\t}\n\n\t\tvar children = !res && this._children;\n\t\tif (children) {\n\t\t\tvar opts = this._getChildHitTestOptions(options);\n\t\t\tfor (var i = children.length - 1; i >= 0 && !res; i--)\n\t\t\t\tres = children[i]._hitTest(point, opts);\n\t\t}\n\t\tif (!res && checkSelf)\n\t\t\tres = this._hitTestSelf(point, options);\n\t\tif (res && res.point)\n\t\t\tres.point = matrix.transform(res.point);\n\t\toptions._totalMatrix = parentTotalMatrix;\n\t\treturn res;\n\t},\n\n\t_getChildHitTestOptions: function(options) {\n\t\treturn options;\n\t},\n\n\t_hitTestSelf: function(point, options) {\n\t\tif (options.fill && this.hasFill() && this._contains(point))\n\t\t\treturn new HitResult('fill', this);\n\t},\n\n\tmatches: function(name, compare) {\n\t\tfunction matchObject(obj1, obj2) {\n\t\t\tfor (var i in obj1) {\n\t\t\t\tif (obj1.hasOwnProperty(i)) {\n\t\t\t\t\tvar val1 = obj1[i],\n\t\t\t\t\t\tval2 = obj2[i];\n\t\t\t\t\tif (Base.isPlainObject(val1) && Base.isPlainObject(val2)) {\n\t\t\t\t\t\tif (!matchObject(val1, val2))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if (!Base.equals(val1, val2)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tif (typeof name === 'object') {\n\t\t\tfor (var key in name) {\n\t\t\t\tif (name.hasOwnProperty(key) && !this.matches(key, name[key]))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tvar value = /^(empty|editable)$/.test(name)\n\t\t\t\t\t? this['is' + Base.capitalize(name)]()\n\t\t\t\t\t: name === 'type'\n\t\t\t\t\t\t? Base.hyphenate(this._class)\n\t\t\t\t\t\t: this[name];\n\t\t\tif (/^(constructor|class)$/.test(name)) {\n\t\t\t\tif (!(this instanceof compare))\n\t\t\t\t\treturn false;\n\t\t\t} else if (compare instanceof RegExp) {\n\t\t\t\tif (!compare.test(value))\n\t\t\t\t\treturn false;\n\t\t\t} else if (typeof compare === 'function') {\n\t\t\t\tif (!compare(value))\n\t\t\t\t\treturn false;\n\t\t\t} else if (Base.isPlainObject(compare)) {\n\t\t\t\tif (!matchObject(compare, value))\n\t\t\t\t\treturn false;\n\t\t\t} else if (!Base.equals(value, compare)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t},\n\n\tgetItems: function(match) {\n\t\treturn Item._getItems(this._children, match, this._matrix);\n\t},\n\n\tgetItem: function(match) {\n\t\treturn Item._getItems(this._children, match, this._matrix, null, true)\n\t\t\t\t[0] || null;\n\t},\n\n\tstatics: {\n\t\t_getItems: function _getItems(children, match, matrix, param,\n\t\t\t\tfirstOnly) {\n\t\t\tif (!param) {\n\t\t\t\tvar overlapping = match.overlapping,\n\t\t\t\t\tinside = match.inside,\n\t\t\t\t\tbounds = overlapping || inside,\n\t\t\t\t\trect =\tbounds && Rectangle.read([bounds]);\n\t\t\t\tparam = {\n\t\t\t\t\titems: [],\n\t\t\t\t\tinside: rect,\n\t\t\t\t\toverlapping: overlapping && new Path.Rectangle({\n\t\t\t\t\t\trectangle: rect,\n\t\t\t\t\t\tinsert: false\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t\tif (bounds)\n\t\t\t\t\tmatch = Base.set({}, match,\n\t\t\t\t\t\t\t{ inside: true, overlapping: true });\n\t\t\t}\n\t\t\tvar items = param.items,\n\t\t\t\tinside = param.inside,\n\t\t\t\toverlapping = param.overlapping;\n\t\t\tmatrix = inside && (matrix || new Matrix());\n\t\t\tfor (var i = 0, l = children && children.length; i < l; i++) {\n\t\t\t\tvar child = children[i],\n\t\t\t\t\tchildMatrix = matrix && matrix.chain(child._matrix),\n\t\t\t\t\tadd = true;\n\t\t\t\tif (inside) {\n\t\t\t\t\tvar bounds = child.getBounds(childMatrix);\n\t\t\t\t\tif (!inside.intersects(bounds))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (!(inside && inside.contains(bounds)) && !(overlapping\n\t\t\t\t\t\t\t&& overlapping.intersects(child, childMatrix)))\n\t\t\t\t\t\tadd = false;\n\t\t\t\t}\n\t\t\t\tif (add && child.matches(match)) {\n\t\t\t\t\titems.push(child);\n\t\t\t\t\tif (firstOnly)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_getItems(child._children, match,\n\t\t\t\t\t\tchildMatrix, param,\n\t\t\t\t\t\tfirstOnly);\n\t\t\t\tif (firstOnly && items.length > 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn items;\n\t\t}\n\t}\n}, {\n\n\timportJSON: function(json) {\n\t\tvar res = Base.importJSON(json, this);\n\t\treturn res !== this\n\t\t\t\t? this.addChild(res)\n\t\t\t\t: res;\n\t},\n\n\taddChild: function(item, _preserve) {\n\t\treturn this.insertChild(undefined, item, _preserve);\n\t},\n\n\tinsertChild: function(index, item, _preserve) {\n\t\tvar res = item ? this.insertChildren(index, [item], _preserve) : null;\n\t\treturn res && res[0];\n\t},\n\n\taddChildren: function(items, _preserve) {\n\t\treturn this.insertChildren(this._children.length, items, _preserve);\n\t},\n\n\tinsertChildren: function(index, items, _preserve, _proto) {\n\t\tvar children = this._children;\n\t\tif (children && items && items.length > 0) {\n\t\t\titems = Array.prototype.slice.apply(items);\n\t\t\tfor (var i = items.length - 1; i >= 0; i--) {\n\t\t\t\tvar item = items[i];\n\t\t\t\tif (_proto && !(item instanceof _proto)) {\n\t\t\t\t\titems.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\tvar shift = item._parent === this && item._index < index;\n\t\t\t\t\tif (item._remove(false, true) && shift)\n\t\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tBase.splice(children, items, index, 0);\n\t\t\tvar project = this._project,\n\t\t\t\tnotifySelf = project && project._changes;\n\t\t\tfor (var i = 0, l = items.length; i < l; i++) {\n\t\t\t\tvar item = items[i];\n\t\t\t\titem._parent = this;\n\t\t\t\titem._setProject(this._project, true);\n\t\t\t\tif (item._name)\n\t\t\t\t\titem.setName(item._name);\n\t\t\t\tif (notifySelf)\n\t\t\t\t\tthis._changed(5);\n\t\t\t}\n\t\t\tthis._changed(11);\n\t\t} else {\n\t\t\titems = null;\n\t\t}\n\t\treturn items;\n\t},\n\n\t_insertSibling: function(index, item, _preserve) {\n\t\treturn this._parent\n\t\t\t\t? this._parent.insertChild(index, item, _preserve)\n\t\t\t\t: null;\n\t},\n\n\tinsertAbove: function(item, _preserve) {\n\t\treturn item._insertSibling(item._index + 1, this, _preserve);\n\t},\n\n\tinsertBelow: function(item, _preserve) {\n\t\treturn item._insertSibling(item._index, this, _preserve);\n\t},\n\n\tsendToBack: function() {\n\t\treturn (this._parent || this instanceof Layer && this._project)\n\t\t\t\t.insertChild(0, this);\n\t},\n\n\tbringToFront: function() {\n\t\treturn (this._parent || this instanceof Layer && this._project)\n\t\t\t\t.addChild(this);\n\t},\n\n\tappendTop: '#addChild',\n\n\tappendBottom: function(item) {\n\t\treturn this.insertChild(0, item);\n\t},\n\n\tmoveAbove: '#insertAbove',\n\n\tmoveBelow: '#insertBelow',\n\n\treduce: function() {\n\t\tif (this._children && this._children.length === 1) {\n\t\t\tvar child = this._children[0].reduce();\n\t\t\tchild.insertAbove(this);\n\t\t\tchild.setStyle(this._style);\n\t\t\tthis.remove();\n\t\t\treturn child;\n\t\t}\n\t\treturn this;\n\t},\n\n\t_removeNamed: function() {\n\t\tvar parent = this._parent;\n\t\tif (parent) {\n\t\t\tvar children = parent._children,\n\t\t\t\tnamedChildren = parent._namedChildren,\n\t\t\t\tname = this._name,\n\t\t\t\tnamedArray = namedChildren[name],\n\t\t\t\tindex = namedArray ? namedArray.indexOf(this) : -1;\n\t\t\tif (index !== -1) {\n\t\t\t\tif (children[name] == this)\n\t\t\t\t\tdelete children[name];\n\t\t\t\tnamedArray.splice(index, 1);\n\t\t\t\tif (namedArray.length) {\n\t\t\t\t\tchildren[name] = namedArray[namedArray.length - 1];\n\t\t\t\t} else {\n\t\t\t\t\tdelete namedChildren[name];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_remove: function(notifySelf, notifyParent) {\n\t\tvar parent = this._parent;\n\t\tif (parent) {\n\t\t\tif (this._name)\n\t\t\t\tthis._removeNamed();\n\t\t\tif (this._index != null)\n\t\t\t\tBase.splice(parent._children, null, this._index, 1);\n\t\t\tthis._installEvents(false);\n\t\t\tif (notifySelf) {\n\t\t\t\tvar project = this._project;\n\t\t\t\tif (project && project._changes)\n\t\t\t\t\tthis._changed(5);\n\t\t\t}\n\t\t\tif (notifyParent)\n\t\t\t\tparent._changed(11);\n\t\t\tthis._parent = null;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tremove: function() {\n\t\treturn this._remove(true, true);\n\t},\n\n\treplaceWith: function(item) {\n\t\tvar ok = item && item.insertBelow(this);\n\t\tif (ok)\n\t\t\tthis.remove();\n\t\treturn ok;\n\t},\n\n\tremoveChildren: function(from, to) {\n\t\tif (!this._children)\n\t\t\treturn null;\n\t\tfrom = from || 0;\n\t\tto = Base.pick(to, this._children.length);\n\t\tvar removed = Base.splice(this._children, null, from, to - from);\n\t\tfor (var i = removed.length - 1; i >= 0; i--) {\n\t\t\tremoved[i]._remove(true, false);\n\t\t}\n\t\tif (removed.length > 0)\n\t\t\tthis._changed(11);\n\t\treturn removed;\n\t},\n\n\tclear: '#removeChildren',\n\n\treverseChildren: function() {\n\t\tif (this._children) {\n\t\t\tthis._children.reverse();\n\t\t\tfor (var i = 0, l = this._children.length; i < l; i++)\n\t\t\t\tthis._children[i]._index = i;\n\t\t\tthis._changed(11);\n\t\t}\n\t},\n\n\tisEmpty: function() {\n\t\treturn !this._children || this._children.length === 0;\n\t},\n\n\tisEditable: function() {\n\t\tvar item = this;\n\t\twhile (item) {\n\t\t\tif (!item._visible || item._locked)\n\t\t\t\treturn false;\n\t\t\titem = item._parent;\n\t\t}\n\t\treturn true;\n\t},\n\n\thasFill: function() {\n\t\treturn this.getStyle().hasFill();\n\t},\n\n\thasStroke: function() {\n\t\treturn this.getStyle().hasStroke();\n\t},\n\n\thasShadow: function() {\n\t\treturn this.getStyle().hasShadow();\n\t},\n\n\t_getOrder: function(item) {\n\t\tfunction getList(item) {\n\t\t\tvar list = [];\n\t\t\tdo {\n\t\t\t\tlist.unshift(item);\n\t\t\t} while (item = item._parent);\n\t\t\treturn list;\n\t\t}\n\t\tvar list1 = getList(this),\n\t\t\tlist2 = getList(item);\n\t\tfor (var i = 0, l = Math.min(list1.length, list2.length); i < l; i++) {\n\t\t\tif (list1[i] != list2[i]) {\n\t\t\t\treturn list1[i]._index < list2[i]._index ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t},\n\n\thasChildren: function() {\n\t\treturn this._children && this._children.length > 0;\n\t},\n\n\tisInserted: function() {\n\t\treturn this._parent ? this._parent.isInserted() : false;\n\t},\n\n\tisAbove: function(item) {\n\t\treturn this._getOrder(item) === -1;\n\t},\n\n\tisBelow: function(item) {\n\t\treturn this._getOrder(item) === 1;\n\t},\n\n\tisParent: function(item) {\n\t\treturn this._parent === item;\n\t},\n\n\tisChild: function(item) {\n\t\treturn item && item._parent === this;\n\t},\n\n\tisDescendant: function(item) {\n\t\tvar parent = this;\n\t\twhile (parent = parent._parent) {\n\t\t\tif (parent == item)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tisAncestor: function(item) {\n\t\treturn item ? item.isDescendant(this) : false;\n\t},\n\n\tisGroupedWith: function(item) {\n\t\tvar parent = this._parent;\n\t\twhile (parent) {\n\t\t\tif (parent._parent\n\t\t\t\t&& /^(Group|Layer|CompoundPath)$/.test(parent._class)\n\t\t\t\t&& item.isDescendant(parent))\n\t\t\t\t\treturn true;\n\t\t\tparent = parent._parent;\n\t\t}\n\t\treturn false;\n\t},\n\n\ttranslate: function() {\n\t\tvar mx = new Matrix();\n\t\treturn this.transform(mx.translate.apply(mx, arguments));\n\t},\n\n\trotate: function(angle ) {\n\t\treturn this.transform(new Matrix().rotate(angle,\n\t\t\t\tPoint.read(arguments, 1, { readNull: true })\n\t\t\t\t\t|| this.getPosition(true)));\n\t}\n}, Base.each(['scale', 'shear', 'skew'], function(name) {\n\tthis[name] = function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tcenter = Point.read(arguments, 0, { readNull: true });\n\t\treturn this.transform(new Matrix()[name](point,\n\t\t\t\tcenter || this.getPosition(true)));\n\t};\n}, {\n\n}), {\n\ttransform: function(matrix, _applyMatrix, _applyRecursively,\n\t\t\t_setApplyMatrix) {\n\t\tif (matrix && matrix.isIdentity())\n\t\t\tmatrix = null;\n\t\tvar _matrix = this._matrix,\n\t\t\tapplyMatrix = (_applyMatrix || this._applyMatrix)\n\t\t\t\t\t&& ((!_matrix.isIdentity() || matrix)\n\t\t\t\t\t\t|| _applyMatrix && _applyRecursively && this._children);\n\t\tif (!matrix && !applyMatrix)\n\t\t\treturn this;\n\t\tif (matrix)\n\t\t\t_matrix.preConcatenate(matrix);\n\t\tif (applyMatrix = applyMatrix && this._transformContent(_matrix,\n\t\t\t\t\t_applyRecursively, _setApplyMatrix)) {\n\t\t\tvar pivot = this._pivot,\n\t\t\t\tstyle = this._style,\n\t\t\t\tfillColor = style.getFillColor(true),\n\t\t\t\tstrokeColor = style.getStrokeColor(true);\n\t\t\tif (pivot)\n\t\t\t\t_matrix._transformPoint(pivot, pivot, true);\n\t\t\tif (fillColor)\n\t\t\t\tfillColor.transform(_matrix);\n\t\t\tif (strokeColor)\n\t\t\t\tstrokeColor.transform(_matrix);\n\t\t\t_matrix.reset(true);\n\t\t\tif (_setApplyMatrix && this._canApplyMatrix)\n\t\t\t\tthis._applyMatrix = true;\n\t\t}\n\t\tvar bounds = this._bounds,\n\t\t\tposition = this._position;\n\t\tthis._changed(9);\n\t\tvar decomp = bounds && matrix && matrix.decompose();\n\t\tif (decomp && !decomp.shearing && decomp.rotation % 90 === 0) {\n\t\t\tfor (var key in bounds) {\n\t\t\t\tvar rect = bounds[key];\n\t\t\t\tif (applyMatrix || !rect._internal)\n\t\t\t\t\tmatrix._transformBounds(rect, rect);\n\t\t\t}\n\t\t\tvar getter = this._boundsGetter,\n\t\t\t\trect = bounds[getter && getter.getBounds || getter || 'getBounds'];\n\t\t\tif (rect)\n\t\t\t\tthis._position = rect.getCenter(true);\n\t\t\tthis._bounds = bounds;\n\t\t} else if (matrix && position) {\n\t\t\tthis._position = matrix._transformPoint(position, position);\n\t\t}\n\t\treturn this;\n\t},\n\n\t_transformContent: function(matrix, applyRecursively, setApplyMatrix) {\n\t\tvar children = this._children;\n\t\tif (children) {\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tchildren[i].transform(matrix, true, applyRecursively,\n\t\t\t\t\t\tsetApplyMatrix);\n\t\t\treturn true;\n\t\t}\n\t},\n\n\tglobalToLocal: function() {\n\t\treturn this.getGlobalMatrix(true)._inverseTransform(\n\t\t\t\tPoint.read(arguments));\n\t},\n\n\tlocalToGlobal: function() {\n\t\treturn this.getGlobalMatrix(true)._transformPoint(\n\t\t\t\tPoint.read(arguments));\n\t},\n\n\tparentToLocal: function() {\n\t\treturn this._matrix._inverseTransform(Point.read(arguments));\n\t},\n\n\tlocalToParent: function() {\n\t\treturn this._matrix._transformPoint(Point.read(arguments));\n\t},\n\n\tfitBounds: function(rectangle, fill) {\n\t\trectangle = Rectangle.read(arguments);\n\t\tvar bounds = this.getBounds(),\n\t\t\titemRatio = bounds.height / bounds.width,\n\t\t\trectRatio = rectangle.height / rectangle.width,\n\t\t\tscale = (fill ? itemRatio > rectRatio : itemRatio < rectRatio)\n\t\t\t\t\t? rectangle.width / bounds.width\n\t\t\t\t\t: rectangle.height / bounds.height,\n\t\t\tnewBounds = new Rectangle(new Point(),\n\t\t\t\t\tnew Size(bounds.width * scale, bounds.height * scale));\n\t\tnewBounds.setCenter(rectangle.getCenter());\n\t\tthis.setBounds(newBounds);\n\t},\n\n\t_setStyles: function(ctx) {\n\t\tvar style = this._style,\n\t\t\tfillColor = style.getFillColor(),\n\t\t\tstrokeColor = style.getStrokeColor(),\n\t\t\tshadowColor = style.getShadowColor();\n\t\tif (fillColor)\n\t\t\tctx.fillStyle = fillColor.toCanvasStyle(ctx);\n\t\tif (strokeColor) {\n\t\t\tvar strokeWidth = style.getStrokeWidth();\n\t\t\tif (strokeWidth > 0) {\n\t\t\t\tctx.strokeStyle = strokeColor.toCanvasStyle(ctx);\n\t\t\t\tctx.lineWidth = strokeWidth;\n\t\t\t\tvar strokeJoin = style.getStrokeJoin(),\n\t\t\t\t\tstrokeCap = style.getStrokeCap(),\n\t\t\t\t\tmiterLimit = style.getMiterLimit();\n\t\t\t\tif (strokeJoin)\n\t\t\t\t\tctx.lineJoin = strokeJoin;\n\t\t\t\tif (strokeCap)\n\t\t\t\t\tctx.lineCap = strokeCap;\n\t\t\t\tif (miterLimit)\n\t\t\t\t\tctx.miterLimit = miterLimit;\n\t\t\t\tif (paper.support.nativeDash) {\n\t\t\t\t\tvar dashArray = style.getDashArray(),\n\t\t\t\t\t\tdashOffset = style.getDashOffset();\n\t\t\t\t\tif (dashArray && dashArray.length) {\n\t\t\t\t\t\tif ('setLineDash' in ctx) {\n\t\t\t\t\t\t\tctx.setLineDash(dashArray);\n\t\t\t\t\t\t\tctx.lineDashOffset = dashOffset;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tctx.mozDash = dashArray;\n\t\t\t\t\t\t\tctx.mozDashOffset = dashOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (shadowColor) {\n\t\t\tvar shadowBlur = style.getShadowBlur();\n\t\t\tif (shadowBlur > 0) {\n\t\t\t\tctx.shadowColor = shadowColor.toCanvasStyle(ctx);\n\t\t\t\tctx.shadowBlur = shadowBlur;\n\t\t\t\tvar offset = this.getShadowOffset();\n\t\t\t\tctx.shadowOffsetX = offset.x;\n\t\t\t\tctx.shadowOffsetY = offset.y;\n\t\t\t}\n\t\t}\n\t},\n\n\tdraw: function(ctx, param, parentStrokeMatrix) {\n\t\tvar updateVersion = this._updateVersion = this._project._updateVersion;\n\t\tif (!this._visible || this._opacity === 0)\n\t\t\treturn;\n\t\tvar matrices = param.matrices,\n\t\t\tviewMatrix = param.viewMatrix,\n\t\t\tmatrix = this._matrix,\n\t\t\tglobalMatrix = matrices[matrices.length - 1].chain(matrix);\n\t\tif (!globalMatrix.isInvertible())\n\t\t\treturn;\n\n\t\tfunction getViewMatrix(matrix) {\n\t\t\treturn viewMatrix ? viewMatrix.chain(matrix) : matrix;\n\t\t}\n\n\t\tmatrices.push(globalMatrix);\n\t\tif (param.updateMatrix) {\n\t\t\tglobalMatrix._updateVersion = updateVersion;\n\t\t\tthis._globalMatrix = globalMatrix;\n\t\t}\n\n\t\tvar blendMode = this._blendMode,\n\t\t\topacity = this._opacity,\n\t\t\tnormalBlend = blendMode === 'normal',\n\t\t\tnativeBlend = BlendMode.nativeModes[blendMode],\n\t\t\tdirect = normalBlend && opacity === 1\n\t\t\t\t\t|| param.dontStart\n\t\t\t\t\t|| param.clip\n\t\t\t\t\t|| (nativeBlend || normalBlend && opacity < 1)\n\t\t\t\t\t\t&& this._canComposite(),\n\t\t\tpixelRatio = param.pixelRatio,\n\t\t\tmainCtx, itemOffset, prevOffset;\n\t\tif (!direct) {\n\t\t\tvar bounds = this.getStrokeBounds(getViewMatrix(globalMatrix));\n\t\t\tif (!bounds.width || !bounds.height)\n\t\t\t\treturn;\n\t\t\tprevOffset = param.offset;\n\t\t\titemOffset = param.offset = bounds.getTopLeft().floor();\n\t\t\tmainCtx = ctx;\n\t\t\tctx = CanvasProvider.getContext(bounds.getSize().ceil().add(1)\n\t\t\t\t\t.multiply(pixelRatio));\n\t\t\tif (pixelRatio !== 1)\n\t\t\t\tctx.scale(pixelRatio, pixelRatio);\n\t\t}\n\t\tctx.save();\n\t\tvar strokeMatrix = parentStrokeMatrix\n\t\t\t\t? parentStrokeMatrix.chain(matrix)\n\t\t\t\t: !this.getStrokeScaling(true) && getViewMatrix(globalMatrix),\n\t\t\tclip = !direct && param.clipItem,\n\t\t\ttransform = !strokeMatrix || clip;\n\t\tif (direct) {\n\t\t\tctx.globalAlpha = opacity;\n\t\t\tif (nativeBlend)\n\t\t\t\tctx.globalCompositeOperation = blendMode;\n\t\t} else if (transform) {\n\t\t\tctx.translate(-itemOffset.x, -itemOffset.y);\n\t\t}\n\t\tif (transform)\n\t\t\t(direct ? matrix : getViewMatrix(globalMatrix)).applyToContext(ctx);\n\t\tif (clip)\n\t\t\tparam.clipItem.draw(ctx, param.extend({ clip: true }));\n\t\tif (strokeMatrix) {\n\t\t\tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\t\t\tvar offset = param.offset;\n\t\t\tif (offset)\n\t\t\t\tctx.translate(-offset.x, -offset.y);\n\t\t}\n\t\tthis._draw(ctx, param, strokeMatrix);\n\t\tctx.restore();\n\t\tmatrices.pop();\n\t\tif (param.clip && !param.dontFinish)\n\t\t\tctx.clip();\n\t\tif (!direct) {\n\t\t\tBlendMode.process(blendMode, ctx, mainCtx, opacity,\n\t\t\t\t\titemOffset.subtract(prevOffset).multiply(pixelRatio));\n\t\t\tCanvasProvider.release(ctx);\n\t\t\tparam.offset = prevOffset;\n\t\t}\n\t},\n\n\t_isUpdated: function(updateVersion) {\n\t\tvar parent = this._parent;\n\t\tif (parent instanceof CompoundPath)\n\t\t\treturn parent._isUpdated(updateVersion);\n\t\tvar updated = this._updateVersion === updateVersion;\n\t\tif (!updated && parent && parent._visible\n\t\t\t\t&& parent._isUpdated(updateVersion)) {\n\t\t\tthis._updateVersion = updateVersion;\n\t\t\tupdated = true;\n\t\t}\n\t\treturn updated;\n\t},\n\n\t_drawSelection: function(ctx, matrix, size, selectedItems, updateVersion) {\n\t\tif ((this._drawSelected || this._boundsSelected)\n\t\t\t\t&& this._isUpdated(updateVersion)) {\n\t\t\tvar color = this.getSelectedColor(true)\n\t\t\t\t\t|| this.getLayer().getSelectedColor(true),\n\t\t\t\tmx = matrix.chain(this.getGlobalMatrix(true));\n\t\t\tctx.strokeStyle = ctx.fillStyle = color\n\t\t\t\t\t? color.toCanvasStyle(ctx) : '#009dec';\n\t\t\tif (this._drawSelected)\n\t\t\t\tthis._drawSelected(ctx, mx, selectedItems);\n\t\t\tif (this._boundsSelected) {\n\t\t\t\tvar half = size / 2;\n\t\t\t\t\tcoords = mx._transformCorners(this.getInternalBounds());\n\t\t\t\tctx.beginPath();\n\t\t\t\tfor (var i = 0; i < 8; i++)\n\t\t\t\t\tctx[i === 0 ? 'moveTo' : 'lineTo'](coords[i], coords[++i]);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.stroke();\n\t\t\t\tfor (var i = 0; i < 8; i++)\n\t\t\t\t\tctx.fillRect(coords[i] - half, coords[++i] - half,\n\t\t\t\t\t\t\tsize, size);\n\t\t\t}\n\t\t}\n\t},\n\n\t_canComposite: function() {\n\t\treturn false;\n\t}\n}, Base.each(['down', 'drag', 'up', 'move'], function(name) {\n\tthis['removeOn' + Base.capitalize(name)] = function() {\n\t\tvar hash = {};\n\t\thash[name] = true;\n\t\treturn this.removeOn(hash);\n\t};\n}, {\n\n\tremoveOn: function(obj) {\n\t\tfor (var name in obj) {\n\t\t\tif (obj[name]) {\n\t\t\t\tvar key = 'mouse' + name,\n\t\t\t\t\tproject = this._project,\n\t\t\t\t\tsets = project._removeSets = project._removeSets || {};\n\t\t\t\tsets[key] = sets[key] || {};\n\t\t\t\tsets[key][this._id] = this;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n}));\n\nvar Group = Item.extend({\n\t_class: 'Group',\n\t_selectChildren: true,\n\t_serializeFields: {\n\t\tchildren: []\n\t},\n\n\tinitialize: function Group(arg) {\n\t\tthis._children = [];\n\t\tthis._namedChildren = {};\n\t\tif (!this._initialize(arg))\n\t\t\tthis.addChildren(Array.isArray(arg) ? arg : arguments);\n\t},\n\n\t_changed: function _changed(flags) {\n\t\t_changed.base.call(this, flags);\n\t\tif (flags & 1026) {\n\t\t\tthis._clipItem = undefined;\n\t\t}\n\t},\n\n\t_getClipItem: function() {\n\t\tvar clipItem = this._clipItem;\n\t\tif (clipItem === undefined) {\n\t\t\tclipItem = null;\n\t\t\tfor (var i = 0, l = this._children.length; i < l; i++) {\n\t\t\t\tvar child = this._children[i];\n\t\t\t\tif (child._clipMask) {\n\t\t\t\t\tclipItem = child;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._clipItem = clipItem;\n\t\t}\n\t\treturn clipItem;\n\t},\n\n\tisClipped: function() {\n\t\treturn !!this._getClipItem();\n\t},\n\n\tsetClipped: function(clipped) {\n\t\tvar child = this.getFirstChild();\n\t\tif (child)\n\t\t\tchild.setClipMask(clipped);\n\t},\n\n\t_draw: function(ctx, param) {\n\t\tvar clip = param.clip,\n\t\t\tclipItem = !clip && this._getClipItem(),\n\t\t\tdraw = true;\n\t\tparam = param.extend({ clipItem: clipItem, clip: false });\n\t\tif (clip) {\n\t\t\tif (this._currentPath) {\n\t\t\t\tctx.currentPath = this._currentPath;\n\t\t\t\tdraw = false;\n\t\t\t} else {\n\t\t\t\tctx.beginPath();\n\t\t\t\tparam.dontStart = param.dontFinish = true;\n\t\t\t}\n\t\t} else if (clipItem) {\n\t\t\tclipItem.draw(ctx, param.extend({ clip: true }));\n\t\t}\n\t\tif (draw) {\n\t\t\tfor (var i = 0, l = this._children.length; i < l; i++) {\n\t\t\t\tvar item = this._children[i];\n\t\t\t\tif (item !== clipItem)\n\t\t\t\t\titem.draw(ctx, param);\n\t\t\t}\n\t\t}\n\t\tif (clip) {\n\t\t\tthis._currentPath = ctx.currentPath;\n\t\t}\n\t}\n});\n\nvar Layer = Group.extend({\n\t_class: 'Layer',\n\n\tinitialize: function Layer(arg) {\n\t\tvar props = Base.isPlainObject(arg)\n\t\t\t\t? new Base(arg)\n\t\t\t\t: { children: Array.isArray(arg) ? arg : arguments },\n\t\t\tinsert = props.insert;\n\t\tprops.insert = false;\n\t\tGroup.call(this, props);\n\t\tif (insert || insert === undefined) {\n\t\t\tthis._project.addChild(this);\n\t\t\tthis.activate();\n\t\t}\n\t},\n\n\t_remove: function _remove(notifySelf, notifyParent) {\n\t\tif (this._parent)\n\t\t\treturn _remove.base.call(this, notifySelf, notifyParent);\n\t\tif (this._index != null) {\n\t\t\tvar project = this._project;\n\t\t\tif (project._activeLayer === this)\n\t\t\t\tproject._activeLayer = this.getNextSibling()\n\t\t\t\t\t\t|| this.getPreviousSibling();\n\t\t\tBase.splice(project.layers, null, this._index, 1);\n\t\t\tthis._installEvents(false);\n\t\t\tif (notifySelf && project._changes)\n\t\t\t\tthis._changed(5);\n\t\t\tif (notifyParent) {\n\t\t\t\tproject._needsUpdate = true;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tgetNextSibling: function getNextSibling() {\n\t\treturn this._parent ? getNextSibling.base.call(this)\n\t\t\t\t: this._project.layers[this._index + 1] || null;\n\t},\n\n\tgetPreviousSibling: function getPreviousSibling() {\n\t\treturn this._parent ? getPreviousSibling.base.call(this)\n\t\t\t\t: this._project.layers[this._index - 1] || null;\n\t},\n\n\tisInserted: function isInserted() {\n\t\treturn this._parent ? isInserted.base.call(this) : this._index != null;\n\t},\n\n\tactivate: function() {\n\t\tthis._project._activeLayer = this;\n\t},\n\n\t_insertSibling: function _insertSibling(index, item, _preserve) {\n\t\treturn !this._parent\n\t\t\t\t? this._project.insertChild(index, item, _preserve)\n\t\t\t\t: _insertSibling.base.call(this, index, item, _preserve);\n\t}\n});\n\nvar Shape = Item.extend({\n\t_class: 'Shape',\n\t_applyMatrix: false,\n\t_canApplyMatrix: false,\n\t_boundsSelected: true,\n\t_serializeFields: {\n\t\ttype: null,\n\t\tsize: null,\n\t\tradius: null\n\t},\n\n\tinitialize: function Shape(props) {\n\t\tthis._initialize(props);\n\t},\n\n\t_equals: function(item) {\n\t\treturn this._type === item._type\n\t\t\t&& this._size.equals(item._size)\n\t\t\t&& Base.equals(this._radius, item._radius);\n\t},\n\n\tclone: function(insert) {\n\t\tvar copy = new Shape(Item.NO_INSERT);\n\t\tcopy.setType(this._type);\n\t\tcopy.setSize(this._size);\n\t\tcopy.setRadius(this._radius);\n\t\treturn this._clone(copy, insert);\n\t},\n\n\tgetType: function() {\n\t\treturn this._type;\n\t},\n\n\tsetType: function(type) {\n\t\tthis._type = type;\n\t},\n\n\tgetShape: '#getType',\n\tsetShape: '#setType',\n\n\tgetSize: function() {\n\t\tvar size = this._size;\n\t\treturn new LinkedSize(size.width, size.height, this, 'setSize');\n\t},\n\n\tsetSize: function() {\n\t\tvar size = Size.read(arguments);\n\t\tif (!this._size) {\n\t\t\tthis._size = size.clone();\n\t\t} else if (!this._size.equals(size)) {\n\t\t\tvar type = this._type,\n\t\t\t\twidth = size.width,\n\t\t\t\theight = size.height;\n\t\t\tif (type === 'rectangle') {\n\t\t\t\tvar radius = Size.min(this._radius, size.divide(2));\n\t\t\t\tthis._radius.set(radius.width, radius.height);\n\t\t\t} else if (type === 'circle') {\n\t\t\t\twidth = height = (width + height) / 2;\n\t\t\t\tthis._radius = width / 2;\n\t\t\t} else if (type === 'ellipse') {\n\t\t\t\tthis._radius.set(width / 2, height / 2);\n\t\t\t}\n\t\t\tthis._size.set(width, height);\n\t\t\tthis._changed(9);\n\t\t}\n\t},\n\n\tgetRadius: function() {\n\t\tvar rad = this._radius;\n\t\treturn this._type === 'circle'\n\t\t\t\t? rad\n\t\t\t\t: new LinkedSize(rad.width, rad.height, this, 'setRadius');\n\t},\n\n\tsetRadius: function(radius) {\n\t\tvar type = this._type;\n\t\tif (type === 'circle') {\n\t\t\tif (radius === this._radius)\n\t\t\t\treturn;\n\t\t\tvar size = radius * 2;\n\t\t\tthis._radius = radius;\n\t\t\tthis._size.set(size, size);\n\t\t} else {\n\t\t\tradius = Size.read(arguments);\n\t\t\tif (!this._radius) {\n\t\t\t\tthis._radius = radius.clone();\n\t\t\t} else {\n\t\t\t\tif (this._radius.equals(radius))\n\t\t\t\t\treturn;\n\t\t\t\tthis._radius.set(radius.width, radius.height);\n\t\t\t\tif (type === 'rectangle') {\n\t\t\t\t\tvar size = Size.max(this._size, radius.multiply(2));\n\t\t\t\t\tthis._size.set(size.width, size.height);\n\t\t\t\t} else if (type === 'ellipse') {\n\t\t\t\t\tthis._size.set(radius.width * 2, radius.height * 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._changed(9);\n\t},\n\n\tisEmpty: function() {\n\t\treturn false;\n\t},\n\n\ttoPath: function(insert) {\n\t\tvar path = new Path[Base.capitalize(this._type)]({\n\t\t\tcenter: new Point(),\n\t\t\tsize: this._size,\n\t\t\tradius: this._radius,\n\t\t\tinsert: false\n\t\t});\n\t\tpath.setStyle(this._style);\n\t\tpath.transform(this._matrix);\n\t\tif (insert || insert === undefined)\n\t\t\tpath.insertAbove(this);\n\t\treturn path;\n\t},\n\n\t_draw: function(ctx, param, strokeMatrix) {\n\t\tvar style = this._style,\n\t\t\thasFill = style.hasFill(),\n\t\t\thasStroke = style.hasStroke(),\n\t\t\tdontPaint = param.dontFinish || param.clip,\n\t\t\tuntransformed = !strokeMatrix;\n\t\tif (hasFill || hasStroke || dontPaint) {\n\t\t\tvar type = this._type,\n\t\t\t\tradius = this._radius,\n\t\t\t\tisCircle = type === 'circle';\n\t\t\tif (!param.dontStart)\n\t\t\t\tctx.beginPath();\n\t\t\tif (untransformed && isCircle) {\n\t\t\t\tctx.arc(0, 0, radius, 0, Math.PI * 2, true);\n\t\t\t} else {\n\t\t\t\tvar rx = isCircle ? radius : radius.width,\n\t\t\t\t\try = isCircle ? radius : radius.height,\n\t\t\t\t\tsize = this._size,\n\t\t\t\t\twidth = size.width,\n\t\t\t\t\theight = size.height;\n\t\t\t\tif (untransformed && type === 'rect' && rx === 0 && ry === 0) {\n\t\t\t\t\tctx.rect(-width / 2, -height / 2, width, height);\n\t\t\t\t} else {\n\t\t\t\t\tvar x = width / 2,\n\t\t\t\t\t\ty = height / 2,\n\t\t\t\t\t\tkappa = 1 - 0.5522847498307936,\n\t\t\t\t\t\tcx = rx * kappa,\n\t\t\t\t\t\tcy = ry * kappa,\n\t\t\t\t\t\tc = [\n\t\t\t\t\t\t\t-x, -y + ry,\n\t\t\t\t\t\t\t-x, -y + cy,\n\t\t\t\t\t\t\t-x + cx, -y,\n\t\t\t\t\t\t\t-x + rx, -y,\n\t\t\t\t\t\t\tx - rx, -y,\n\t\t\t\t\t\t\tx - cx, -y,\n\t\t\t\t\t\t\tx, -y + cy,\n\t\t\t\t\t\t\tx, -y + ry,\n\t\t\t\t\t\t\tx, y - ry,\n\t\t\t\t\t\t\tx, y - cy,\n\t\t\t\t\t\t\tx - cx, y,\n\t\t\t\t\t\t\tx - rx, y,\n\t\t\t\t\t\t\t-x + rx, y,\n\t\t\t\t\t\t\t-x + cx, y,\n\t\t\t\t\t\t\t-x, y - cy,\n\t\t\t\t\t\t\t-x, y - ry\n\t\t\t\t\t\t];\n\t\t\t\t\tif (strokeMatrix)\n\t\t\t\t\t\tstrokeMatrix.transform(c, c, 32);\n\t\t\t\t\tctx.moveTo(c[0], c[1]);\n\t\t\t\t\tctx.bezierCurveTo(c[2], c[3], c[4], c[5], c[6], c[7]);\n\t\t\t\t\tif (x !== rx)\n\t\t\t\t\t\tctx.lineTo(c[8], c[9]);\n\t\t\t\t\tctx.bezierCurveTo(c[10], c[11], c[12], c[13], c[14], c[15]);\n\t\t\t\t\tif (y !== ry)\n\t\t\t\t\t\tctx.lineTo(c[16], c[17]);\n\t\t\t\t\tctx.bezierCurveTo(c[18], c[19], c[20], c[21], c[22], c[23]);\n\t\t\t\t\tif (x !== rx)\n\t\t\t\t\t\tctx.lineTo(c[24], c[25]);\n\t\t\t\t\tctx.bezierCurveTo(c[26], c[27], c[28], c[29], c[30], c[31]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tctx.closePath();\n\t\t}\n\t\tif (!dontPaint && (hasFill || hasStroke)) {\n\t\t\tthis._setStyles(ctx);\n\t\t\tif (hasFill) {\n\t\t\t\tctx.fill(style.getWindingRule());\n\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t}\n\t\t\tif (hasStroke)\n\t\t\t\tctx.stroke();\n\t\t}\n\t},\n\n\t_canComposite: function() {\n\t\treturn !(this.hasFill() && this.hasStroke());\n\t},\n\n\t_getBounds: function(getter, matrix) {\n\t\tvar rect = new Rectangle(this._size).setCenter(0, 0);\n\t\tif (getter !== 'getBounds' && this.hasStroke())\n\t\t\trect = rect.expand(this.getStrokeWidth());\n\t\treturn matrix ? matrix._transformBounds(rect) : rect;\n\t}\n},\nnew function() {\n\n\tfunction getCornerCenter(that, point, expand) {\n\t\tvar radius = that._radius;\n\t\tif (!radius.isZero()) {\n\t\t\tvar halfSize = that._size.divide(2);\n\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\tvar dir = new Point(i & 1 ? 1 : -1, i > 1 ? 1 : -1),\n\t\t\t\t\tcorner = dir.multiply(halfSize),\n\t\t\t\t\tcenter = corner.subtract(dir.multiply(radius)),\n\t\t\t\t\trect = new Rectangle(corner, center);\n\t\t\t\tif ((expand ? rect.expand(expand) : rect).contains(point))\n\t\t\t\t\treturn center;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getEllipseRadius(point, radius) {\n\t\tvar angle = point.getAngleInRadians(),\n\t\t\twidth = radius.width * 2,\n\t\t\theight = radius.height * 2,\n\t\t\tx = width * Math.sin(angle),\n\t\t\ty = height * Math.cos(angle);\n\t\treturn width * height / (2 * Math.sqrt(x * x + y * y));\n\t}\n\n\treturn {\n\t\t_contains: function _contains(point) {\n\t\t\tif (this._type === 'rectangle') {\n\t\t\t\tvar center = getCornerCenter(this, point);\n\t\t\t\treturn center\n\t\t\t\t\t\t? point.subtract(center).divide(this._radius)\n\t\t\t\t\t\t\t.getLength() <= 1\n\t\t\t\t\t\t: _contains.base.call(this, point);\n\t\t\t} else {\n\t\t\t\treturn point.divide(this.size).getLength() <= 0.5;\n\t\t\t}\n\t\t},\n\n\t\t_hitTestSelf: function _hitTestSelf(point, options) {\n\t\t\tvar hit = false;\n\t\t\tif (this.hasStroke()) {\n\t\t\t\tvar type = this._type,\n\t\t\t\t\tradius = this._radius,\n\t\t\t\t\tstrokeWidth = this.getStrokeWidth() + 2 * options.tolerance;\n\t\t\t\tif (type === 'rectangle') {\n\t\t\t\t\tvar center = getCornerCenter(this, point, strokeWidth);\n\t\t\t\t\tif (center) {\n\t\t\t\t\t\tvar pt = point.subtract(center);\n\t\t\t\t\t\thit = 2 * Math.abs(pt.getLength()\n\t\t\t\t\t\t\t\t- getEllipseRadius(pt, radius)) <= strokeWidth;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar rect = new Rectangle(this._size).setCenter(0, 0),\n\t\t\t\t\t\t\touter = rect.expand(strokeWidth),\n\t\t\t\t\t\t\tinner = rect.expand(-strokeWidth);\n\t\t\t\t\t\thit = outer._containsPoint(point)\n\t\t\t\t\t\t\t\t&& !inner._containsPoint(point);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (type === 'ellipse')\n\t\t\t\t\t\tradius = getEllipseRadius(point, radius);\n\t\t\t\t\thit = 2 * Math.abs(point.getLength() - radius)\n\t\t\t\t\t\t\t<= strokeWidth;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn hit\n\t\t\t\t\t? new HitResult('stroke', this)\n\t\t\t\t\t: _hitTestSelf.base.apply(this, arguments);\n\t\t}\n\t};\n}, {\n\nstatics: new function() {\n\tfunction createShape(type, point, size, radius, args) {\n\t\tvar item = new Shape(Base.getNamed(args));\n\t\titem._type = type;\n\t\titem._size = size;\n\t\titem._radius = radius;\n\t\treturn item.translate(point);\n\t}\n\n\treturn {\n\t\tCircle: function() {\n\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\tradius = Base.readNamed(arguments, 'radius');\n\t\t\treturn createShape('circle', center, new Size(radius * 2), radius,\n\t\t\t\t\targuments);\n\t\t},\n\n\t\tRectangle: function() {\n\t\t\tvar rect = Rectangle.readNamed(arguments, 'rectangle'),\n\t\t\t\tradius = Size.min(Size.readNamed(arguments, 'radius'),\n\t\t\t\t\t\trect.getSize(true).divide(2));\n\t\t\treturn createShape('rectangle', rect.getCenter(true),\n\t\t\t\t\trect.getSize(true), radius, arguments);\n\t\t},\n\n\t\tEllipse: function() {\n\t\t\tvar ellipse = Shape._readEllipse(arguments),\n\t\t\t\tradius = ellipse.radius;\n\t\t\treturn createShape('ellipse', ellipse.center, radius.multiply(2),\n\t\t\t\t\tradius, arguments);\n\t\t},\n\n\t\t_readEllipse: function(args) {\n\t\t\tvar center,\n\t\t\t\tradius;\n\t\t\tif (Base.hasNamed(args, 'radius')) {\n\t\t\t\tcenter = Point.readNamed(args, 'center');\n\t\t\t\tradius = Size.readNamed(args, 'radius');\n\t\t\t} else {\n\t\t\t\tvar rect = Rectangle.readNamed(args, 'rectangle');\n\t\t\t\tcenter = rect.getCenter(true);\n\t\t\t\tradius = rect.getSize(true).divide(2);\n\t\t\t}\n\t\t\treturn { center: center, radius: radius };\n\t\t}\n\t};\n}});\n\nvar Raster = Item.extend({\n\t_class: 'Raster',\n\t_applyMatrix: false,\n\t_canApplyMatrix: false,\n\t_boundsGetter: 'getBounds',\n\t_boundsSelected: true,\n\t_serializeFields: {\n\t\tsource: null\n\t},\n\n\tinitialize: function Raster(object, position) {\n\t\tif (!this._initialize(object,\n\t\t\t\tposition !== undefined && Point.read(arguments, 1))) {\n\t\t\tif (typeof object === 'string') {\n\t\t\t\tthis.setSource(object);\n\t\t\t} else {\n\t\t\t\tthis.setImage(object);\n\t\t\t}\n\t\t}\n\t\tif (!this._size) {\n\t\t\tthis._size = new Size();\n\t\t\tthis._loaded = false;\n\t\t}\n\t},\n\n\t_equals: function(item) {\n\t\treturn this.getSource() === item.getSource();\n\t},\n\n\tclone: function(insert) {\n\t\tvar copy = new Raster(Item.NO_INSERT),\n\t\t\timage = this._image,\n\t\t\tcanvas = this._canvas;\n\t\tif (image) {\n\t\t\tcopy.setImage(image);\n\t\t} else if (canvas) {\n\t\t\tvar copyCanvas = CanvasProvider.getCanvas(this._size);\n\t\t\tcopyCanvas.getContext('2d').drawImage(canvas, 0, 0);\n\t\t\tcopy.setImage(copyCanvas);\n\t\t}\n\t\treturn this._clone(copy, insert);\n\t},\n\n\tgetSize: function() {\n\t\tvar size = this._size;\n\t\treturn new LinkedSize(size ? size.width : 0, size ? size.height : 0,\n\t\t\t\tthis, 'setSize');\n\t},\n\n\tsetSize: function() {\n\t\tvar size = Size.read(arguments);\n\t\tif (!size.equals(this._size)) {\n\t\t\tif (size.width > 0 && size.height > 0) {\n\t\t\t\tvar element = this.getElement();\n\t\t\t\tthis.setImage(CanvasProvider.getCanvas(size));\n\t\t\t\tif (element)\n\t\t\t\t\tthis.getContext(true).drawImage(element, 0, 0,\n\t\t\t\t\t\t\tsize.width, size.height);\n\t\t\t} else {\n\t\t\t\tif (this._canvas)\n\t\t\t\t\tCanvasProvider.release(this._canvas);\n\t\t\t\tthis._size = size.clone();\n\t\t\t}\n\t\t}\n\t},\n\n\tgetWidth: function() {\n\t\treturn this._size ? this._size.width : 0;\n\t},\n\n\tsetWidth: function(width) {\n\t\tthis.setSize(width, this.getHeight());\n\t},\n\n\tgetHeight: function() {\n\t\treturn this._size ? this._size.height : 0;\n\t},\n\n\tsetHeight: function(height) {\n\t\tthis.setSize(this.getWidth(), height);\n\t},\n\n\tisEmpty: function() {\n\t\tvar size = this._size;\n\t\treturn !size || size.width === 0 && size.height === 0;\n\t},\n\n\tgetResolution: function() {\n\t\tvar matrix = this._matrix,\n\t\t\torig = new Point(0, 0).transform(matrix),\n\t\t\tu = new Point(1, 0).transform(matrix).subtract(orig),\n\t\t\tv = new Point(0, 1).transform(matrix).subtract(orig);\n\t\treturn new Size(\n\t\t\t72 / u.getLength(),\n\t\t\t72 / v.getLength()\n\t\t);\n\t},\n\n\tgetPpi: '#getResolution',\n\n\tgetImage: function() {\n\t\treturn this._image;\n\t},\n\n\tsetImage: function(image) {\n\t\tif (this._canvas)\n\t\t\tCanvasProvider.release(this._canvas);\n\t\tif (image && image.getContext) {\n\t\t\tthis._image = null;\n\t\t\tthis._canvas = image;\n\t\t\tthis._loaded = true;\n\t\t} else {\n\t\t\tthis._image = image;\n\t\t\tthis._canvas = null;\n\t\t\tthis._loaded = image && image.complete;\n\t\t}\n\t\tthis._size = new Size(\n\t\t\t\timage ? image.naturalWidth || image.width : 0,\n\t\t\t\timage ? image.naturalHeight || image.height : 0);\n\t\tthis._context = null;\n\t\tthis._changed(521);\n\t},\n\n\tgetCanvas: function() {\n\t\tif (!this._canvas) {\n\t\t\tvar ctx = CanvasProvider.getContext(this._size);\n\t\t\ttry {\n\t\t\t\tif (this._image)\n\t\t\t\t\tctx.drawImage(this._image, 0, 0);\n\t\t\t\tthis._canvas = ctx.canvas;\n\t\t\t} catch (e) {\n\t\t\t\tCanvasProvider.release(ctx);\n\t\t\t}\n\t\t}\n\t\treturn this._canvas;\n\t},\n\n\tsetCanvas: '#setImage',\n\n\tgetContext: function(modify) {\n\t\tif (!this._context)\n\t\t\tthis._context = this.getCanvas().getContext('2d');\n\t\tif (modify) {\n\t\t\tthis._image = null;\n\t\t\tthis._changed(513);\n\t\t}\n\t\treturn this._context;\n\t},\n\n\tsetContext: function(context) {\n\t\tthis._context = context;\n\t},\n\n\tgetSource: function() {\n\t\treturn this._image && this._image.src || this.toDataURL();\n\t},\n\n\tsetSource: function(src) {\n\t\tvar that = this,\n\t\t\timage;\n\n\t\tfunction loaded() {\n\t\t\tvar view = that.getView();\n\t\t\tif (view) {\n\t\t\t\tpaper = view._scope;\n\t\t\t\tthat.setImage(image);\n\t\t\t\tthat.emit('load');\n\t\t\t\tview.update();\n\t\t\t}\n\t\t}\n\n\t\t\timage = document.getElementById(src) || new Image();\n\n\t\tif (image.naturalWidth && image.naturalHeight) {\n\t\t\tsetTimeout(loaded, 0);\n\t\t} else {\n\t\t\tDomEvent.add(image, {\n\t\t\t\tload: loaded\n\t\t\t});\n\t\t\tif (!image.src)\n\t\t\t\timage.src = src;\n\t\t}\n\t\tthis.setImage(image);\n\t},\n\n\tgetElement: function() {\n\t\treturn this._canvas || this._loaded && this._image;\n\t}\n}, {\n\tbeans: false,\n\n\tgetSubCanvas: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\tctx = CanvasProvider.getContext(rect.getSize());\n\t\tctx.drawImage(this.getCanvas(), rect.x, rect.y,\n\t\t\t\trect.width, rect.height, 0, 0, rect.width, rect.height);\n\t\treturn ctx.canvas;\n\t},\n\n\tgetSubRaster: function() {\n\t\tvar rect = Rectangle.read(arguments),\n\t\t\traster = new Raster(Item.NO_INSERT);\n\t\traster.setImage(this.getSubCanvas(rect));\n\t\traster.translate(rect.getCenter().subtract(this.getSize().divide(2)));\n\t\traster._matrix.preConcatenate(this._matrix);\n\t\traster.insertAbove(this);\n\t\treturn raster;\n\t},\n\n\ttoDataURL: function() {\n\t\tvar src = this._image && this._image.src;\n\t\tif (/^data:/.test(src))\n\t\t\treturn src;\n\t\tvar canvas = this.getCanvas();\n\t\treturn canvas ? canvas.toDataURL() : null;\n\t},\n\n\tdrawImage: function(image ) {\n\t\tvar point = Point.read(arguments, 1);\n\t\tthis.getContext(true).drawImage(image, point.x, point.y);\n\t},\n\n\tgetAverageColor: function(object) {\n\t\tvar bounds, path;\n\t\tif (!object) {\n\t\t\tbounds = this.getBounds();\n\t\t} else if (object instanceof PathItem) {\n\t\t\tpath = object;\n\t\t\tbounds = object.getBounds();\n\t\t} else if (object.width) {\n\t\t\tbounds = new Rectangle(object);\n\t\t} else if (object.x) {\n\t\t\tbounds = new Rectangle(object.x - 0.5, object.y - 0.5, 1, 1);\n\t\t}\n\t\tvar sampleSize = 32,\n\t\t\twidth = Math.min(bounds.width, sampleSize),\n\t\t\theight = Math.min(bounds.height, sampleSize);\n\t\tvar ctx = Raster._sampleContext;\n\t\tif (!ctx) {\n\t\t\tctx = Raster._sampleContext = CanvasProvider.getContext(\n\t\t\t\t\tnew Size(sampleSize));\n\t\t} else {\n\t\t\tctx.clearRect(0, 0, sampleSize + 1, sampleSize + 1);\n\t\t}\n\t\tctx.save();\n\t\tvar matrix = new Matrix()\n\t\t\t\t.scale(width / bounds.width, height / bounds.height)\n\t\t\t\t.translate(-bounds.x, -bounds.y);\n\t\tmatrix.applyToContext(ctx);\n\t\tif (path)\n\t\t\tpath.draw(ctx, new Base({ clip: true, matrices: [matrix] }));\n\t\tthis._matrix.applyToContext(ctx);\n\t\tvar element = this.getElement(),\n\t\t\tsize = this._size;\n\t\tif (element)\n\t\t\tctx.drawImage(element, -size.width / 2, -size.height / 2);\n\t\tctx.restore();\n\t\tvar pixels = ctx.getImageData(0.5, 0.5, Math.ceil(width),\n\t\t\t\tMath.ceil(height)).data,\n\t\t\tchannels = [0, 0, 0],\n\t\t\ttotal = 0;\n\t\tfor (var i = 0, l = pixels.length; i < l; i += 4) {\n\t\t\tvar alpha = pixels[i + 3];\n\t\t\ttotal += alpha;\n\t\t\talpha /= 255;\n\t\t\tchannels[0] += pixels[i] * alpha;\n\t\t\tchannels[1] += pixels[i + 1] * alpha;\n\t\t\tchannels[2] += pixels[i + 2] * alpha;\n\t\t}\n\t\tfor (var i = 0; i < 3; i++)\n\t\t\tchannels[i] /= total;\n\t\treturn total ? Color.read(channels) : null;\n\t},\n\n\tgetPixel: function() {\n\t\tvar point = Point.read(arguments);\n\t\tvar data = this.getContext().getImageData(point.x, point.y, 1, 1).data;\n\t\treturn new Color('rgb', [data[0] / 255, data[1] / 255, data[2] / 255],\n\t\t\t\tdata[3] / 255);\n\t},\n\n\tsetPixel: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tcolor = Color.read(arguments),\n\t\t\tcomponents = color._convert('rgb'),\n\t\t\talpha = color._alpha,\n\t\t\tctx = this.getContext(true),\n\t\t\timageData = ctx.createImageData(1, 1),\n\t\t\tdata = imageData.data;\n\t\tdata[0] = components[0] * 255;\n\t\tdata[1] = components[1] * 255;\n\t\tdata[2] = components[2] * 255;\n\t\tdata[3] = alpha != null ? alpha * 255 : 255;\n\t\tctx.putImageData(imageData, point.x, point.y);\n\t},\n\n\tcreateImageData: function() {\n\t\tvar size = Size.read(arguments);\n\t\treturn this.getContext().createImageData(size.width, size.height);\n\t},\n\n\tgetImageData: function() {\n\t\tvar rect = Rectangle.read(arguments);\n\t\tif (rect.isEmpty())\n\t\t\trect = new Rectangle(this._size);\n\t\treturn this.getContext().getImageData(rect.x, rect.y,\n\t\t\t\trect.width, rect.height);\n\t},\n\n\tsetImageData: function(data ) {\n\t\tvar point = Point.read(arguments, 1);\n\t\tthis.getContext(true).putImageData(data, point.x, point.y);\n\t},\n\n\t_getBounds: function(getter, matrix) {\n\t\tvar rect = new Rectangle(this._size).setCenter(0, 0);\n\t\treturn matrix ? matrix._transformBounds(rect) : rect;\n\t},\n\n\t_hitTestSelf: function(point) {\n\t\tif (this._contains(point)) {\n\t\t\tvar that = this;\n\t\t\treturn new HitResult('pixel', that, {\n\t\t\t\toffset: point.add(that._size.divide(2)).round(),\n\t\t\t\tcolor: {\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\treturn that.getPixel(this.offset);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t_draw: function(ctx) {\n\t\tvar element = this.getElement();\n\t\tif (element) {\n\t\t\tctx.globalAlpha = this._opacity;\n\t\t\tctx.drawImage(element,\n\t\t\t\t\t-this._size.width / 2, -this._size.height / 2);\n\t\t}\n\t},\n\n\t_canComposite: function() {\n\t\treturn true;\n\t}\n});\n\nvar PlacedSymbol = Item.extend({\n\t_class: 'PlacedSymbol',\n\t_applyMatrix: false,\n\t_canApplyMatrix: false,\n\t_boundsGetter: { getBounds: 'getStrokeBounds' },\n\t_boundsSelected: true,\n\t_serializeFields: {\n\t\tsymbol: null\n\t},\n\n\tinitialize: function PlacedSymbol(arg0, arg1) {\n\t\tif (!this._initialize(arg0,\n\t\t\t\targ1 !== undefined && Point.read(arguments, 1)))\n\t\t\tthis.setSymbol(arg0 instanceof Symbol ? arg0 : new Symbol(arg0));\n\t},\n\n\t_equals: function(item) {\n\t\treturn this._symbol === item._symbol;\n\t},\n\n\tgetSymbol: function() {\n\t\treturn this._symbol;\n\t},\n\n\tsetSymbol: function(symbol) {\n\t\tthis._symbol = symbol;\n\t\tthis._changed(9);\n\t},\n\n\tclone: function(insert) {\n\t\tvar copy = new PlacedSymbol(Item.NO_INSERT);\n\t\tcopy.setSymbol(this._symbol);\n\t\treturn this._clone(copy, insert);\n\t},\n\n\tisEmpty: function() {\n\t\treturn this._symbol._definition.isEmpty();\n\t},\n\n\t_getBounds: function(getter, matrix, cacheItem) {\n\t\tvar definition = this.symbol._definition;\n\t\treturn definition._getCachedBounds(getter,\n\t\t\t\tmatrix && matrix.chain(definition._matrix), cacheItem);\n\t},\n\n\t_hitTestSelf: function(point, options) {\n\t\tvar res = this._symbol._definition._hitTest(point, options);\n\t\tif (res)\n\t\t\tres.item = this;\n\t\treturn res;\n\t},\n\n\t_draw: function(ctx, param) {\n\t\tthis.symbol._definition.draw(ctx, param);\n\t}\n\n});\n\nvar HitResult = Base.extend({\n\t_class: 'HitResult',\n\n\tinitialize: function HitResult(type, item, values) {\n\t\tthis.type = type;\n\t\tthis.item = item;\n\t\tif (values) {\n\t\t\tvalues.enumerable = true;\n\t\t\tthis.inject(values);\n\t\t}\n\t},\n\n\tstatics: {\n\t\tgetOptions: function(options) {\n\t\t\treturn new Base({\n\t\t\t\ttype: null,\n\t\t\t\ttolerance: paper.settings.hitTolerance,\n\t\t\t\tfill: !options,\n\t\t\t\tstroke: !options,\n\t\t\t\tsegments: !options,\n\t\t\t\thandles: false,\n\t\t\t\tends: false,\n\t\t\t\tcenter: false,\n\t\t\t\tbounds: false,\n\t\t\t\tguides: false,\n\t\t\t\tselected: false\n\t\t\t}, options);\n\t\t}\n\t}\n});\n\nvar Segment = Base.extend({\n\t_class: 'Segment',\n\tbeans: true,\n\n\tinitialize: function Segment(arg0, arg1, arg2, arg3, arg4, arg5) {\n\t\tvar count = arguments.length,\n\t\t\tpoint, handleIn, handleOut;\n\t\tif (count === 0) {\n\t\t} else if (count === 1) {\n\t\t\tif (arg0.point) {\n\t\t\t\tpoint = arg0.point;\n\t\t\t\thandleIn = arg0.handleIn;\n\t\t\t\thandleOut = arg0.handleOut;\n\t\t\t} else {\n\t\t\t\tpoint = arg0;\n\t\t\t}\n\t\t} else if (count === 2 && typeof arg0 === 'number') {\n\t\t\tpoint = arguments;\n\t\t} else if (count <= 3) {\n\t\t\tpoint = arg0;\n\t\t\thandleIn = arg1;\n\t\t\thandleOut = arg2;\n\t\t} else {\n\t\t\tpoint = arg0 !== undefined ? [ arg0, arg1 ] : null;\n\t\t\thandleIn = arg2 !== undefined ? [ arg2, arg3 ] : null;\n\t\t\thandleOut = arg4 !== undefined ? [ arg4, arg5 ] : null;\n\t\t}\n\t\tnew SegmentPoint(point, this, '_point');\n\t\tnew SegmentPoint(handleIn, this, '_handleIn');\n\t\tnew SegmentPoint(handleOut, this, '_handleOut');\n\t},\n\n\t_serialize: function(options) {\n\t\treturn Base.serialize(this.isLinear() ? this._point\n\t\t\t\t: [this._point, this._handleIn, this._handleOut],\n\t\t\t\toptions, true);\n\t},\n\n\t_changed: function(point) {\n\t\tvar path = this._path;\n\t\tif (!path)\n\t\t\treturn;\n\t\tvar curves = path._curves,\n\t\t\tindex = this._index,\n\t\t\tcurve;\n\t\tif (curves) {\n\t\t\tif ((!point || point === this._point || point === this._handleIn)\n\t\t\t\t\t&& (curve = index > 0 ? curves[index - 1] : path._closed\n\t\t\t\t\t\t? curves[curves.length - 1] : null))\n\t\t\t\tcurve._changed();\n\t\t\tif ((!point || point === this._point || point === this._handleOut)\n\t\t\t\t\t&& (curve = curves[index]))\n\t\t\t\tcurve._changed();\n\t\t}\n\t\tpath._changed(25);\n\t},\n\n\tgetPoint: function() {\n\t\treturn this._point;\n\t},\n\n\tsetPoint: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis._point.set(point.x, point.y);\n\t},\n\n\tgetHandleIn: function() {\n\t\treturn this._handleIn;\n\t},\n\n\tsetHandleIn: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis._handleIn.set(point.x, point.y);\n\t},\n\n\tgetHandleOut: function() {\n\t\treturn this._handleOut;\n\t},\n\n\tsetHandleOut: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis._handleOut.set(point.x, point.y);\n\t},\n\n\tisLinear: function() {\n\t\treturn this._handleIn.isZero() && this._handleOut.isZero();\n\t},\n\n\tsetLinear: function(linear) {\n\t\tif (linear) {\n\t\t\tthis._handleIn.set(0, 0);\n\t\t\tthis._handleOut.set(0, 0);\n\t\t} else {\n\t\t}\n\t},\n\n\tisColinear: function(segment) {\n\t\tvar next1 = this.getNext(),\n\t\t\tnext2 = segment.getNext();\n\t\treturn this._handleOut.isZero() && next1._handleIn.isZero()\n\t\t\t\t&& segment._handleOut.isZero() && next2._handleIn.isZero()\n\t\t\t\t&& next1._point.subtract(this._point).isColinear(\n\t\t\t\t\tnext2._point.subtract(segment._point));\n\t},\n\n\tisOrthogonal: function() {\n\t\tvar prev = this.getPrevious(),\n\t\t\tnext = this.getNext();\n\t\treturn prev._handleOut.isZero() && this._handleIn.isZero()\n\t\t\t&& this._handleOut.isZero() && next._handleIn.isZero()\n\t\t\t&& this._point.subtract(prev._point).isOrthogonal(\n\t\t\t\t\tnext._point.subtract(this._point));\n\t},\n\n\tisArc: function() {\n\t\tvar next = this.getNext(),\n\t\t\thandle1 = this._handleOut,\n\t\t\thandle2 = next._handleIn,\n\t\t\tkappa = 0.5522847498307936;\n\t\tif (handle1.isOrthogonal(handle2)) {\n\t\t\tvar from = this._point,\n\t\t\t\tto = next._point,\n\t\t\t\tcorner = new Line(from, handle1, true).intersect(\n\t\t\t\t\t\tnew Line(to, handle2, true), true);\n\t\t\treturn corner && Numerical.isZero(handle1.getLength() /\n\t\t\t\t\tcorner.subtract(from).getLength() - kappa)\n\t\t\t\t&& Numerical.isZero(handle2.getLength() /\n\t\t\t\t\tcorner.subtract(to).getLength() - kappa);\n\t\t}\n\t\treturn false;\n\t},\n\n\t_selectionState: 0,\n\n\tisSelected: function(_point) {\n\t\tvar state = this._selectionState;\n\t\treturn !_point ? !!(state & 7)\n\t\t\t: _point === this._point ? !!(state & 4)\n\t\t\t: _point === this._handleIn ? !!(state & 1)\n\t\t\t: _point === this._handleOut ? !!(state & 2)\n\t\t\t: false;\n\t},\n\n\tsetSelected: function(selected, _point) {\n\t\tvar path = this._path,\n\t\t\tselected = !!selected,\n\t\t\tstate = this._selectionState,\n\t\t\toldState = state,\n\t\t\tflag = !_point ? 7\n\t\t\t\t\t: _point === this._point ? 4\n\t\t\t\t\t: _point === this._handleIn ? 1\n\t\t\t\t\t: _point === this._handleOut ? 2\n\t\t\t\t\t: 0;\n\t\tif (selected) {\n\t\t\tstate |= flag;\n\t\t} else {\n\t\t\tstate &= ~flag;\n\t\t}\n\t\tthis._selectionState = state;\n\t\tif (path && state !== oldState) {\n\t\t\tpath._updateSelection(this, oldState, state);\n\t\t\tpath._changed(129);\n\t\t}\n\t},\n\n\tgetIndex: function() {\n\t\treturn this._index !== undefined ? this._index : null;\n\t},\n\n\tgetPath: function() {\n\t\treturn this._path || null;\n\t},\n\n\tgetCurve: function() {\n\t\tvar path = this._path,\n\t\t\tindex = this._index;\n\t\tif (path) {\n\t\t\tif (index > 0 && !path._closed\n\t\t\t\t\t&& index === path._segments.length - 1)\n\t\t\t\tindex--;\n\t\t\treturn path.getCurves()[index] || null;\n\t\t}\n\t\treturn null;\n\t},\n\n\tgetLocation: function() {\n\t\tvar curve = this.getCurve();\n\t\treturn curve\n\t\t\t\t? new CurveLocation(curve, this === curve._segment1 ? 0 : 1)\n\t\t\t\t: null;\n\t},\n\n\tgetNext: function() {\n\t\tvar segments = this._path && this._path._segments;\n\t\treturn segments && (segments[this._index + 1]\n\t\t\t\t|| this._path._closed && segments[0]) || null;\n\t},\n\n\tgetPrevious: function() {\n\t\tvar segments = this._path && this._path._segments;\n\t\treturn segments && (segments[this._index - 1]\n\t\t\t\t|| this._path._closed && segments[segments.length - 1]) || null;\n\t},\n\n\treverse: function() {\n\t\treturn new Segment(this._point, this._handleOut, this._handleIn);\n\t},\n\n\tremove: function() {\n\t\treturn this._path ? !!this._path.removeSegment(this._index) : false;\n\t},\n\n\tclone: function() {\n\t\treturn new Segment(this._point, this._handleIn, this._handleOut);\n\t},\n\n\tequals: function(segment) {\n\t\treturn segment === this || segment && this._class === segment._class\n\t\t\t\t&& this._point.equals(segment._point)\n\t\t\t\t&& this._handleIn.equals(segment._handleIn)\n\t\t\t\t&& this._handleOut.equals(segment._handleOut)\n\t\t\t\t|| false;\n\t},\n\n\ttoString: function() {\n\t\tvar parts = [ 'point: ' + this._point ];\n\t\tif (!this._handleIn.isZero())\n\t\t\tparts.push('handleIn: ' + this._handleIn);\n\t\tif (!this._handleOut.isZero())\n\t\t\tparts.push('handleOut: ' + this._handleOut);\n\t\treturn '{ ' + parts.join(', ') + ' }';\n\t},\n\n\ttransform: function(matrix) {\n\t\tthis._transformCoordinates(matrix, new Array(6), true);\n\t\tthis._changed();\n\t},\n\n\tinterpolate: function(segment0, segment1, coef) {\n\t\tvar dxPoint = segment1._point._x - segment0._point._x,\n\t\t\tdyPoint = segment1._point._y - segment0._point._y,\n\t\t\tdxHandleIn = segment1._handleIn._x - segment0._handleIn._x,\n\t\t\tdyHandleIn = segment1._handleIn._y - segment0._handleIn._y,\n\t\t\tdxHandleOut = segment1._handleOut._x - segment0._handleOut._x,\n\t\t\tdyHandleOut = segment1._handleOut._y - segment0._handleOut._y;\n\n\t\tthis._point._x = segment0._point._x + dxPoint * coef;\n\t\tthis._point._y = segment0._point._y + dyPoint * coef;\n\t\tthis._handleIn._x = segment0._handleIn._x + dxHandleIn * coef;\n\t\tthis._handleIn._y = segment0._handleIn._y + dyHandleIn * coef;\n\t\tthis._handleOut._x = segment0._handleOut._x + dxHandleOut * coef;\n\t\tthis._handleOut._y = segment0._handleOut._y + dyHandleOut * coef;\n\n\t\tthis._changed();\n\t},\n\n\t_transformCoordinates: function(matrix, coords, change) {\n\t\tvar point = this._point,\n\t\t\thandleIn = !change || !this._handleIn.isZero()\n\t\t\t\t\t? this._handleIn : null,\n\t\t\thandleOut = !change || !this._handleOut.isZero()\n\t\t\t\t\t? this._handleOut : null,\n\t\t\tx = point._x,\n\t\t\ty = point._y,\n\t\t\ti = 2;\n\t\tcoords[0] = x;\n\t\tcoords[1] = y;\n\t\tif (handleIn) {\n\t\t\tcoords[i++] = handleIn._x + x;\n\t\t\tcoords[i++] = handleIn._y + y;\n\t\t}\n\t\tif (handleOut) {\n\t\t\tcoords[i++] = handleOut._x + x;\n\t\t\tcoords[i++] = handleOut._y + y;\n\t\t}\n\t\tif (matrix) {\n\t\t\tmatrix._transformCoordinates(coords, coords, i / 2);\n\t\t\tx = coords[0];\n\t\t\ty = coords[1];\n\t\t\tif (change) {\n\t\t\t\tpoint._x = x;\n\t\t\t\tpoint._y = y;\n\t\t\t\ti  = 2;\n\t\t\t\tif (handleIn) {\n\t\t\t\t\thandleIn._x = coords[i++] - x;\n\t\t\t\t\thandleIn._y = coords[i++] - y;\n\t\t\t\t}\n\t\t\t\tif (handleOut) {\n\t\t\t\t\thandleOut._x = coords[i++] - x;\n\t\t\t\t\thandleOut._y = coords[i++] - y;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!handleIn) {\n\t\t\t\t\tcoords[i++] = x;\n\t\t\t\t\tcoords[i++] = y;\n\t\t\t\t}\n\t\t\t\tif (!handleOut) {\n\t\t\t\t\tcoords[i++] = x;\n\t\t\t\t\tcoords[i++] = y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn coords;\n\t}\n});\n\nvar SegmentPoint = Point.extend({\n\tinitialize: function SegmentPoint(point, owner, key) {\n\t\tvar x, y, selected;\n\t\tif (!point) {\n\t\t\tx = y = 0;\n\t\t} else if ((x = point[0]) !== undefined) {\n\t\t\ty = point[1];\n\t\t} else {\n\t\t\tvar pt = point;\n\t\t\tif ((x = pt.x) === undefined) {\n\t\t\t\tpt = Point.read(arguments);\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\ty = pt.y;\n\t\t\tselected = pt.selected;\n\t\t}\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._owner = owner;\n\t\towner[key] = this;\n\t\tif (selected)\n\t\t\tthis.setSelected(true);\n\t},\n\n\tset: function(x, y) {\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._owner._changed(this);\n\t\treturn this;\n\t},\n\n\t_serialize: function(options) {\n\t\tvar f = options.formatter,\n\t\t\tx = f.number(this._x),\n\t\t\ty = f.number(this._y);\n\t\treturn this.isSelected()\n\t\t\t\t? { x: x, y: y, selected: true }\n\t\t\t\t: [x, y];\n\t},\n\n\tgetX: function() {\n\t\treturn this._x;\n\t},\n\n\tsetX: function(x) {\n\t\tthis._x = x;\n\t\tthis._owner._changed(this);\n\t},\n\n\tgetY: function() {\n\t\treturn this._y;\n\t},\n\n\tsetY: function(y) {\n\t\tthis._y = y;\n\t\tthis._owner._changed(this);\n\t},\n\n\tisZero: function() {\n\t\treturn Numerical.isZero(this._x) && Numerical.isZero(this._y);\n\t},\n\n\tsetSelected: function(selected) {\n\t\tthis._owner.setSelected(selected, this);\n\t},\n\n\tisSelected: function() {\n\t\treturn this._owner.isSelected(this);\n\t}\n});\n\nvar Curve = Base.extend({\n\t_class: 'Curve',\n\n\tinitialize: function Curve(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n\t\tvar count = arguments.length;\n\t\tif (count === 3) {\n\t\t\tthis._path = arg0;\n\t\t\tthis._segment1 = arg1;\n\t\t\tthis._segment2 = arg2;\n\t\t} else if (count === 0) {\n\t\t\tthis._segment1 = new Segment();\n\t\t\tthis._segment2 = new Segment();\n\t\t} else if (count === 1) {\n\t\t\tthis._segment1 = new Segment(arg0.segment1);\n\t\t\tthis._segment2 = new Segment(arg0.segment2);\n\t\t} else if (count === 2) {\n\t\t\tthis._segment1 = new Segment(arg0);\n\t\t\tthis._segment2 = new Segment(arg1);\n\t\t} else {\n\t\t\tvar point1, handle1, handle2, point2;\n\t\t\tif (count === 4) {\n\t\t\t\tpoint1 = arg0;\n\t\t\t\thandle1 = arg1;\n\t\t\t\thandle2 = arg2;\n\t\t\t\tpoint2 = arg3;\n\t\t\t} else if (count === 8) {\n\t\t\t\tpoint1 = [arg0, arg1];\n\t\t\t\tpoint2 = [arg6, arg7];\n\t\t\t\thandle1 = [arg2 - arg0, arg3 - arg1];\n\t\t\t\thandle2 = [arg4 - arg6, arg5 - arg7];\n\t\t\t}\n\t\t\tthis._segment1 = new Segment(point1, null, handle1);\n\t\t\tthis._segment2 = new Segment(point2, handle2, null);\n\t\t}\n\t},\n\n\t_changed: function() {\n\t\tthis._length = this._bounds = undefined;\n\t},\n\n\tgetPoint1: function() {\n\t\treturn this._segment1._point;\n\t},\n\n\tsetPoint1: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis._segment1._point.set(point.x, point.y);\n\t},\n\n\tgetPoint2: function() {\n\t\treturn this._segment2._point;\n\t},\n\n\tsetPoint2: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis._segment2._point.set(point.x, point.y);\n\t},\n\n\tgetHandle1: function() {\n\t\treturn this._segment1._handleOut;\n\t},\n\n\tsetHandle1: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis._segment1._handleOut.set(point.x, point.y);\n\t},\n\n\tgetHandle2: function() {\n\t\treturn this._segment2._handleIn;\n\t},\n\n\tsetHandle2: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis._segment2._handleIn.set(point.x, point.y);\n\t},\n\n\tgetSegment1: function() {\n\t\treturn this._segment1;\n\t},\n\n\tgetSegment2: function() {\n\t\treturn this._segment2;\n\t},\n\n\tgetPath: function() {\n\t\treturn this._path;\n\t},\n\n\tgetIndex: function() {\n\t\treturn this._segment1._index;\n\t},\n\n\tgetNext: function() {\n\t\tvar curves = this._path && this._path._curves;\n\t\treturn curves && (curves[this._segment1._index + 1]\n\t\t\t\t|| this._path._closed && curves[0]) || null;\n\t},\n\n\tgetPrevious: function() {\n\t\tvar curves = this._path && this._path._curves;\n\t\treturn curves && (curves[this._segment1._index - 1]\n\t\t\t\t|| this._path._closed && curves[curves.length - 1]) || null;\n\t},\n\n\tisSelected: function() {\n\t\treturn this.getPoint1().isSelected()\n\t\t\t\t&& this.getHandle2().isSelected()\n\t\t\t\t&& this.getHandle2().isSelected()\n\t\t\t\t&& this.getPoint2().isSelected();\n\t},\n\n\tsetSelected: function(selected) {\n\t\tthis.getPoint1().setSelected(selected);\n\t\tthis.getHandle1().setSelected(selected);\n\t\tthis.getHandle2().setSelected(selected);\n\t\tthis.getPoint2().setSelected(selected);\n\t},\n\n\tgetValues: function(matrix) {\n\t\treturn Curve.getValues(this._segment1, this._segment2, matrix);\n\t},\n\n\tgetPoints: function() {\n\t\tvar coords = this.getValues(),\n\t\t\tpoints = [];\n\t\tfor (var i = 0; i < 8; i += 2)\n\t\t\tpoints.push(new Point(coords[i], coords[i + 1]));\n\t\treturn points;\n\t},\n\n\tgetLength: function() {\n\t\tif (this._length == null) {\n\t\t\tthis._length = this.isLinear()\n\t\t\t\t? this._segment2._point.getDistance(this._segment1._point)\n\t\t\t\t: Curve.getLength(this.getValues(), 0, 1);\n\t\t}\n\t\treturn this._length;\n\t},\n\n\tgetArea: function() {\n\t\treturn Curve.getArea(this.getValues());\n\t},\n\n\tgetPart: function(from, to) {\n\t\treturn new Curve(Curve.getPart(this.getValues(), from, to));\n\t},\n\n\tgetPartLength: function(from, to) {\n\t\treturn Curve.getLength(this.getValues(), from, to);\n\t},\n\n\tisLinear: function() {\n\t\treturn this._segment1._handleOut.isZero()\n\t\t\t\t&& this._segment2._handleIn.isZero();\n\t},\n\n\tgetIntersections: function(curve) {\n\t\treturn Curve.filterIntersections(Curve.getIntersections(\n\t\t\t\tthis.getValues(), curve.getValues(), this, curve, []));\n\t},\n\n\t_getParameter: function(offset, isParameter) {\n\t\treturn isParameter\n\t\t\t\t? offset\n\t\t\t\t: offset && offset.curve === this\n\t\t\t\t\t? offset.parameter\n\t\t\t\t\t: offset === undefined && isParameter === undefined\n\t\t\t\t\t\t? 0.5\n\t\t\t\t\t\t: this.getParameterAt(offset, 0);\n\t},\n\n\tdivide: function(offset, isParameter, ignoreLinear) {\n\t\tvar parameter = this._getParameter(offset, isParameter),\n\t\t\ttolerance = 0.000001,\n\t\t\tres = null;\n\t\tif (parameter > tolerance && parameter < 1 - tolerance) {\n\t\t\tvar parts = Curve.subdivide(this.getValues(), parameter),\n\t\t\t\tisLinear = ignoreLinear ? false : this.isLinear(),\n\t\t\t\tleft = parts[0],\n\t\t\t\tright = parts[1];\n\n\t\t\tif (!isLinear) {\n\t\t\t\tthis._segment1._handleOut.set(left[2] - left[0],\n\t\t\t\t\t\tleft[3] - left[1]);\n\t\t\t\tthis._segment2._handleIn.set(right[4] - right[6],\n\t\t\t\t\t\tright[5] - right[7]);\n\t\t\t}\n\n\t\t\tvar x = left[6], y = left[7],\n\t\t\t\tsegment = new Segment(new Point(x, y),\n\t\t\t\t\t\t!isLinear && new Point(left[4] - x, left[5] - y),\n\t\t\t\t\t\t!isLinear && new Point(right[2] - x, right[3] - y));\n\n\t\t\tif (this._path) {\n\t\t\t\tif (this._segment1._index > 0 && this._segment2._index === 0) {\n\t\t\t\t\tthis._path.add(segment);\n\t\t\t\t} else {\n\t\t\t\t\tthis._path.insert(this._segment2._index, segment);\n\t\t\t\t}\n\t\t\t\tres = this;\n\t\t\t} else {\n\t\t\t\tvar end = this._segment2;\n\t\t\t\tthis._segment2 = segment;\n\t\t\t\tres = new Curve(segment, end);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t},\n\n\tsplit: function(offset, isParameter) {\n\t\treturn this._path\n\t\t\t? this._path.split(this._segment1._index,\n\t\t\t\t\tthis._getParameter(offset, isParameter))\n\t\t\t: null;\n\t},\n\n\treverse: function() {\n\t\treturn new Curve(this._segment2.reverse(), this._segment1.reverse());\n\t},\n\n\tremove: function() {\n\t\tvar removed = false;\n\t\tif (this._path) {\n\t\t\tvar segment2 = this._segment2,\n\t\t\t\thandleOut = segment2._handleOut;\n\t\t\tremoved = segment2.remove();\n\t\t\tif (removed)\n\t\t\t\tthis._segment1._handleOut.set(handleOut.x, handleOut.y);\n\t\t}\n\t\treturn removed;\n\t},\n\n\tclone: function() {\n\t\treturn new Curve(this._segment1, this._segment2);\n\t},\n\n\ttoString: function() {\n\t\tvar parts = [ 'point1: ' + this._segment1._point ];\n\t\tif (!this._segment1._handleOut.isZero())\n\t\t\tparts.push('handle1: ' + this._segment1._handleOut);\n\t\tif (!this._segment2._handleIn.isZero())\n\t\t\tparts.push('handle2: ' + this._segment2._handleIn);\n\t\tparts.push('point2: ' + this._segment2._point);\n\t\treturn '{ ' + parts.join(', ') + ' }';\n\t},\n\nstatics: {\n\tgetValues: function(segment1, segment2, matrix) {\n\t\tvar p1 = segment1._point,\n\t\t\th1 = segment1._handleOut,\n\t\t\th2 = segment2._handleIn,\n\t\t\tp2 = segment2._point,\n\t\t\tvalues = [\n\t\t\t\tp1._x, p1._y,\n\t\t\t\tp1._x + h1._x, p1._y + h1._y,\n\t\t\t\tp2._x + h2._x, p2._y + h2._y,\n\t\t\t\tp2._x, p2._y\n\t\t\t];\n\t\tif (matrix)\n\t\t\tmatrix._transformCoordinates(values, values, 4);\n\t\treturn values;\n\t},\n\n\tevaluate: function(v, t, type) {\n\t\tvar p1x = v[0], p1y = v[1],\n\t\t\tc1x = v[2], c1y = v[3],\n\t\t\tc2x = v[4], c2y = v[5],\n\t\t\tp2x = v[6], p2y = v[7],\n\t\t\ttolerance = 0.000001,\n\t\t\tx, y;\n\n\t\tif (type === 0 && (t < tolerance || t > 1 - tolerance)) {\n\t\t\tvar isZero = t < tolerance;\n\t\t\tx = isZero ? p1x : p2x;\n\t\t\ty = isZero ? p1y : p2y;\n\t\t} else {\n\t\t\tvar cx = 3 * (c1x - p1x),\n\t\t\t\tbx = 3 * (c2x - c1x) - cx,\n\t\t\t\tax = p2x - p1x - cx - bx,\n\n\t\t\t\tcy = 3 * (c1y - p1y),\n\t\t\t\tby = 3 * (c2y - c1y) - cy,\n\t\t\t\tay = p2y - p1y - cy - by;\n\t\t\tif (type === 0) {\n\t\t\t\tx = ((ax * t + bx) * t + cx) * t + p1x;\n\t\t\t\ty = ((ay * t + by) * t + cy) * t + p1y;\n\t\t\t} else {\n\t\t\t\tif (t < tolerance && c1x === p1x && c1y === p1y\n\t\t\t\t\t\t|| t > 1 - tolerance && c2x === p2x && c2y === p2y) {\n\t\t\t\t\tx = c2x - c1x;\n\t\t\t\t\ty = c2y - c1y;\n\t\t\t\t} else if (t < tolerance) {\n\t\t\t\t\tx = cx;\n\t\t\t\t\ty = cy;\n\t\t\t\t} else if (t > 1 - tolerance) {\n\t\t\t\t\tx = 3 * (p2x - c2x);\n\t\t\t\t\ty = 3 * (p2y - c2y);\n\t\t\t\t} else {\n\t\t\t\t\tx = (3 * ax * t + 2 * bx) * t + cx;\n\t\t\t\t\ty = (3 * ay * t + 2 * by) * t + cy;\n\t\t\t\t}\n\t\t\t\tif (type === 3) {\n\t\t\t\t\tvar x2 = 6 * ax * t + 2 * bx,\n\t\t\t\t\t\ty2 = 6 * ay * t + 2 * by;\n\t\t\t\t\treturn (x * y2 - y * x2) / Math.pow(x * x + y * y, 3 / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn type === 2 ? new Point(y, -x) : new Point(x, y);\n\t},\n\n\tsubdivide: function(v, t) {\n\t\tvar p1x = v[0], p1y = v[1],\n\t\t\tc1x = v[2], c1y = v[3],\n\t\t\tc2x = v[4], c2y = v[5],\n\t\t\tp2x = v[6], p2y = v[7];\n\t\tif (t === undefined)\n\t\t\tt = 0.5;\n\t\tvar u = 1 - t,\n\t\t\tp3x = u * p1x + t * c1x, p3y = u * p1y + t * c1y,\n\t\t\tp4x = u * c1x + t * c2x, p4y = u * c1y + t * c2y,\n\t\t\tp5x = u * c2x + t * p2x, p5y = u * c2y + t * p2y,\n\t\t\tp6x = u * p3x + t * p4x, p6y = u * p3y + t * p4y,\n\t\t\tp7x = u * p4x + t * p5x, p7y = u * p4y + t * p5y,\n\t\t\tp8x = u * p6x + t * p7x, p8y = u * p6y + t * p7y;\n\t\treturn [\n\t\t\t[p1x, p1y, p3x, p3y, p6x, p6y, p8x, p8y],\n\t\t\t[p8x, p8y, p7x, p7y, p5x, p5y, p2x, p2y]\n\t\t];\n\t},\n\n\tsolveCubic: function (v, coord, val, roots, min, max) {\n\t\tvar p1 = v[coord],\n\t\t\tc1 = v[coord + 2],\n\t\t\tc2 = v[coord + 4],\n\t\t\tp2 = v[coord + 6],\n\t\t\tc = 3 * (c1 - p1),\n\t\t\tb = 3 * (c2 - c1) - c,\n\t\t\ta = p2 - p1 - c - b,\n\t\t\tisZero = Numerical.isZero;\n\t\tif (isZero(a) && isZero(b))\n\t\t\ta = b = 0;\n\t\treturn Numerical.solveCubic(a, b, c, p1 - val, roots, min, max);\n\t},\n\n\tgetParameterOf: function(v, x, y) {\n\t\tvar tolerance = 0.000001;\n\t\tif (Math.abs(v[0] - x) < tolerance && Math.abs(v[1] - y) < tolerance)\n\t\t\treturn 0;\n\t\tif (Math.abs(v[6] - x) < tolerance && Math.abs(v[7] - y) < tolerance)\n\t\t\treturn 1;\n\t\tvar txs = [],\n\t\t\ttys = [],\n\t\t\tsx = Curve.solveCubic(v, 0, x, txs, 0, 1),\n\t\t\tsy = Curve.solveCubic(v, 1, y, tys, 0, 1),\n\t\t\ttx, ty;\n\t\tfor (var cx = 0;  sx == -1 || cx < sx;) {\n\t\t\tif (sx == -1 || (tx = txs[cx++]) >= 0 && tx <= 1) {\n\t\t\t\tfor (var cy = 0; sy == -1 || cy < sy;) {\n\t\t\t\t\tif (sy == -1 || (ty = tys[cy++]) >= 0 && ty <= 1) {\n\t\t\t\t\t\tif (sx == -1) tx = ty;\n\t\t\t\t\t\telse if (sy == -1) ty = tx;\n\t\t\t\t\t\tif (Math.abs(tx - ty) < tolerance)\n\t\t\t\t\t\t\treturn (tx + ty) * 0.5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (sx == -1)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t},\n\n\tgetPart: function(v, from, to) {\n\t\tif (from > 0)\n\t\t\tv = Curve.subdivide(v, from)[1];\n\t\tif (to < 1)\n\t\t\tv = Curve.subdivide(v, (to - from) / (1 - from))[0];\n\t\treturn v;\n\t},\n\n\tisLinear: function(v) {\n\t\tvar isZero = Numerical.isZero;\n\t\treturn isZero(v[0] - v[2]) && isZero(v[1] - v[3])\n\t\t\t\t&& isZero(v[4] - v[6]) && isZero(v[5] - v[7]);\n\t},\n\n\tisFlatEnough: function(v, tolerance) {\n\t\tvar p1x = v[0], p1y = v[1],\n\t\t\tc1x = v[2], c1y = v[3],\n\t\t\tc2x = v[4], c2y = v[5],\n\t\t\tp2x = v[6], p2y = v[7],\n\t\t\tux = 3 * c1x - 2 * p1x - p2x,\n\t\t\tuy = 3 * c1y - 2 * p1y - p2y,\n\t\t\tvx = 3 * c2x - 2 * p2x - p1x,\n\t\t\tvy = 3 * c2y - 2 * p2y - p1y;\n\t\treturn Math.max(ux * ux, vx * vx) + Math.max(uy * uy, vy * vy)\n\t\t\t\t< 10 * tolerance * tolerance;\n\t},\n\n\tgetArea: function(v) {\n\t\tvar p1x = v[0], p1y = v[1],\n\t\t\tc1x = v[2], c1y = v[3],\n\t\t\tc2x = v[4], c2y = v[5],\n\t\t\tp2x = v[6], p2y = v[7];\n\t\treturn (  3.0 * c1y * p1x - 1.5 * c1y * c2x\n\t\t\t\t- 1.5 * c1y * p2x - 3.0 * p1y * c1x\n\t\t\t\t- 1.5 * p1y * c2x - 0.5 * p1y * p2x\n\t\t\t\t+ 1.5 * c2y * p1x + 1.5 * c2y * c1x\n\t\t\t\t- 3.0 * c2y * p2x + 0.5 * p2y * p1x\n\t\t\t\t+ 1.5 * p2y * c1x + 3.0 * p2y * c2x) / 10;\n\t},\n\n\tgetEdgeSum: function(v) {\n\t\treturn\t  (v[0] - v[2]) * (v[3] + v[1])\n\t\t\t\t+ (v[2] - v[4]) * (v[5] + v[3])\n\t\t\t\t+ (v[4] - v[6]) * (v[7] + v[5]);\n\t},\n\n\tgetBounds: function(v) {\n\t\tvar min = v.slice(0, 2),\n\t\t\tmax = min.slice(),\n\t\t\troots = [0, 0];\n\t\tfor (var i = 0; i < 2; i++)\n\t\t\tCurve._addBounds(v[i], v[i + 2], v[i + 4], v[i + 6],\n\t\t\t\t\ti, 0, min, max, roots);\n\t\treturn new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n\t},\n\n\t_addBounds: function(v0, v1, v2, v3, coord, padding, min, max, roots) {\n\t\tfunction add(value, padding) {\n\t\t\tvar left = value - padding,\n\t\t\t\tright = value + padding;\n\t\t\tif (left < min[coord])\n\t\t\t\tmin[coord] = left;\n\t\t\tif (right > max[coord])\n\t\t\t\tmax[coord] = right;\n\t\t}\n\t\tvar a = 3 * (v1 - v2) - v0 + v3,\n\t\t\tb = 2 * (v0 + v2) - 4 * v1,\n\t\t\tc = v1 - v0,\n\t\t\tcount = Numerical.solveQuadratic(a, b, c, roots),\n\t\t\ttMin = 0.000001,\n\t\t\ttMax = 1 - tMin;\n\t\tadd(v3, 0);\n\t\tfor (var i = 0; i < count; i++) {\n\t\t\tvar t = roots[i],\n\t\t\t\tu = 1 - t;\n\t\t\tif (tMin < t && t < tMax)\n\t\t\t\tadd(u * u * u * v0\n\t\t\t\t\t+ 3 * u * u * t * v1\n\t\t\t\t\t+ 3 * u * t * t * v2\n\t\t\t\t\t+ t * t * t * v3,\n\t\t\t\t\tpadding);\n\t\t}\n\t}\n}}, Base.each(['getBounds', 'getStrokeBounds', 'getHandleBounds', 'getRoughBounds'],\n\tfunction(name) {\n\t\tthis[name] = function() {\n\t\t\tif (!this._bounds)\n\t\t\t\tthis._bounds = {};\n\t\t\tvar bounds = this._bounds[name];\n\t\t\tif (!bounds) {\n\t\t\t\tbounds = this._bounds[name] = Path[name]([this._segment1,\n\t\t\t\t\t\tthis._segment2], false, this._path.getStyle());\n\t\t\t}\n\t\t\treturn bounds.clone();\n\t\t};\n\t},\n{\n\n}), Base.each(['getPoint', 'getTangent', 'getNormal', 'getCurvature'],\n\tfunction(name, index) {\n\t\tthis[name + 'At'] = function(offset, isParameter) {\n\t\t\tvar values = this.getValues();\n\t\t\treturn Curve.evaluate(values, isParameter\n\t\t\t\t\t? offset : Curve.getParameterAt(values, offset, 0), index);\n\t\t};\n\t\tthis[name] = function(parameter) {\n\t\t\treturn Curve.evaluate(this.getValues(), parameter, index);\n\t\t};\n\t},\n{\n\tbeans: false,\n\n\tgetParameterAt: function(offset, start) {\n\t\treturn Curve.getParameterAt(this.getValues(), offset, start);\n\t},\n\n\tgetParameterOf: function() {\n\t\tvar point = Point.read(arguments);\n\t\treturn Curve.getParameterOf(this.getValues(), point.x, point.y);\n\t},\n\n\tgetLocationAt: function(offset, isParameter) {\n\t\tif (!isParameter)\n\t\t\toffset = this.getParameterAt(offset);\n\t\treturn offset >= 0 && offset <= 1 && new CurveLocation(this, offset);\n\t},\n\n\tgetLocationOf: function() {\n\t\treturn this.getLocationAt(this.getParameterOf(Point.read(arguments)),\n\t\t\t\ttrue);\n\t},\n\n\tgetOffsetOf: function() {\n\t\tvar loc = this.getLocationOf.apply(this, arguments);\n\t\treturn loc ? loc.getOffset() : null;\n\t},\n\n\tgetNearestLocation: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tvalues = this.getValues(),\n\t\t\tcount = 100,\n\t\t\tminDist = Infinity,\n\t\t\tminT = 0;\n\n\t\tfunction refine(t) {\n\t\t\tif (t >= 0 && t <= 1) {\n\t\t\t\tvar dist = point.getDistance(\n\t\t\t\t\t\tCurve.evaluate(values, t, 0), true);\n\t\t\t\tif (dist < minDist) {\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tminT = t;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i <= count; i++)\n\t\t\trefine(i / count);\n\n\t\tvar step = 1 / (count * 2);\n\t\twhile (step > 0.000001) {\n\t\t\tif (!refine(minT - step) && !refine(minT + step))\n\t\t\t\tstep /= 2;\n\t\t}\n\t\tvar pt = Curve.evaluate(values, minT, 0);\n\t\treturn new CurveLocation(this, minT, pt, null, null, null,\n\t\t\t\tpoint.getDistance(pt));\n\t},\n\n\tgetNearestPoint: function() {\n\t\treturn this.getNearestLocation.apply(this, arguments).getPoint();\n\t}\n\n}),\nnew function() {\n\n\tfunction getLengthIntegrand(v) {\n\t\tvar p1x = v[0], p1y = v[1],\n\t\t\tc1x = v[2], c1y = v[3],\n\t\t\tc2x = v[4], c2y = v[5],\n\t\t\tp2x = v[6], p2y = v[7],\n\n\t\t\tax = 9 * (c1x - c2x) + 3 * (p2x - p1x),\n\t\t\tbx = 6 * (p1x + c2x) - 12 * c1x,\n\t\t\tcx = 3 * (c1x - p1x),\n\n\t\t\tay = 9 * (c1y - c2y) + 3 * (p2y - p1y),\n\t\t\tby = 6 * (p1y + c2y) - 12 * c1y,\n\t\t\tcy = 3 * (c1y - p1y);\n\n\t\treturn function(t) {\n\t\t\tvar dx = (ax * t + bx) * t + cx,\n\t\t\t\tdy = (ay * t + by) * t + cy;\n\t\t\treturn Math.sqrt(dx * dx + dy * dy);\n\t\t};\n\t}\n\n\tfunction getIterations(a, b) {\n\t\treturn Math.max(2, Math.min(16, Math.ceil(Math.abs(b - a) * 32)));\n\t}\n\n\treturn {\n\t\tstatics: true,\n\n\t\tgetLength: function(v, a, b) {\n\t\t\tif (a === undefined)\n\t\t\t\ta = 0;\n\t\t\tif (b === undefined)\n\t\t\t\tb = 1;\n\t\t\tvar isZero = Numerical.isZero;\n\t\t\tif (a === 0 && b === 1\n\t\t\t\t\t&& isZero(v[0] - v[2]) && isZero(v[1] - v[3])\n\t\t\t\t\t&& isZero(v[6] - v[4]) && isZero(v[7] - v[5])) {\n\t\t\t\tvar dx = v[6] - v[0],\n\t\t\t\t\tdy = v[7] - v[1];\n\t\t\t\treturn Math.sqrt(dx * dx + dy * dy);\n\t\t\t}\n\t\t\tvar ds = getLengthIntegrand(v);\n\t\t\treturn Numerical.integrate(ds, a, b, getIterations(a, b));\n\t\t},\n\n\t\tgetParameterAt: function(v, offset, start) {\n\t\t\tif (start === undefined)\n\t\t\t\tstart = offset < 0 ? 1 : 0\n\t\t\tif (offset === 0)\n\t\t\t\treturn start;\n\t\t\tvar forward = offset > 0,\n\t\t\t\ta = forward ? start : 0,\n\t\t\t\tb = forward ? 1 : start,\n\t\t\t\tds = getLengthIntegrand(v),\n\t\t\t\trangeLength = Numerical.integrate(ds, a, b,\n\t\t\t\t\t\tgetIterations(a, b));\n\t\t\tif (Math.abs(offset) >= rangeLength)\n\t\t\t\treturn forward ? b : a;\n\t\t\tvar guess = offset / rangeLength,\n\t\t\t\tlength = 0;\n\t\t\tfunction f(t) {\n\t\t\t\tlength += Numerical.integrate(ds, start, t,\n\t\t\t\t\t\tgetIterations(start, t));\n\t\t\t\tstart = t;\n\t\t\t\treturn length - offset;\n\t\t\t}\n\t\t\treturn Numerical.findRoot(f, ds, start + guess, a, b, 16,\n\t\t\t\t\t0.000001);\n\t\t}\n\t};\n}, new function() {\n\tfunction addLocation(locations, include, curve1, t1, point1, curve2, t2,\n\t\t\tpoint2) {\n\t\tvar loc = new CurveLocation(curve1, t1, point1, curve2, t2, point2);\n\t\tif (!include || include(loc))\n\t\t\tlocations.push(loc);\n\t}\n\n\tfunction addCurveIntersections(v1, v2, curve1, curve2, locations, include,\n\t\t\ttMin, tMax, uMin, uMax, oldTDiff, reverse, recursion) {\n\t\tif (recursion > 32)\n\t\t\treturn;\n\t\tvar q0x = v2[0], q0y = v2[1], q3x = v2[6], q3y = v2[7],\n\t\t\ttolerance = 0.000001,\n\t\t\tgetSignedDistance = Line.getSignedDistance,\n\t\t\td1 = getSignedDistance(q0x, q0y, q3x, q3y, v2[2], v2[3]) || 0,\n\t\t\td2 = getSignedDistance(q0x, q0y, q3x, q3y, v2[4], v2[5]) || 0,\n\t\t\tfactor = d1 * d2 > 0 ? 3 / 4 : 4 / 9,\n\t\t\tdMin = factor * Math.min(0, d1, d2),\n\t\t\tdMax = factor * Math.max(0, d1, d2),\n\t\t\tdp0 = getSignedDistance(q0x, q0y, q3x, q3y, v1[0], v1[1]),\n\t\t\tdp1 = getSignedDistance(q0x, q0y, q3x, q3y, v1[2], v1[3]),\n\t\t\tdp2 = getSignedDistance(q0x, q0y, q3x, q3y, v1[4], v1[5]),\n\t\t\tdp3 = getSignedDistance(q0x, q0y, q3x, q3y, v1[6], v1[7]),\n\t\t\ttMinNew, tMaxNew, tDiff;\n\t\tif (q0x === q3x && uMax - uMin <= tolerance && recursion > 3) {\n\t\t\ttMaxNew = tMinNew = (tMax + tMin) / 2;\n\t\t\ttDiff = 0;\n\t\t} else {\n\t\t\tvar hull = getConvexHull(dp0, dp1, dp2, dp3),\n\t\t\t\ttop = hull[0],\n\t\t\t\tbottom = hull[1],\n\t\t\t\ttMinClip, tMaxClip;\n\t\t\ttMinClip = clipConvexHull(top, bottom, dMin, dMax);\n\t\t\ttop.reverse();\n\t\t\tbottom.reverse();\n\t\t\ttMaxClip = clipConvexHull(top, bottom, dMin, dMax);\n\t\t\tif (tMinClip == null || tMaxClip == null)\n\t\t\t\treturn;\n\t\t\tv1 = Curve.getPart(v1, tMinClip, tMaxClip);\n\t\t\ttDiff = tMaxClip - tMinClip;\n\t\t\ttMinNew = tMax * tMinClip + tMin * (1 - tMinClip);\n\t\t\ttMaxNew = tMax * tMaxClip + tMin * (1 - tMaxClip);\n\t\t}\n\t\tif (oldTDiff > 0.5 && tDiff > 0.5) {\n\t\t\tif (tMaxNew - tMinNew > uMax - uMin) {\n\t\t\t\tvar parts = Curve.subdivide(v1, 0.5),\n\t\t\t\t\tt = tMinNew + (tMaxNew - tMinNew) / 2;\n\t\t\t\taddCurveIntersections(\n\t\t\t\t\tv2, parts[0], curve2, curve1, locations, include,\n\t\t\t\t\tuMin, uMax, tMinNew, t, tDiff, !reverse, ++recursion);\n\t\t\t\taddCurveIntersections(\n\t\t\t\t\tv2, parts[1], curve2, curve1, locations, include,\n\t\t\t\t\tuMin, uMax, t, tMaxNew, tDiff, !reverse, recursion);\n\t\t\t} else {\n\t\t\t\tvar parts = Curve.subdivide(v2, 0.5),\n\t\t\t\t\tt = uMin + (uMax - uMin) / 2;\n\t\t\t\taddCurveIntersections(\n\t\t\t\t\tparts[0], v1, curve2, curve1, locations, include,\n\t\t\t\t\tuMin, t, tMinNew, tMaxNew, tDiff, !reverse, ++recursion);\n\t\t\t\taddCurveIntersections(\n\t\t\t\t\tparts[1], v1, curve2, curve1, locations, include,\n\t\t\t\t\tt, uMax, tMinNew, tMaxNew, tDiff, !reverse, recursion);\n\t\t\t}\n\t\t} else if (Math.max(uMax - uMin, tMaxNew - tMinNew) < tolerance) {\n\t\t\tvar t1 = tMinNew + (tMaxNew - tMinNew) / 2,\n\t\t\t\tt2 = uMin + (uMax - uMin) / 2;\n\t\t\tif (reverse) {\n\t\t\t\taddLocation(locations, include,\n\t\t\t\t\t\tcurve2, t2, Curve.evaluate(v2, t2, 0),\n\t\t\t\t\t\tcurve1, t1, Curve.evaluate(v1, t1, 0));\n\t\t\t} else {\n\t\t\t\taddLocation(locations, include,\n\t\t\t\t\t\tcurve1, t1, Curve.evaluate(v1, t1, 0),\n\t\t\t\t\t\tcurve2, t2, Curve.evaluate(v2, t2, 0));\n\t\t\t}\n\t\t} else if (tDiff > 0) {\n\t\t\taddCurveIntersections(v2, v1, curve2, curve1, locations, include,\n\t\t\t\t\tuMin, uMax, tMinNew, tMaxNew, tDiff, !reverse, ++recursion);\n\t\t}\n\t}\n\n\tfunction getConvexHull(dq0, dq1, dq2, dq3) {\n\t\tvar p0 = [ 0, dq0 ],\n\t\t\tp1 = [ 1 / 3, dq1 ],\n\t\t\tp2 = [ 2 / 3, dq2 ],\n\t\t\tp3 = [ 1, dq3 ],\n\t\t\tgetSignedDistance = Line.getSignedDistance,\n\t\t\tdist1 = getSignedDistance(0, dq0, 1, dq3, 1 / 3, dq1),\n\t\t\tdist2 = getSignedDistance(0, dq0, 1, dq3, 2 / 3, dq2),\n\t\t\tflip = false,\n\t\t\thull;\n\t\tif (dist1 * dist2 < 0) {\n\t\t\thull = [[p0, p1, p3], [p0, p2, p3]];\n\t\t\tflip = dist1 < 0;\n\t\t} else {\n\t\t\tvar pmax, cross = 0,\n\t\t\t\tdistZero = dist1 === 0 || dist2 === 0;\n\t\t\tif (Math.abs(dist1) > Math.abs(dist2)) {\n\t\t\t\tpmax = p1;\n\t\t\t\tcross = (dq3 - dq2 - (dq3 - dq0) / 3)\n\t\t\t\t\t\t* (2 * (dq3 - dq2) - dq3 + dq1) / 3;\n\t\t\t} else {\n\t\t\t\tpmax = p2;\n\t\t\t\tcross = (dq1 - dq0 + (dq0 - dq3) / 3)\n\t\t\t\t\t\t* (-2 * (dq0 - dq1) + dq0 - dq2) / 3;\n\t\t\t}\n\t\t\thull = cross < 0 || distZero\n\t\t\t\t\t? [[p0, pmax, p3], [p0, p3]]\n\t\t\t\t\t: [[p0, p1, p2, p3], [p0, p3]];\n\t\t\tflip = dist1 ? dist1 < 0 : dist2 < 0;\n\t\t}\n\t\treturn flip ? hull.reverse() : hull;\n\t}\n\n\tfunction clipConvexHull(hullTop, hullBottom, dMin, dMax) {\n\t\tif (hullTop[0][1] < dMin) {\n\t\t\treturn clipConvexHullPart(hullTop, true, dMin);\n\t\t} else if (hullBottom[0][1] > dMax) {\n\t\t\treturn clipConvexHullPart(hullBottom, false, dMax);\n\t\t} else {\n\t\t\treturn hullTop[0][0];\n\t\t}\n\t}\n\n\tfunction clipConvexHullPart(part, top, threshold) {\n\t\tvar px = part[0][0],\n\t\t\tpy = part[0][1];\n\t\tfor (var i = 1, l = part.length; i < l; i++) {\n\t\t\tvar qx = part[i][0],\n\t\t\t\tqy = part[i][1];\n\t\t\tif (top ? qy >= threshold : qy <= threshold)\n\t\t\t\treturn px + (threshold - py) * (qx - px) / (qy - py);\n\t\t\tpx = qx;\n\t\t\tpy = qy;\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction addCurveLineIntersections(v1, v2, curve1, curve2, locations,\n\t\t\tinclude) {\n\t\tvar flip = Curve.isLinear(v1),\n\t\t\tvc = flip ? v2 : v1,\n\t\t\tvl = flip ? v1 : v2,\n\t\t\tlx1 = vl[0], ly1 = vl[1],\n\t\t\tlx2 = vl[6], ly2 = vl[7],\n\t\t\tldx = lx2 - lx1,\n\t\t\tldy = ly2 - ly1,\n\t\t\tangle = Math.atan2(-ldy, ldx),\n\t\t\tsin = Math.sin(angle),\n\t\t\tcos = Math.cos(angle),\n\t\t\trlx2 = ldx * cos - ldy * sin,\n\t\t\trvl = [0, 0, 0, 0, rlx2, 0, rlx2, 0],\n\t\t\trvc = [];\n\t\tfor(var i = 0; i < 8; i += 2) {\n\t\t\tvar x = vc[i] - lx1,\n\t\t\t\ty = vc[i + 1] - ly1;\n\t\t\trvc.push(\n\t\t\t\tx * cos - y * sin,\n\t\t\t\ty * cos + x * sin);\n\t\t}\n\t\tvar roots = [],\n\t\t\tcount = Curve.solveCubic(rvc, 1, 0, roots, 0, 1);\n\t\tfor (var i = 0; i < count; i++) {\n\t\t\tvar tc = roots[i],\n\t\t\t\tx = Curve.evaluate(rvc, tc, 0).x;\n\t\t\tif (x >= 0 && x <= rlx2) {\n\t\t\t\tvar tl = Curve.getParameterOf(rvl, x, 0),\n\t\t\t\t\tt1 = flip ? tl : tc,\n\t\t\t\t\tt2 = flip ? tc : tl;\n\t\t\t\taddLocation(locations, include,\n\t\t\t\t\t\tcurve1, t1, Curve.evaluate(v1, t1, 0),\n\t\t\t\t\t\tcurve2, t2, Curve.evaluate(v2, t2, 0));\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction addLineIntersection(v1, v2, curve1, curve2, locations, include) {\n\t\tvar point = Line.intersect(\n\t\t\t\tv1[0], v1[1], v1[6], v1[7],\n\t\t\t\tv2[0], v2[1], v2[6], v2[7]);\n\t\tif (point) {\n\t\t\tvar x = point.x,\n\t\t\t\ty = point.y;\n\t\t\taddLocation(locations, include,\n\t\t\t\t\tcurve1, Curve.getParameterOf(v1, x, y), point,\n\t\t\t\t\tcurve2, Curve.getParameterOf(v2, x, y), point);\n\t\t}\n\t}\n\n\treturn { statics: {\n\t\tgetIntersections: function(v1, v2, c1, c2, locations, include) {\n\t\t\tvar linear1 = Curve.isLinear(v1),\n\t\t\t\tlinear2 = Curve.isLinear(v2),\n\t\t\t\tc1p1 = c1.getPoint1(),\n\t\t\t\tc1p2 = c1.getPoint2(),\n\t\t\t\tc2p1 = c2.getPoint1(),\n\t\t\t\tc2p2 = c2.getPoint2(),\n\t\t\t\ttolerance = 0.000001;\n\t\t\tif (c1p1.isClose(c2p1, tolerance))\n\t\t\t\taddLocation(locations, include, c1, 0, c1p1, c2, 0, c1p1);\n\t\t\tif (c1p1.isClose(c2p2, tolerance))\n\t\t\t\taddLocation(locations, include, c1, 0, c1p1, c2, 1, c1p1);\n\t\t\t(linear1 && linear2\n\t\t\t\t? addLineIntersection\n\t\t\t\t: linear1 || linear2\n\t\t\t\t\t? addCurveLineIntersections\n\t\t\t\t\t: addCurveIntersections)(\n\t\t\t\t\t\tv1, v2, c1, c2, locations, include,\n\t\t\t\t\t\t0, 1, 0, 1, 0, false, 0);\n\t\t\tif (c1p2.isClose(c2p1, tolerance))\n\t\t\t\taddLocation(locations, include, c1, 1, c1p2, c2, 0, c1p2);\n\t\t\tif (c1p2.isClose(c2p2, tolerance))\n\t\t\t\taddLocation(locations, include, c1, 1, c1p2, c2, 1, c1p2);\n\t\t\treturn locations;\n\t\t},\n\n\t\tfilterIntersections: function(locations, _expand) {\n\t\t\tvar last = locations.length - 1,\n\t\t\t\ttMax = 1 - 0.000001;\n\t\t\tfor (var i = last; i >= 0; i--) {\n\t\t\t\tvar loc = locations[i],\n\t\t\t\t\tnext = loc._curve.getNext(),\n\t\t\t\t\tnext2 = loc._curve2.getNext();\n\t\t\t\tif (next && loc._parameter >= tMax) {\n\t\t\t\t\tloc._parameter = 0;\n\t\t\t\t\tloc._curve = next;\n\t\t\t\t}\n\t\t\t\tif (next2 && loc._parameter2 >= tMax) {\n\t\t\t\t\tloc._parameter2 = 0;\n\t\t\t\t\tloc._curve2 = next2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction compare(loc1, loc2) {\n\t\t\t\tvar path1 = loc1.getPath(),\n\t\t\t\t\tpath2 = loc2.getPath();\n\t\t\t\treturn path1 === path2\n\t\t\t\t\t\t? (loc1.getIndex() + loc1.getParameter())\n\t\t\t\t\t\t\t\t- (loc2.getIndex() + loc2.getParameter())\n\t\t\t\t\t\t: path1._id - path2._id;\n\t\t\t}\n\n\t\t\tif (last > 0) {\n\t\t\t\tlocations.sort(compare);\n\t\t\t\tfor (var i = last; i > 0; i--) {\n\t\t\t\t\tif (locations[i].equals(locations[i - 1])) {\n\t\t\t\t\t\tlocations.splice(i, 1);\n\t\t\t\t\t\tlast--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (_expand) {\n\t\t\t\tfor (var i = last; i >= 0; i--)\n\t\t\t\t\tlocations.push(locations[i].getIntersection());\n\t\t\t\tlocations.sort(compare);\n\t\t\t}\n\t\t\treturn locations;\n\t\t}\n\t}};\n});\n\nvar CurveLocation = Base.extend({\n\t_class: 'CurveLocation',\n\tbeans: true,\n\n\tinitialize: function CurveLocation(curve, parameter, point, _curve2,\n\t\t\t_parameter2, _point2, _distance) {\n\t\tthis._id = CurveLocation._id = (CurveLocation._id || 0) + 1;\n\t\tthis._curve = curve;\n\t\tthis._segment1 = curve._segment1;\n\t\tthis._segment2 = curve._segment2;\n\t\tthis._parameter = parameter;\n\t\tthis._point = point;\n\t\tthis._curve2 = _curve2;\n\t\tthis._parameter2 = _parameter2;\n\t\tthis._point2 = _point2;\n\t\tthis._distance = _distance;\n\t},\n\n\tgetSegment: function(_preferFirst) {\n\t\tif (!this._segment) {\n\t\t\tvar curve = this.getCurve(),\n\t\t\t\tparameter = this.getParameter();\n\t\t\tif (parameter === 1) {\n\t\t\t\tthis._segment = curve._segment2;\n\t\t\t} else if (parameter === 0 || _preferFirst) {\n\t\t\t\tthis._segment = curve._segment1;\n\t\t\t} else if (parameter == null) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tthis._segment = curve.getPartLength(0, parameter)\n\t\t\t\t\t< curve.getPartLength(parameter, 1)\n\t\t\t\t\t\t? curve._segment1\n\t\t\t\t\t\t: curve._segment2;\n\t\t\t}\n\t\t}\n\t\treturn this._segment;\n\t},\n\n\tgetCurve: function(_uncached) {\n\t\tif (!this._curve || _uncached) {\n\t\t\tthis._curve = this._segment1.getCurve();\n\t\t\tif (this._curve.getParameterOf(this._point) == null)\n\t\t\t\tthis._curve = this._segment2.getPrevious().getCurve();\n\t\t}\n\t\treturn this._curve;\n\t},\n\n\tgetIntersection: function() {\n\t\tvar intersection = this._intersection;\n\t\tif (!intersection && this._curve2) {\n\t\t\tvar param = this._parameter2;\n\t\t\tthis._intersection = intersection = new CurveLocation(\n\t\t\t\t\tthis._curve2, param, this._point2 || this._point, this);\n\t\t\tintersection._intersection = this;\n\t\t}\n\t\treturn intersection;\n\t},\n\n\tgetPath: function() {\n\t\tvar curve = this.getCurve();\n\t\treturn curve && curve._path;\n\t},\n\n\tgetIndex: function() {\n\t\tvar curve = this.getCurve();\n\t\treturn curve && curve.getIndex();\n\t},\n\n\tgetOffset: function() {\n\t\tvar path = this.getPath();\n\t\treturn path ? path._getOffset(this) : this.getCurveOffset();\n\t},\n\n\tgetCurveOffset: function() {\n\t\tvar curve = this.getCurve(),\n\t\t\tparameter = this.getParameter();\n\t\treturn parameter != null && curve && curve.getPartLength(0, parameter);\n\t},\n\n\tgetParameter: function(_uncached) {\n\t\tif ((this._parameter == null || _uncached) && this._point) {\n\t\t\tvar curve = this.getCurve(_uncached);\n\t\t\tthis._parameter = curve && curve.getParameterOf(this._point);\n\t\t}\n\t\treturn this._parameter;\n\t},\n\n\tgetPoint: function(_uncached) {\n\t\tif ((!this._point || _uncached) && this._parameter != null) {\n\t\t\tvar curve = this.getCurve(_uncached);\n\t\t\tthis._point = curve && curve.getPointAt(this._parameter, true);\n\t\t}\n\t\treturn this._point;\n\t},\n\n\tgetDistance: function() {\n\t\treturn this._distance;\n\t},\n\n\tdivide: function() {\n\t\tvar curve = this.getCurve(true);\n\t\treturn curve && curve.divide(this.getParameter(true), true);\n\t},\n\n\tsplit: function() {\n\t\tvar curve = this.getCurve(true);\n\t\treturn curve && curve.split(this.getParameter(true), true);\n\t},\n\n\tequals: function(loc) {\n\t\tvar abs = Math.abs,\n\t\t\ttolerance = 0.000001;\n\t\treturn this === loc\n\t\t\t\t|| loc\n\t\t\t\t\t&& this._curve === loc._curve\n\t\t\t\t\t&& this._curve2 === loc._curve2\n\t\t\t\t\t&& abs(this._parameter - loc._parameter) <= tolerance\n\t\t\t\t\t&& abs(this._parameter2 - loc._parameter2) <= tolerance\n\t\t\t\t|| false;\n\t},\n\n\ttoString: function() {\n\t\tvar parts = [],\n\t\t\tpoint = this.getPoint(),\n\t\t\tf = Formatter.instance;\n\t\tif (point)\n\t\t\tparts.push('point: ' + point);\n\t\tvar index = this.getIndex();\n\t\tif (index != null)\n\t\t\tparts.push('index: ' + index);\n\t\tvar parameter = this.getParameter();\n\t\tif (parameter != null)\n\t\t\tparts.push('parameter: ' + f.number(parameter));\n\t\tif (this._distance != null)\n\t\t\tparts.push('distance: ' + f.number(this._distance));\n\t\treturn '{ ' + parts.join(', ') + ' }';\n\t}\n}, Base.each(['getTangent', 'getNormal', 'getCurvature'], function(name) {\n\tvar get = name + 'At';\n\tthis[name] = function() {\n\t\tvar parameter = this.getParameter(),\n\t\t\tcurve = this.getCurve();\n\t\treturn parameter != null && curve && curve[get](parameter, true);\n\t};\n}, {}));\n\nvar PathItem = Item.extend({\n\t_class: 'PathItem',\n\n\tinitialize: function PathItem() {\n\t},\n\n\tgetIntersections: function(path, _matrix, _expand) {\n\t\tif (this === path)\n\t\t\tpath = null;\n\t\tvar locations = [],\n\t\t\tcurves1 = this.getCurves(),\n\t\t\tcurves2 = path ? path.getCurves() : curves1,\n\t\t\tmatrix1 = this._matrix.orNullIfIdentity(),\n\t\t\tmatrix2 = path ? (_matrix || path._matrix).orNullIfIdentity()\n\t\t\t\t: matrix1,\n\t\t\tlength1 = curves1.length,\n\t\t\tlength2 = path ? curves2.length : length1,\n\t\t\tvalues2 = [],\n\t\t\ttMin = 0.000001,\n\t\t\ttMax = 1 - tMin;\n\t\tif (path && !this.getBounds(matrix1).touches(path.getBounds(matrix2)))\n\t\t\treturn [];\n\t\tfor (var i = 0; i < length2; i++)\n\t\t\tvalues2[i] = curves2[i].getValues(matrix2);\n\t\tfor (var i = 0; i < length1; i++) {\n\t\t\tvar curve1 = curves1[i],\n\t\t\t\tvalues1 = path ? curve1.getValues(matrix1) : values2[i];\n\t\t\tif (!path) {\n\t\t\t\tvar seg1 = curve1.getSegment1(),\n\t\t\t\t\tseg2 = curve1.getSegment2(),\n\t\t\t\t\th1 = seg1._handleOut,\n\t\t\t\t\th2 = seg2._handleIn;\n\t\t\t\tif (new Line(seg1._point.subtract(h1), h1.multiply(2), true)\n\t\t\t\t\t\t.intersect(new Line(seg2._point.subtract(h2),\n\t\t\t\t\t\th2.multiply(2), true), false)) {\n\t\t\t\t\tvar parts = Curve.subdivide(values1);\n\t\t\t\t\tCurve.getIntersections(\n\t\t\t\t\t\tparts[0], parts[1], curve1, curve1, locations,\n\t\t\t\t\t\tfunction(loc) {\n\t\t\t\t\t\t\tif (loc._parameter <= tMax) {\n\t\t\t\t\t\t\t\tloc._parameter /= 2;\n\t\t\t\t\t\t\t\tloc._parameter2 = 0.5 + loc._parameter2 / 2;\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (var j = path ? 0 : i + 1; j < length2; j++) {\n\t\t\t\tCurve.getIntersections(\n\t\t\t\t\tvalues1, values2[j], curve1, curves2[j], locations,\n\t\t\t\t\t!path && (j === i + 1 || j === length2 - 1 && i === 0)\n\t\t\t\t\t\t&& function(loc) {\n\t\t\t\t\t\t\tvar t = loc._parameter;\n\t\t\t\t\t\t\treturn t >= tMin && t <= tMax;\n\t\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn Curve.filterIntersections(locations, _expand);\n\t},\n\n\t_asPathItem: function() {\n\t\treturn this;\n\t},\n\n\tsetPathData: function(data) {\n\n\t\tvar parts = data.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/ig),\n\t\t\tcoords,\n\t\t\trelative = false,\n\t\t\tprevious,\n\t\t\tcontrol,\n\t\t\tcurrent = new Point(),\n\t\t\tstart = new Point();\n\n\t\tfunction getCoord(index, coord) {\n\t\t\tvar val = +coords[index];\n\t\t\tif (relative)\n\t\t\t\tval += current[coord];\n\t\t\treturn val;\n\t\t}\n\n\t\tfunction getPoint(index) {\n\t\t\treturn new Point(\n\t\t\t\tgetCoord(index, 'x'),\n\t\t\t\tgetCoord(index + 1, 'y')\n\t\t\t);\n\t\t}\n\n\t\tthis.clear();\n\n\t\tfor (var i = 0, l = parts && parts.length; i < l; i++) {\n\t\t\tvar part = parts[i],\n\t\t\t\tcommand = part[0],\n\t\t\t\tlower = command.toLowerCase();\n\t\t\tcoords = part.match(/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g);\n\t\t\tvar length = coords && coords.length;\n\t\t\trelative = command === lower;\n\t\t\tif (previous === 'z' && !/[mz]/.test(lower))\n\t\t\t\tthis.moveTo(current = start);\n\t\t\tswitch (lower) {\n\t\t\tcase 'm':\n\t\t\tcase 'l':\n\t\t\t\tvar move = lower === 'm';\n\t\t\t\tif (move && previous && previous !== 'z')\n\t\t\t\t\tthis.closePath(true);\n\t\t\t\tfor (var j = 0; j < length; j += 2)\n\t\t\t\t\tthis[j === 0 && move ? 'moveTo' : 'lineTo'](\n\t\t\t\t\t\t\tcurrent = getPoint(j));\n\t\t\t\tcontrol = current;\n\t\t\t\tif (move)\n\t\t\t\t\tstart = current;\n\t\t\t\tbreak;\n\t\t\tcase 'h':\n\t\t\tcase 'v':\n\t\t\t\tvar coord = lower === 'h' ? 'x' : 'y';\n\t\t\t\tfor (var j = 0; j < length; j++) {\n\t\t\t\t\tcurrent[coord] = getCoord(j, coord);\n\t\t\t\t\tthis.lineTo(current);\n\t\t\t\t}\n\t\t\t\tcontrol = current;\n\t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\tfor (var j = 0; j < length; j += 6) {\n\t\t\t\t\tthis.cubicCurveTo(\n\t\t\t\t\t\t\tgetPoint(j),\n\t\t\t\t\t\t\tcontrol = getPoint(j + 2),\n\t\t\t\t\t\t\tcurrent = getPoint(j + 4));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\tfor (var j = 0; j < length; j += 4) {\n\t\t\t\t\tthis.cubicCurveTo(\n\t\t\t\t\t\t\t/[cs]/.test(previous)\n\t\t\t\t\t\t\t\t\t? current.multiply(2).subtract(control)\n\t\t\t\t\t\t\t\t\t: current,\n\t\t\t\t\t\t\tcontrol = getPoint(j),\n\t\t\t\t\t\t\tcurrent = getPoint(j + 2));\n\t\t\t\t\tprevious = lower;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'q':\n\t\t\t\tfor (var j = 0; j < length; j += 4) {\n\t\t\t\t\tthis.quadraticCurveTo(\n\t\t\t\t\t\t\tcontrol = getPoint(j),\n\t\t\t\t\t\t\tcurrent = getPoint(j + 2));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 't':\n\t\t\t\tfor (var j = 0; j < length; j += 2) {\n\t\t\t\t\tthis.quadraticCurveTo(\n\t\t\t\t\t\t\tcontrol = (/[qt]/.test(previous)\n\t\t\t\t\t\t\t\t\t? current.multiply(2).subtract(control)\n\t\t\t\t\t\t\t\t\t: current),\n\t\t\t\t\t\t\tcurrent = getPoint(j));\n\t\t\t\t\tprevious = lower;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'a':\n\t\t\t\tfor (var j = 0; j < length; j += 7) {\n\t\t\t\t\tthis.arcTo(current = getPoint(j + 5),\n\t\t\t\t\t\t\tnew Size(+coords[j], +coords[j + 1]),\n\t\t\t\t\t\t\t+coords[j + 2], +coords[j + 4], +coords[j + 3]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'z':\n\t\t\t\tthis.closePath(true);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tprevious = lower;\n\t\t}\n\t},\n\n\t_canComposite: function() {\n\t\treturn !(this.hasFill() && this.hasStroke());\n\t},\n\n\t_contains: function(point) {\n\t\tvar winding = this._getWinding(point, false, true);\n\t\treturn !!(this.getWindingRule() === 'evenodd' ? winding & 1 : winding);\n\t}\n\n});\n\nvar Path = PathItem.extend({\n\t_class: 'Path',\n\t_serializeFields: {\n\t\tsegments: [],\n\t\tclosed: false\n\t},\n\n\tinitialize: function Path(arg) {\n\t\tthis._closed = false;\n\t\tthis._segments = [];\n\t\tvar segments = Array.isArray(arg)\n\t\t\t? typeof arg[0] === 'object'\n\t\t\t\t? arg\n\t\t\t\t: arguments\n\t\t\t: arg && (arg.size === undefined && (arg.x !== undefined\n\t\t\t\t\t|| arg.point !== undefined))\n\t\t\t\t? arguments\n\t\t\t\t: null;\n\t\tif (segments && segments.length > 0) {\n\t\t\tthis.setSegments(segments);\n\t\t} else {\n\t\t\tthis._curves = undefined;\n\t\t\tthis._selectedSegmentState = 0;\n\t\t\tif (!segments && typeof arg === 'string') {\n\t\t\t\tthis.setPathData(arg);\n\t\t\t\targ = null;\n\t\t\t}\n\t\t}\n\t\tthis._initialize(!segments && arg);\n\t},\n\n\t_equals: function(item) {\n\t\treturn this._closed === item._closed\n\t\t\t\t&& Base.equals(this._segments, item._segments);\n\t},\n\n\tclone: function(insert) {\n\t\tvar copy = new Path(Item.NO_INSERT);\n\t\tcopy.setSegments(this._segments);\n\t\tcopy._closed = this._closed;\n\t\tif (this._clockwise !== undefined)\n\t\t\tcopy._clockwise = this._clockwise;\n\t\treturn this._clone(copy, insert);\n\t},\n\n\t_changed: function _changed(flags) {\n\t\t_changed.base.call(this, flags);\n\t\tif (flags & 8) {\n\t\t\tvar parent = this._parent;\n\t\t\tif (parent)\n\t\t\t\tparent._currentPath = undefined;\n\t\t\tthis._length = this._clockwise = undefined;\n\t\t\tif (this._curves && !(flags & 16)) {\n\t\t\t\tfor (var i = 0, l = this._curves.length; i < l; i++)\n\t\t\t\t\tthis._curves[i]._changed();\n\t\t\t}\n\t\t\tthis._monoCurves = undefined;\n\t\t} else if (flags & 32) {\n\t\t\tthis._bounds = undefined;\n\t\t}\n\t},\n\n\tgetStyle: function() {\n\t\tvar parent = this._parent;\n\t\treturn (parent instanceof CompoundPath ? parent : this)._style;\n\t},\n\n\tgetSegments: function() {\n\t\treturn this._segments;\n\t},\n\n\tsetSegments: function(segments) {\n\t\tvar fullySelected = this.isFullySelected();\n\t\tthis._segments.length = 0;\n\t\tthis._selectedSegmentState = 0;\n\t\tthis._curves = undefined;\n\t\tif (segments && segments.length > 0)\n\t\t\tthis._add(Segment.readAll(segments));\n\t\tif (fullySelected)\n\t\t\tthis.setFullySelected(true);\n\t},\n\n\tgetFirstSegment: function() {\n\t\treturn this._segments[0];\n\t},\n\n\tgetLastSegment: function() {\n\t\treturn this._segments[this._segments.length - 1];\n\t},\n\n\tgetCurves: function() {\n\t\tvar curves = this._curves,\n\t\t\tsegments = this._segments;\n\t\tif (!curves) {\n\t\t\tvar length = this._countCurves();\n\t\t\tcurves = this._curves = new Array(length);\n\t\t\tfor (var i = 0; i < length; i++)\n\t\t\t\tcurves[i] = new Curve(this, segments[i],\n\t\t\t\t\tsegments[i + 1] || segments[0]);\n\t\t}\n\t\treturn curves;\n\t},\n\n\tgetFirstCurve: function() {\n\t\treturn this.getCurves()[0];\n\t},\n\n\tgetLastCurve: function() {\n\t\tvar curves = this.getCurves();\n\t\treturn curves[curves.length - 1];\n\t},\n\n\tisClosed: function() {\n\t\treturn this._closed;\n\t},\n\n\tsetClosed: function(closed) {\n\t\tif (this._closed != (closed = !!closed)) {\n\t\t\tthis._closed = closed;\n\t\t\tif (this._curves) {\n\t\t\t\tvar length = this._curves.length = this._countCurves();\n\t\t\t\tif (closed)\n\t\t\t\t\tthis._curves[length - 1] = new Curve(this,\n\t\t\t\t\t\tthis._segments[length - 1], this._segments[0]);\n\t\t\t}\n\t\t\tthis._changed(25);\n\t\t}\n\t}\n}, {\n\tbeans: true,\n\n\tgetPathData: function(_matrix, _precision) {\n\t\tvar segments = this._segments,\n\t\t\tlength = segments.length,\n\t\t\tf = new Formatter(_precision),\n\t\t\tcoords = new Array(6),\n\t\t\tfirst = true,\n\t\t\tcurX, curY,\n\t\t\tprevX, prevY,\n\t\t\tinX, inY,\n\t\t\toutX, outY,\n\t\t\tparts = [];\n\n\t\tfunction addSegment(segment, skipLine) {\n\t\t\tsegment._transformCoordinates(_matrix, coords, false);\n\t\t\tcurX = coords[0];\n\t\t\tcurY = coords[1];\n\t\t\tif (first) {\n\t\t\t\tparts.push('M' + f.pair(curX, curY));\n\t\t\t\tfirst = false;\n\t\t\t} else {\n\t\t\t\tinX = coords[2];\n\t\t\t\tinY = coords[3];\n\t\t\t\tif (inX === curX && inY === curY\n\t\t\t\t\t\t&& outX === prevX && outY === prevY) {\n\t\t\t\t\tif (!skipLine)\n\t\t\t\t\t\tparts.push('l' + f.pair(curX - prevX, curY - prevY));\n\t\t\t\t} else {\n\t\t\t\t\tparts.push('c' + f.pair(outX - prevX, outY - prevY)\n\t\t\t\t\t\t\t+ ' ' + f.pair(inX - prevX, inY - prevY)\n\t\t\t\t\t\t\t+ ' ' + f.pair(curX - prevX, curY - prevY));\n\t\t\t\t}\n\t\t\t}\n\t\t\tprevX = curX;\n\t\t\tprevY = curY;\n\t\t\toutX = coords[4];\n\t\t\toutY = coords[5];\n\t\t}\n\n\t\tif (length === 0)\n\t\t\treturn '';\n\n\t\tfor (var i = 0; i < length; i++)\n\t\t\taddSegment(segments[i]);\n\t\tif (this._closed && length > 0) {\n\t\t\taddSegment(segments[0], true);\n\t\t\tparts.push('z');\n\t\t}\n\t\treturn parts.join('');\n\t}\n}, {\n\n\tisEmpty: function() {\n\t\treturn this._segments.length === 0;\n\t},\n\n\tisPolygon: function() {\n\t\tfor (var i = 0, l = this._segments.length; i < l; i++) {\n\t\t\tif (!this._segments[i].isLinear())\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t_transformContent: function(matrix) {\n\t\tvar coords = new Array(6);\n\t\tfor (var i = 0, l = this._segments.length; i < l; i++)\n\t\t\tthis._segments[i]._transformCoordinates(matrix, coords, true);\n\t\treturn true;\n\t},\n\n\t_add: function(segs, index) {\n\t\tvar segments = this._segments,\n\t\t\tcurves = this._curves,\n\t\t\tamount = segs.length,\n\t\t\tappend = index == null,\n\t\t\tindex = append ? segments.length : index;\n\t\tfor (var i = 0; i < amount; i++) {\n\t\t\tvar segment = segs[i];\n\t\t\tif (segment._path)\n\t\t\t\tsegment = segs[i] = segment.clone();\n\t\t\tsegment._path = this;\n\t\t\tsegment._index = index + i;\n\t\t\tif (segment._selectionState)\n\t\t\t\tthis._updateSelection(segment, 0, segment._selectionState);\n\t\t}\n\t\tif (append) {\n\t\t\tsegments.push.apply(segments, segs);\n\t\t} else {\n\t\t\tsegments.splice.apply(segments, [index, 0].concat(segs));\n\t\t\tfor (var i = index + amount, l = segments.length; i < l; i++)\n\t\t\t\tsegments[i]._index = i;\n\t\t}\n\t\tif (curves || segs._curves) {\n\t\t\tif (!curves)\n\t\t\t\tcurves = this._curves = [];\n\t\t\tvar from = index > 0 ? index - 1 : index,\n\t\t\t\tstart = from,\n\t\t\t\tto = Math.min(from + amount, this._countCurves());\n\t\t\tif (segs._curves) {\n\t\t\t\tcurves.splice.apply(curves, [from, 0].concat(segs._curves));\n\t\t\t\tstart += segs._curves.length;\n\t\t\t}\n\t\t\tfor (var i = start; i < to; i++)\n\t\t\t\tcurves.splice(i, 0, new Curve(this, null, null));\n\t\t\tthis._adjustCurves(from, to);\n\t\t}\n\t\tthis._changed(25);\n\t\treturn segs;\n\t},\n\n\t_adjustCurves: function(from, to) {\n\t\tvar segments = this._segments,\n\t\t\tcurves = this._curves,\n\t\t\tcurve;\n\t\tfor (var i = from; i < to; i++) {\n\t\t\tcurve = curves[i];\n\t\t\tcurve._path = this;\n\t\t\tcurve._segment1 = segments[i];\n\t\t\tcurve._segment2 = segments[i + 1] || segments[0];\n\t\t\tcurve._changed();\n\t\t}\n\t\tif (curve = curves[this._closed && from === 0 ? segments.length - 1\n\t\t\t\t: from - 1]) {\n\t\t\tcurve._segment2 = segments[from] || segments[0];\n\t\t\tcurve._changed();\n\t\t}\n\t\tif (curve = curves[to]) {\n\t\t\tcurve._segment1 = segments[to];\n\t\t\tcurve._changed();\n\t\t}\n\t},\n\n\t_countCurves: function() {\n\t\tvar length = this._segments.length;\n\t\treturn !this._closed && length > 0 ? length - 1 : length;\n\t},\n\n\tadd: function(segment1 ) {\n\t\treturn arguments.length > 1 && typeof segment1 !== 'number'\n\t\t\t? this._add(Segment.readAll(arguments))\n\t\t\t: this._add([ Segment.read(arguments) ])[0];\n\t},\n\n\tinsert: function(index, segment1 ) {\n\t\treturn arguments.length > 2 && typeof segment1 !== 'number'\n\t\t\t? this._add(Segment.readAll(arguments, 1), index)\n\t\t\t: this._add([ Segment.read(arguments, 1) ], index)[0];\n\t},\n\n\taddSegment: function() {\n\t\treturn this._add([ Segment.read(arguments) ])[0];\n\t},\n\n\tinsertSegment: function(index ) {\n\t\treturn this._add([ Segment.read(arguments, 1) ], index)[0];\n\t},\n\n\taddSegments: function(segments) {\n\t\treturn this._add(Segment.readAll(segments));\n\t},\n\n\tinsertSegments: function(index, segments) {\n\t\treturn this._add(Segment.readAll(segments), index);\n\t},\n\n\tremoveSegment: function(index) {\n\t\treturn this.removeSegments(index, index + 1)[0] || null;\n\t},\n\n\tremoveSegments: function(from, to, _includeCurves) {\n\t\tfrom = from || 0;\n\t\tto = Base.pick(to, this._segments.length);\n\t\tvar segments = this._segments,\n\t\t\tcurves = this._curves,\n\t\t\tcount = segments.length,\n\t\t\tremoved = segments.splice(from, to - from),\n\t\t\tamount = removed.length;\n\t\tif (!amount)\n\t\t\treturn removed;\n\t\tfor (var i = 0; i < amount; i++) {\n\t\t\tvar segment = removed[i];\n\t\t\tif (segment._selectionState)\n\t\t\t\tthis._updateSelection(segment, segment._selectionState, 0);\n\t\t\tsegment._index = segment._path = null;\n\t\t}\n\t\tfor (var i = from, l = segments.length; i < l; i++)\n\t\t\tsegments[i]._index = i;\n\t\tif (curves) {\n\t\t\tvar index = from > 0 && to === count + (this._closed ? 1 : 0)\n\t\t\t\t\t? from - 1\n\t\t\t\t\t: from,\n\t\t\t\tcurves = curves.splice(index, amount);\n\t\t\tif (_includeCurves)\n\t\t\t\tremoved._curves = curves.slice(1);\n\t\t\tthis._adjustCurves(index, index);\n\t\t}\n\t\tthis._changed(25);\n\t\treturn removed;\n\t},\n\n\tclear: '#removeSegments',\n\n\tgetLength: function() {\n\t\tif (this._length == null) {\n\t\t\tvar curves = this.getCurves();\n\t\t\tthis._length = 0;\n\t\t\tfor (var i = 0, l = curves.length; i < l; i++)\n\t\t\t\tthis._length += curves[i].getLength();\n\t\t}\n\t\treturn this._length;\n\t},\n\n\tgetArea: function() {\n\t\tvar curves = this.getCurves();\n\t\tvar area = 0;\n\t\tfor (var i = 0, l = curves.length; i < l; i++)\n\t\t\tarea += curves[i].getArea();\n\t\treturn area;\n\t},\n\n\tisFullySelected: function() {\n\t\tvar length = this._segments.length;\n\t\treturn this._selected && length > 0 && this._selectedSegmentState\n\t\t\t\t=== length * 7;\n\t},\n\n\tsetFullySelected: function(selected) {\n\t\tif (selected)\n\t\t\tthis._selectSegments(true);\n\t\tthis.setSelected(selected);\n\t},\n\n\tsetSelected: function setSelected(selected) {\n\t\tif (!selected)\n\t\t\tthis._selectSegments(false);\n\t\tsetSelected.base.call(this, selected);\n\t},\n\n\t_selectSegments: function(selected) {\n\t\tvar length = this._segments.length;\n\t\tthis._selectedSegmentState = selected\n\t\t\t\t? length * 7 : 0;\n\t\tfor (var i = 0; i < length; i++)\n\t\t\tthis._segments[i]._selectionState = selected\n\t\t\t\t\t? 7 : 0;\n\t},\n\n\t_updateSelection: function(segment, oldState, newState) {\n\t\tsegment._selectionState = newState;\n\t\tvar total = this._selectedSegmentState += newState - oldState;\n\t\tif (total > 0)\n\t\t\tthis.setSelected(true);\n\t},\n\n\tflatten: function(maxDistance) {\n\t\tvar iterator = new PathIterator(this, 64, 0.1),\n\t\t\tpos = 0,\n\t\t\tstep = iterator.length / Math.ceil(iterator.length / maxDistance),\n\t\t\tend = iterator.length + (this._closed ? -step : step) / 2;\n\t\tvar segments = [];\n\t\twhile (pos <= end) {\n\t\t\tsegments.push(new Segment(iterator.evaluate(pos, 0)));\n\t\t\tpos += step;\n\t\t}\n\t\tthis.setSegments(segments);\n\t},\n\n\treduce: function() {\n\t\tvar curves = this.getCurves();\n\t\tfor (var i = curves.length - 1; i >= 0; i--) {\n\t\t\tvar curve = curves[i];\n\t\t\tif (curve.isLinear() && curve.getLength() === 0)\n\t\t\t\tcurve.remove();\n\t\t}\n\t\treturn this;\n\t},\n\n\tsimplify: function(tolerance) {\n\t\tif (this._segments.length > 2) {\n\t\t\tvar fitter = new PathFitter(this, tolerance || 2.5);\n\t\t\tthis.setSegments(fitter.fit());\n\t\t}\n\t},\n\n\tsplit: function(index, parameter) {\n\t\tif (parameter === null)\n\t\t\treturn null;\n\t\tif (arguments.length === 1) {\n\t\t\tvar arg = index;\n\t\t\tif (typeof arg === 'number')\n\t\t\t\targ = this.getLocationAt(arg);\n\t\t\tif (!arg)\n\t\t\t\treturn null\n\t\t\tindex = arg.index;\n\t\t\tparameter = arg.parameter;\n\t\t}\n\t\tvar tolerance = 0.000001;\n\t\tif (parameter >= 1 - tolerance) {\n\t\t\tindex++;\n\t\t\tparameter--;\n\t\t}\n\t\tvar curves = this.getCurves();\n\t\tif (index >= 0 && index < curves.length) {\n\t\t\tif (parameter > tolerance) {\n\t\t\t\tcurves[index++].divide(parameter, true);\n\t\t\t}\n\t\t\tvar segs = this.removeSegments(index, this._segments.length, true),\n\t\t\t\tpath;\n\t\t\tif (this._closed) {\n\t\t\t\tthis.setClosed(false);\n\t\t\t\tpath = this;\n\t\t\t} else {\n\t\t\t\tpath = this._clone(new Path().insertAbove(this, true));\n\t\t\t}\n\t\t\tpath._add(segs, 0);\n\t\t\tthis.addSegment(segs[0]);\n\t\t\treturn path;\n\t\t}\n\t\treturn null;\n\t},\n\n\tisClockwise: function() {\n\t\tif (this._clockwise !== undefined)\n\t\t\treturn this._clockwise;\n\t\treturn Path.isClockwise(this._segments);\n\t},\n\n\tsetClockwise: function(clockwise) {\n\t\tif (this.isClockwise() != (clockwise = !!clockwise))\n\t\t\tthis.reverse();\n\t\tthis._clockwise = clockwise;\n\t},\n\n\treverse: function() {\n\t\tthis._segments.reverse();\n\t\tfor (var i = 0, l = this._segments.length; i < l; i++) {\n\t\t\tvar segment = this._segments[i];\n\t\t\tvar handleIn = segment._handleIn;\n\t\t\tsegment._handleIn = segment._handleOut;\n\t\t\tsegment._handleOut = handleIn;\n\t\t\tsegment._index = i;\n\t\t}\n\t\tthis._curves = null;\n\t\tif (this._clockwise !== undefined)\n\t\t\tthis._clockwise = !this._clockwise;\n\t\tthis._changed(9);\n\t},\n\n\tjoin: function(path) {\n\t\tif (path) {\n\t\t\tvar segments = path._segments,\n\t\t\t\tlast1 = this.getLastSegment(),\n\t\t\t\tlast2 = path.getLastSegment();\n\t\t\tif (!last2)\n\t\t\t\treturn this;\n\t\t\tif (last1 && last1._point.equals(last2._point))\n\t\t\t\tpath.reverse();\n\t\t\tvar first2 = path.getFirstSegment();\n\t\t\tif (last1 && last1._point.equals(first2._point)) {\n\t\t\t\tlast1.setHandleOut(first2._handleOut);\n\t\t\t\tthis._add(segments.slice(1));\n\t\t\t} else {\n\t\t\t\tvar first1 = this.getFirstSegment();\n\t\t\t\tif (first1 && first1._point.equals(first2._point))\n\t\t\t\t\tpath.reverse();\n\t\t\t\tlast2 = path.getLastSegment();\n\t\t\t\tif (first1 && first1._point.equals(last2._point)) {\n\t\t\t\t\tfirst1.setHandleIn(last2._handleIn);\n\t\t\t\t\tthis._add(segments.slice(0, segments.length - 1), 0);\n\t\t\t\t} else {\n\t\t\t\t\tthis._add(segments.slice());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (path.closed)\n\t\t\t\tthis._add([segments[0]]);\n\t\t\tpath.remove();\n\t\t}\n\t\tvar first = this.getFirstSegment(),\n\t\t\tlast = this.getLastSegment();\n\t\tif (first !== last && first._point.equals(last._point)) {\n\t\t\tfirst.setHandleIn(last._handleIn);\n\t\t\tlast.remove();\n\t\t\tthis.setClosed(true);\n\t\t}\n\t\treturn this;\n\t},\n\n\tinterpolate: function(path0, path1, coef) {\n\t\tfor (var i = 0, l = this._segments.length; i < l; i++) {\n\t\t\tif ( !path0._segments[i] || !path1._segments[i] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis._segments[i].interpolate(\n\t\t\t\tpath0._segments[i],\n\t\t\t\tpath1._segments[i],\n\t\t\t\tcoef\n\t\t\t);\n\t\t}\n\n\t\tthis._changed(9);\n\t},\n\n\ttoShape: function(insert) {\n\t\tif (!this._closed)\n\t\t\treturn null;\n\n\t\tvar segments = this._segments,\n\t\t\ttype,\n\t\t\tsize,\n\t\t\tradius,\n\t\t\ttopCenter;\n\n\t\tfunction isColinear(i, j) {\n\t\t\treturn segments[i].isColinear(segments[j]);\n\t\t}\n\n\t\tfunction isOrthogonal(i) {\n\t\t\treturn segments[i].isOrthogonal();\n\t\t}\n\n\t\tfunction isArc(i) {\n\t\t\treturn segments[i].isArc();\n\t\t}\n\n\t\tfunction getDistance(i, j) {\n\t\t\treturn segments[i]._point.getDistance(segments[j]._point);\n\t\t}\n\n\t\tif (this.isPolygon() && segments.length === 4\n\t\t\t\t&& isColinear(0, 2) && isColinear(1, 3) && isOrthogonal(1)) {\n\t\t\ttype = Shape.Rectangle;\n\t\t\tsize = new Size(getDistance(0, 3), getDistance(0, 1));\n\t\t\ttopCenter = segments[1]._point.add(segments[2]._point).divide(2);\n\t\t} else if (segments.length === 8 && isArc(0) && isArc(2) && isArc(4)\n\t\t\t\t&& isArc(6) && isColinear(1, 5) && isColinear(3, 7)) {\n\t\t\ttype = Shape.Rectangle;\n\t\t\tsize = new Size(getDistance(1, 6), getDistance(0, 3));\n\t\t\tradius = size.subtract(new Size(getDistance(0, 7),\n\t\t\t\t\tgetDistance(1, 2))).divide(2);\n\t\t\ttopCenter = segments[3]._point.add(segments[4]._point).divide(2);\n\t\t} else if (segments.length === 4\n\t\t\t\t&& isArc(0) && isArc(1) && isArc(2) && isArc(3)) {\n\t\t\tif (Numerical.isZero(getDistance(0, 2) - getDistance(1, 3))) {\n\t\t\t\ttype = Shape.Circle;\n\t\t\t\tradius = getDistance(0, 2) / 2;\n\t\t\t} else {\n\t\t\t\ttype = Shape.Ellipse;\n\t\t\t\tradius = new Size(getDistance(2, 0) / 2, getDistance(3, 1) / 2);\n\t\t\t}\n\t\t\ttopCenter = segments[1]._point;\n\t\t}\n\n\t\tif (type) {\n\t\t\tvar center = this.getPosition(true),\n\t\t\t\tshape = new type({\n\t\t\t\t\tcenter: center,\n\t\t\t\t\tsize: size,\n\t\t\t\t\tradius: radius,\n\t\t\t\t\tinsert: false\n\t\t\t\t});\n\t\t\tshape.rotate(topCenter.subtract(center).getAngle() + 90);\n\t\t\tshape.setStyle(this._style);\n\t\t\tif (insert || insert === undefined)\n\t\t\t\tshape.insertAbove(this);\n\t\t\treturn shape;\n\t\t}\n\t\treturn null;\n\t},\n\n\t_hitTestSelf: function(point, options) {\n\t\tvar that = this,\n\t\t\tstyle = this.getStyle(),\n\t\t\tsegments = this._segments,\n\t\t\tnumSegments = segments.length,\n\t\t\tclosed = this._closed,\n\t\t\ttolerancePadding = options._tolerancePadding,\n\t\t\tstrokePadding = tolerancePadding,\n\t\t\tjoin, cap, miterLimit,\n\t\t\tarea, loc, res,\n\t\t\thitStroke = options.stroke && style.hasStroke(),\n\t\t\thitFill = options.fill && style.hasFill(),\n\t\t\thitCurves = options.curves,\n\t\t\tradius = hitStroke\n\t\t\t\t\t? style.getStrokeWidth() / 2\n\t\t\t\t\t: hitFill && options.tolerance > 0 || hitCurves\n\t\t\t\t\t\t? 0 : null;\n\t\tif (radius !== null) {\n\t\t\tif (radius > 0) {\n\t\t\t\tjoin = style.getStrokeJoin();\n\t\t\t\tcap = style.getStrokeCap();\n\t\t\t\tmiterLimit = radius * style.getMiterLimit();\n\t\t\t\tstrokePadding = tolerancePadding.add(new Point(radius, radius));\n\t\t\t} else {\n\t\t\t\tjoin = cap = 'round';\n\t\t\t}\n\t\t}\n\n\t\tfunction isCloseEnough(pt, padding) {\n\t\t\treturn point.subtract(pt).divide(padding).length <= 1;\n\t\t}\n\n\t\tfunction checkSegmentPoint(seg, pt, name) {\n\t\t\tif (!options.selected || pt.isSelected()) {\n\t\t\t\tvar anchor = seg._point;\n\t\t\t\tif (pt !== anchor)\n\t\t\t\t\tpt = pt.add(anchor);\n\t\t\t\tif (isCloseEnough(pt, strokePadding)) {\n\t\t\t\t\treturn new HitResult(name, that, {\n\t\t\t\t\t\tsegment: seg,\n\t\t\t\t\t\tpoint: pt\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction checkSegmentPoints(seg, ends) {\n\t\t\treturn (ends || options.segments)\n\t\t\t\t&& checkSegmentPoint(seg, seg._point, 'segment')\n\t\t\t\t|| (!ends && options.handles) && (\n\t\t\t\t\tcheckSegmentPoint(seg, seg._handleIn, 'handle-in') ||\n\t\t\t\t\tcheckSegmentPoint(seg, seg._handleOut, 'handle-out'));\n\t\t}\n\n\t\tfunction addToArea(point) {\n\t\t\tarea.add(point);\n\t\t}\n\n\t\tfunction checkSegmentStroke(segment) {\n\t\t\tif (join !== 'round' || cap !== 'round') {\n\t\t\t\tarea = new Path({ internal: true, closed: true });\n\t\t\t\tif (closed || segment._index > 0\n\t\t\t\t\t\t&& segment._index < numSegments - 1) {\n\t\t\t\t\tif (join !== 'round' && (segment._handleIn.isZero()\n\t\t\t\t\t\t\t|| segment._handleOut.isZero()))\n\t\t\t\t\t\tPath._addBevelJoin(segment, join, radius, miterLimit,\n\t\t\t\t\t\t\t\taddToArea, true);\n\t\t\t\t} else if (cap !== 'round') {\n\t\t\t\t\tPath._addSquareCap(segment, cap, radius, addToArea, true);\n\t\t\t\t}\n\t\t\t\tif (!area.isEmpty()) {\n\t\t\t\t\tvar loc;\n\t\t\t\t\treturn area.contains(point)\n\t\t\t\t\t\t|| (loc = area.getNearestLocation(point))\n\t\t\t\t\t\t\t&& isCloseEnough(loc.getPoint(), tolerancePadding);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn isCloseEnough(segment._point, strokePadding);\n\t\t}\n\n\t\tif (options.ends && !options.segments && !closed) {\n\t\t\tif (res = checkSegmentPoints(segments[0], true)\n\t\t\t\t\t|| checkSegmentPoints(segments[numSegments - 1], true))\n\t\t\t\treturn res;\n\t\t} else if (options.segments || options.handles) {\n\t\t\tfor (var i = 0; i < numSegments; i++)\n\t\t\t\tif (res = checkSegmentPoints(segments[i]))\n\t\t\t\t\treturn res;\n\t\t}\n\t\tif (radius !== null) {\n\t\t\tloc = this.getNearestLocation(point);\n\t\t\tif (loc) {\n\t\t\t\tvar parameter = loc.getParameter();\n\t\t\t\tif (parameter === 0 || parameter === 1 && numSegments > 1) {\n\t\t\t\t\tif (!checkSegmentStroke(loc.getSegment()))\n\t\t\t\t\t\tloc = null;\n\t\t\t\t} else if (!isCloseEnough(loc.getPoint(), strokePadding)) {\n\t\t\t\t\tloc = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!loc && join === 'miter' && numSegments > 1) {\n\t\t\t\tfor (var i = 0; i < numSegments; i++) {\n\t\t\t\t\tvar segment = segments[i];\n\t\t\t\t\tif (point.getDistance(segment._point) <= miterLimit\n\t\t\t\t\t\t\t&& checkSegmentStroke(segment)) {\n\t\t\t\t\t\tloc = segment.getLocation();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn !loc && hitFill && this._contains(point)\n\t\t\t\t|| loc && !hitStroke && !hitCurves\n\t\t\t\t\t? new HitResult('fill', this)\n\t\t\t\t\t: loc\n\t\t\t\t\t\t? new HitResult(hitStroke ? 'stroke' : 'curve', this, {\n\t\t\t\t\t\t\tlocation: loc,\n\t\t\t\t\t\t\tpoint: loc.getPoint()\n\t\t\t\t\t\t})\n\t\t\t\t\t\t: null;\n\t}\n\n}, Base.each(['getPoint', 'getTangent', 'getNormal', 'getCurvature'],\n\tfunction(name) {\n\t\tthis[name + 'At'] = function(offset, isParameter) {\n\t\t\tvar loc = this.getLocationAt(offset, isParameter);\n\t\t\treturn loc && loc[name]();\n\t\t};\n\t},\n{\n\tbeans: false,\n\n\t_getOffset: function(location) {\n\t\tvar index = location && location.getIndex();\n\t\tif (index != null) {\n\t\t\tvar curves = this.getCurves(),\n\t\t\t\toffset = 0;\n\t\t\tfor (var i = 0; i < index; i++)\n\t\t\t\toffset += curves[i].getLength();\n\t\t\tvar curve = curves[index],\n\t\t\t\tparameter = location.getParameter();\n\t\t\tif (parameter > 0)\n\t\t\t\toffset += curve.getPartLength(0, parameter);\n\t\t\treturn offset;\n\t\t}\n\t\treturn null;\n\t},\n\n\tgetLocationOf: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tcurves = this.getCurves();\n\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\tvar loc = curves[i].getLocationOf(point);\n\t\t\tif (loc)\n\t\t\t\treturn loc;\n\t\t}\n\t\treturn null;\n\t},\n\n\tgetOffsetOf: function() {\n\t\tvar loc = this.getLocationOf.apply(this, arguments);\n\t\treturn loc ? loc.getOffset() : null;\n\t},\n\n\tgetLocationAt: function(offset, isParameter) {\n\t\tvar curves = this.getCurves(),\n\t\t\tlength = 0;\n\t\tif (isParameter) {\n\t\t\tvar index = ~~offset;\n\t\t\treturn curves[index].getLocationAt(offset - index, true);\n\t\t}\n\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\tvar start = length,\n\t\t\t\tcurve = curves[i];\n\t\t\tlength += curve.getLength();\n\t\t\tif (length > offset) {\n\t\t\t\treturn curve.getLocationAt(offset - start);\n\t\t\t}\n\t\t}\n\t\tif (offset <= this.getLength())\n\t\t\treturn new CurveLocation(curves[curves.length - 1], 1);\n\t\treturn null;\n\t},\n\n\tgetNearestLocation: function() {\n\t\tvar point = Point.read(arguments),\n\t\t\tcurves = this.getCurves(),\n\t\t\tminDist = Infinity,\n\t\t\tminLoc = null;\n\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\tvar loc = curves[i].getNearestLocation(point);\n\t\t\tif (loc._distance < minDist) {\n\t\t\t\tminDist = loc._distance;\n\t\t\t\tminLoc = loc;\n\t\t\t}\n\t\t}\n\t\treturn minLoc;\n\t},\n\n\tgetNearestPoint: function() {\n\t\treturn this.getNearestLocation.apply(this, arguments).getPoint();\n\t}\n}), new function() {\n\n\tfunction drawHandles(ctx, segments, matrix, size) {\n\t\tvar half = size / 2;\n\n\t\tfunction drawHandle(index) {\n\t\t\tvar hX = coords[index],\n\t\t\t\thY = coords[index + 1];\n\t\t\tif (pX != hX || pY != hY) {\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(pX, pY);\n\t\t\t\tctx.lineTo(hX, hY);\n\t\t\t\tctx.stroke();\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.arc(hX, hY, half, 0, Math.PI * 2, true);\n\t\t\t\tctx.fill();\n\t\t\t}\n\t\t}\n\n\t\tvar coords = new Array(6);\n\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\tvar segment = segments[i];\n\t\t\tsegment._transformCoordinates(matrix, coords, false);\n\t\t\tvar state = segment._selectionState,\n\t\t\t\tpX = coords[0],\n\t\t\t\tpY = coords[1];\n\t\t\tif (state & 1)\n\t\t\t\tdrawHandle(2);\n\t\t\tif (state & 2)\n\t\t\t\tdrawHandle(4);\n\t\t\tctx.fillRect(pX - half, pY - half, size, size);\n\t\t\tif (!(state & 4)) {\n\t\t\t\tvar fillStyle = ctx.fillStyle;\n\t\t\t\tctx.fillStyle = '#ffffff';\n\t\t\t\tctx.fillRect(pX - half + 1, pY - half + 1, size - 2, size - 2);\n\t\t\t\tctx.fillStyle = fillStyle;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction drawSegments(ctx, path, matrix) {\n\t\tvar segments = path._segments,\n\t\t\tlength = segments.length,\n\t\t\tcoords = new Array(6),\n\t\t\tfirst = true,\n\t\t\tcurX, curY,\n\t\t\tprevX, prevY,\n\t\t\tinX, inY,\n\t\t\toutX, outY;\n\n\t\tfunction drawSegment(segment) {\n\t\t\tif (matrix) {\n\t\t\t\tsegment._transformCoordinates(matrix, coords, false);\n\t\t\t\tcurX = coords[0];\n\t\t\t\tcurY = coords[1];\n\t\t\t} else {\n\t\t\t\tvar point = segment._point;\n\t\t\t\tcurX = point._x;\n\t\t\t\tcurY = point._y;\n\t\t\t}\n\t\t\tif (first) {\n\t\t\t\tctx.moveTo(curX, curY);\n\t\t\t\tfirst = false;\n\t\t\t} else {\n\t\t\t\tif (matrix) {\n\t\t\t\t\tinX = coords[2];\n\t\t\t\t\tinY = coords[3];\n\t\t\t\t} else {\n\t\t\t\t\tvar handle = segment._handleIn;\n\t\t\t\t\tinX = curX + handle._x;\n\t\t\t\t\tinY = curY + handle._y;\n\t\t\t\t}\n\t\t\t\tif (inX === curX && inY === curY\n\t\t\t\t\t\t&& outX === prevX && outY === prevY) {\n\t\t\t\t\tctx.lineTo(curX, curY);\n\t\t\t\t} else {\n\t\t\t\t\tctx.bezierCurveTo(outX, outY, inX, inY, curX, curY);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprevX = curX;\n\t\t\tprevY = curY;\n\t\t\tif (matrix) {\n\t\t\t\toutX = coords[4];\n\t\t\t\toutY = coords[5];\n\t\t\t} else {\n\t\t\t\tvar handle = segment._handleOut;\n\t\t\t\toutX = prevX + handle._x;\n\t\t\t\toutY = prevY + handle._y;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i < length; i++)\n\t\t\tdrawSegment(segments[i]);\n\t\tif (path._closed && length > 0)\n\t\t\tdrawSegment(segments[0]);\n\t}\n\n\treturn {\n\t\t_draw: function(ctx, param, strokeMatrix) {\n\t\t\tvar dontStart = param.dontStart,\n\t\t\t\tdontPaint = param.dontFinish || param.clip,\n\t\t\t\tstyle = this.getStyle(),\n\t\t\t\thasFill = style.hasFill(),\n\t\t\t\thasStroke = style.hasStroke(),\n\t\t\t\tdashArray = style.getDashArray(),\n\t\t\t\tdashLength = !paper.support.nativeDash && hasStroke\n\t\t\t\t\t\t&& dashArray && dashArray.length;\n\n\t\t\tif (!dontStart)\n\t\t\t\tctx.beginPath();\n\n\t\t\tif (!dontStart && this._currentPath) {\n\t\t\t\tctx.currentPath = this._currentPath;\n\t\t\t} else if (hasFill || hasStroke && !dashLength || dontPaint) {\n\t\t\t\tdrawSegments(ctx, this, strokeMatrix);\n\t\t\t\tif (this._closed)\n\t\t\t\t\tctx.closePath();\n\t\t\t\tif (!dontStart)\n\t\t\t\t\tthis._currentPath = ctx.currentPath;\n\t\t\t}\n\n\t\t\tfunction getOffset(i) {\n\t\t\t\treturn dashArray[((i % dashLength) + dashLength) % dashLength];\n\t\t\t}\n\n\t\t\tif (!dontPaint && (hasFill || hasStroke)) {\n\t\t\t\tthis._setStyles(ctx);\n\t\t\t\tif (hasFill) {\n\t\t\t\t\tctx.fill(style.getWindingRule());\n\t\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t\t}\n\t\t\t\tif (hasStroke) {\n\t\t\t\t\tif (dashLength) {\n\t\t\t\t\t\tif (!dontStart)\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tvar iterator = new PathIterator(this, 32, 0.25,\n\t\t\t\t\t\t\t\tstrokeMatrix),\n\t\t\t\t\t\t\tlength = iterator.length,\n\t\t\t\t\t\t\tfrom = -style.getDashOffset(), to,\n\t\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\tfrom = from % length;\n\t\t\t\t\t\twhile (from > 0) {\n\t\t\t\t\t\t\tfrom -= getOffset(i--) + getOffset(i--);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (from < length) {\n\t\t\t\t\t\t\tto = from + getOffset(i++);\n\t\t\t\t\t\t\tif (from > 0 || to > 0)\n\t\t\t\t\t\t\t\titerator.drawPart(ctx,\n\t\t\t\t\t\t\t\t\t\tMath.max(from, 0), Math.max(to, 0));\n\t\t\t\t\t\t\tfrom = to + getOffset(i++);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_drawSelected: function(ctx, matrix) {\n\t\t\tctx.beginPath();\n\t\t\tdrawSegments(ctx, this, matrix);\n\t\t\tctx.stroke();\n\t\t\tdrawHandles(ctx, this._segments, matrix, paper.settings.handleSize);\n\t\t}\n\t};\n}, new function() {\n\n\tfunction getFirstControlPoints(rhs) {\n\t\tvar n = rhs.length,\n\t\t\tx = [],\n\t\t\ttmp = [],\n\t\t\tb = 2;\n\t\tx[0] = rhs[0] / b;\n\t\tfor (var i = 1; i < n; i++) {\n\t\t\ttmp[i] = 1 / b;\n\t\t\tb = (i < n - 1 ? 4 : 2) - tmp[i];\n\t\t\tx[i] = (rhs[i] - x[i - 1]) / b;\n\t\t}\n\t\tfor (var i = 1; i < n; i++) {\n\t\t\tx[n - i - 1] -= tmp[n - i] * x[n - i];\n\t\t}\n\t\treturn x;\n\t}\n\n\treturn {\n\t\tsmooth: function() {\n\t\t\tvar segments = this._segments,\n\t\t\t\tsize = segments.length,\n\t\t\t\tclosed = this._closed,\n\t\t\t\tn = size,\n\t\t\t\toverlap = 0;\n\t\t\tif (size <= 2)\n\t\t\t\treturn;\n\t\t\tif (closed) {\n\t\t\t\toverlap = Math.min(size, 4);\n\t\t\t\tn += Math.min(size, overlap) * 2;\n\t\t\t}\n\t\t\tvar knots = [];\n\t\t\tfor (var i = 0; i < size; i++)\n\t\t\t\tknots[i + overlap] = segments[i]._point;\n\t\t\tif (closed) {\n\t\t\t\tfor (var i = 0; i < overlap; i++) {\n\t\t\t\t\tknots[i] = segments[i + size - overlap]._point;\n\t\t\t\t\tknots[i + size + overlap] = segments[i]._point;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tn--;\n\t\t\t}\n\t\t\tvar rhs = [];\n\n\t\t\tfor (var i = 1; i < n - 1; i++)\n\t\t\t\trhs[i] = 4 * knots[i]._x + 2 * knots[i + 1]._x;\n\t\t\trhs[0] = knots[0]._x + 2 * knots[1]._x;\n\t\t\trhs[n - 1] = 3 * knots[n - 1]._x;\n\t\t\tvar x = getFirstControlPoints(rhs);\n\n\t\t\tfor (var i = 1; i < n - 1; i++)\n\t\t\t\trhs[i] = 4 * knots[i]._y + 2 * knots[i + 1]._y;\n\t\t\trhs[0] = knots[0]._y + 2 * knots[1]._y;\n\t\t\trhs[n - 1] = 3 * knots[n - 1]._y;\n\t\t\tvar y = getFirstControlPoints(rhs);\n\n\t\t\tif (closed) {\n\t\t\t\tfor (var i = 0, j = size; i < overlap; i++, j++) {\n\t\t\t\t\tvar f1 = i / overlap,\n\t\t\t\t\t\tf2 = 1 - f1,\n\t\t\t\t\t\tie = i + overlap,\n\t\t\t\t\t\tje = j + overlap;\n\t\t\t\t\tx[j] = x[i] * f1 + x[j] * f2;\n\t\t\t\t\ty[j] = y[i] * f1 + y[j] * f2;\n\t\t\t\t\tx[je] = x[ie] * f2 + x[je] * f1;\n\t\t\t\t\ty[je] = y[ie] * f2 + y[je] * f1;\n\t\t\t\t}\n\t\t\t\tn--;\n\t\t\t}\n\t\t\tvar handleIn = null;\n\t\t\tfor (var i = overlap; i <= n - overlap; i++) {\n\t\t\t\tvar segment = segments[i - overlap];\n\t\t\t\tif (handleIn)\n\t\t\t\t\tsegment.setHandleIn(handleIn.subtract(segment._point));\n\t\t\t\tif (i < n) {\n\t\t\t\t\tsegment.setHandleOut(\n\t\t\t\t\t\t\tnew Point(x[i], y[i]).subtract(segment._point));\n\t\t\t\t\thandleIn = i < n - 1\n\t\t\t\t\t\t\t? new Point(\n\t\t\t\t\t\t\t\t2 * knots[i + 1]._x - x[i + 1],\n\t\t\t\t\t\t\t\t2 * knots[i + 1]._y - y[i + 1])\n\t\t\t\t\t\t\t: new Point(\n\t\t\t\t\t\t\t\t(knots[n]._x + x[n - 1]) / 2,\n\t\t\t\t\t\t\t\t(knots[n]._y + y[n - 1]) / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (closed && handleIn) {\n\t\t\t\tvar segment = this._segments[0];\n\t\t\t\tsegment.setHandleIn(handleIn.subtract(segment._point));\n\t\t\t}\n\t\t}\n\t};\n}, new function() {\n\tfunction getCurrentSegment(that) {\n\t\tvar segments = that._segments;\n\t\tif (segments.length === 0)\n\t\t\tthrow new Error('Use a moveTo() command first');\n\t\treturn segments[segments.length - 1];\n\t}\n\n\treturn {\n\t\tmoveTo: function() {\n\t\t\tvar segments = this._segments;\n\t\t\tif (segments.length === 1)\n\t\t\t\tthis.removeSegment(0);\n\t\t\tif (!segments.length)\n\t\t\t\tthis._add([ new Segment(Point.read(arguments)) ]);\n\t\t},\n\n\t\tmoveBy: function() {\n\t\t\tthrow new Error('moveBy() is unsupported on Path items.');\n\t\t},\n\n\t\tlineTo: function() {\n\t\t\tthis._add([ new Segment(Point.read(arguments)) ]);\n\t\t},\n\n\t\tcubicCurveTo: function() {\n\t\t\tvar handle1 = Point.read(arguments),\n\t\t\t\thandle2 = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this);\n\t\t\tcurrent.setHandleOut(handle1.subtract(current._point));\n\t\t\tthis._add([ new Segment(to, handle2.subtract(to)) ]);\n\t\t},\n\n\t\tquadraticCurveTo: function() {\n\t\t\tvar handle = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.cubicCurveTo(\n\t\t\t\thandle.add(current.subtract(handle).multiply(1 / 3)),\n\t\t\t\thandle.add(to.subtract(handle).multiply(1 / 3)),\n\t\t\t\tto\n\t\t\t);\n\t\t},\n\n\t\tcurveTo: function() {\n\t\t\tvar through = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tt = Base.pick(Base.read(arguments), 0.5),\n\t\t\t\tt1 = 1 - t,\n\t\t\t\tcurrent = getCurrentSegment(this)._point,\n\t\t\t\thandle = through.subtract(current.multiply(t1 * t1))\n\t\t\t\t\t.subtract(to.multiply(t * t)).divide(2 * t * t1);\n\t\t\tif (handle.isNaN())\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Cannot put a curve through points with parameter = ' + t);\n\t\t\tthis.quadraticCurveTo(handle, to);\n\t\t},\n\n\t\tarcTo: function() {\n\t\t\tvar current = getCurrentSegment(this),\n\t\t\t\tfrom = current._point,\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tthrough,\n\t\t\t\tpeek = Base.peek(arguments),\n\t\t\t\tclockwise = Base.pick(peek, true),\n\t\t\t\tcenter, extent, vector, matrix;\n\t\t\tif (typeof clockwise === 'boolean') {\n\t\t\t\tvar middle = from.add(to).divide(2),\n\t\t\t\tthrough = middle.add(middle.subtract(from).rotate(\n\t\t\t\t\t\tclockwise ? -90 : 90));\n\t\t\t} else if (Base.remain(arguments) <= 2) {\n\t\t\t\tthrough = to;\n\t\t\t\tto = Point.read(arguments);\n\t\t\t} else {\n\t\t\t\tvar radius = Size.read(arguments);\n\t\t\t\tif (radius.isZero())\n\t\t\t\t\treturn this.lineTo(to);\n\t\t\t\tvar rotation = Base.read(arguments),\n\t\t\t\t\tclockwise = !!Base.read(arguments),\n\t\t\t\t\tlarge = !!Base.read(arguments),\n\t\t\t\t\tmiddle = from.add(to).divide(2),\n\t\t\t\t\tpt = from.subtract(middle).rotate(-rotation),\n\t\t\t\t\tx = pt.x,\n\t\t\t\t\ty = pt.y,\n\t\t\t\t\tabs = Math.abs,\n\t\t\t\t\tepsilon = 1e-12,\n\t\t\t\t\trx = abs(radius.width),\n\t\t\t\t\try = abs(radius.height),\n\t\t\t\t\trxSq = rx * rx,\n\t\t\t\t\trySq = ry * ry,\n\t\t\t\t\txSq =  x * x,\n\t\t\t\t\tySq =  y * y;\n\t\t\t\tvar factor = Math.sqrt(xSq / rxSq + ySq / rySq);\n\t\t\t\tif (factor > 1) {\n\t\t\t\t\trx *= factor;\n\t\t\t\t\try *= factor;\n\t\t\t\t\trxSq = rx * rx;\n\t\t\t\t\trySq = ry * ry;\n\t\t\t\t}\n\t\t\t\tfactor = (rxSq * rySq - rxSq * ySq - rySq * xSq) /\n\t\t\t\t\t\t(rxSq * ySq + rySq * xSq);\n\t\t\t\tif (abs(factor) < epsilon)\n\t\t\t\t\tfactor = 0;\n\t\t\t\tif (factor < 0)\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Cannot create an arc with the given arguments');\n\t\t\t\tcenter = new Point(rx * y / ry, -ry * x / rx)\n\t\t\t\t\t\t.multiply((large === clockwise ? -1 : 1)\n\t\t\t\t\t\t\t* Math.sqrt(factor))\n\t\t\t\t\t\t.rotate(rotation).add(middle);\n\t\t\t\tmatrix = new Matrix().translate(center).rotate(rotation)\n\t\t\t\t\t\t.scale(rx, ry);\n\t\t\t\tvector = matrix._inverseTransform(from);\n\t\t\t\textent = vector.getDirectedAngle(matrix._inverseTransform(to));\n\t\t\t\tif (!clockwise && extent > 0)\n\t\t\t\t\textent -= 360;\n\t\t\t\telse if (clockwise && extent < 0)\n\t\t\t\t\textent += 360;\n\t\t\t}\n\t\t\tif (through) {\n\t\t\t\tvar l1 = new Line(from.add(through).divide(2),\n\t\t\t\t\t\t\tthrough.subtract(from).rotate(90), true),\n\t\t\t\t\tl2 = new Line(through.add(to).divide(2),\n\t\t\t\t\t\t\tto.subtract(through).rotate(90), true),\n\t\t\t\t\tline = new Line(from, to),\n\t\t\t\t\tthroughSide = line.getSide(through);\n\t\t\t\tcenter = l1.intersect(l2, true);\n\t\t\t\tif (!center) {\n\t\t\t\t\tif (!throughSide)\n\t\t\t\t\t\treturn this.lineTo(to);\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Cannot create an arc with the given arguments');\n\t\t\t\t}\n\t\t\t\tvector = from.subtract(center);\n\t\t\t\textent = vector.getDirectedAngle(to.subtract(center));\n\t\t\t\tvar centerSide = line.getSide(center);\n\t\t\t\tif (centerSide === 0) {\n\t\t\t\t\textent = throughSide * Math.abs(extent);\n\t\t\t\t} else if (throughSide === centerSide) {\n\t\t\t\t\textent += extent < 0 ? 360 : -360;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar ext = Math.abs(extent),\n\t\t\t\tcount = ext >= 360 ? 4 : Math.ceil(ext / 90),\n\t\t\t\tinc = extent / count,\n\t\t\t\thalf = inc * Math.PI / 360,\n\t\t\t\tz = 4 / 3 * Math.sin(half) / (1 + Math.cos(half)),\n\t\t\t\tsegments = [];\n\t\t\tfor (var i = 0; i <= count; i++) {\n\t\t\t\tvar pt = to,\n\t\t\t\t\tout = null;\n\t\t\t\tif (i < count) {\n\t\t\t\t\tout = vector.rotate(90).multiply(z);\n\t\t\t\t\tif (matrix) {\n\t\t\t\t\t\tpt = matrix._transformPoint(vector);\n\t\t\t\t\t\tout = matrix._transformPoint(vector.add(out))\n\t\t\t\t\t\t\t\t.subtract(pt);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt = center.add(vector);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (i === 0) {\n\t\t\t\t\tcurrent.setHandleOut(out);\n\t\t\t\t} else {\n\t\t\t\t\tvar _in = vector.rotate(-90).multiply(z);\n\t\t\t\t\tif (matrix) {\n\t\t\t\t\t\t_in = matrix._transformPoint(vector.add(_in))\n\t\t\t\t\t\t\t\t.subtract(pt);\n\t\t\t\t\t}\n\t\t\t\t\tsegments.push(new Segment(pt, _in, out));\n\t\t\t\t}\n\t\t\t\tvector = vector.rotate(inc);\n\t\t\t}\n\t\t\tthis._add(segments);\n\t\t},\n\n\t\tlineBy: function() {\n\t\t\tvar to = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.lineTo(current.add(to));\n\t\t},\n\n\t\tcurveBy: function() {\n\t\t\tvar through = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tparameter = Base.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.curveTo(current.add(through), current.add(to), parameter);\n\t\t},\n\n\t\tcubicCurveBy: function() {\n\t\t\tvar handle1 = Point.read(arguments),\n\t\t\t\thandle2 = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.cubicCurveTo(current.add(handle1), current.add(handle2),\n\t\t\t\t\tcurrent.add(to));\n\t\t},\n\n\t\tquadraticCurveBy: function() {\n\t\t\tvar handle = Point.read(arguments),\n\t\t\t\tto = Point.read(arguments),\n\t\t\t\tcurrent = getCurrentSegment(this)._point;\n\t\t\tthis.quadraticCurveTo(current.add(handle), current.add(to));\n\t\t},\n\n\t\tarcBy: function() {\n\t\t\tvar current = getCurrentSegment(this)._point,\n\t\t\t\tpoint = current.add(Point.read(arguments)),\n\t\t\t\tclockwise = Base.pick(Base.peek(arguments), true);\n\t\t\tif (typeof clockwise === 'boolean') {\n\t\t\t\tthis.arcTo(point, clockwise);\n\t\t\t} else {\n\t\t\t\tthis.arcTo(point, current.add(Point.read(arguments)));\n\t\t\t}\n\t\t},\n\n\t\tclosePath: function(join) {\n\t\t\tthis.setClosed(true);\n\t\t\tif (join)\n\t\t\t\tthis.join();\n\t\t}\n\t};\n}, {\n\n\t_getBounds: function(getter, matrix) {\n\t\treturn Path[getter](this._segments, this._closed, this.getStyle(),\n\t\t\t\tmatrix);\n\t},\n\nstatics: {\n\tisClockwise: function(segments) {\n\t\tvar sum = 0;\n\t\tfor (var i = 0, l = segments.length; i < l; i++)\n\t\t\tsum += Curve.getEdgeSum(Curve.getValues(\n\t\t\t\t\tsegments[i], segments[i + 1 < l ? i + 1 : 0]));\n\t\treturn sum > 0;\n\t},\n\n\tgetBounds: function(segments, closed, style, matrix, strokePadding) {\n\t\tvar first = segments[0];\n\t\tif (!first)\n\t\t\treturn new Rectangle();\n\t\tvar coords = new Array(6),\n\t\t\tprevCoords = first._transformCoordinates(matrix, new Array(6), false),\n\t\t\tmin = prevCoords.slice(0, 2),\n\t\t\tmax = min.slice(),\n\t\t\troots = new Array(2);\n\n\t\tfunction processSegment(segment) {\n\t\t\tsegment._transformCoordinates(matrix, coords, false);\n\t\t\tfor (var i = 0; i < 2; i++) {\n\t\t\t\tCurve._addBounds(\n\t\t\t\t\tprevCoords[i],\n\t\t\t\t\tprevCoords[i + 4],\n\t\t\t\t\tcoords[i + 2],\n\t\t\t\t\tcoords[i],\n\t\t\t\t\ti, strokePadding ? strokePadding[i] : 0, min, max, roots);\n\t\t\t}\n\t\t\tvar tmp = prevCoords;\n\t\t\tprevCoords = coords;\n\t\t\tcoords = tmp;\n\t\t}\n\n\t\tfor (var i = 1, l = segments.length; i < l; i++)\n\t\t\tprocessSegment(segments[i]);\n\t\tif (closed)\n\t\t\tprocessSegment(first);\n\t\treturn new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n\t},\n\n\tgetStrokeBounds: function(segments, closed, style, matrix) {\n\t\tif (!style.hasStroke())\n\t\t\treturn Path.getBounds(segments, closed, style, matrix);\n\t\tvar length = segments.length - (closed ? 0 : 1),\n\t\t\tradius = style.getStrokeWidth() / 2,\n\t\t\tpadding = Path._getPenPadding(radius, matrix),\n\t\t\tbounds = Path.getBounds(segments, closed, style, matrix, padding),\n\t\t\tjoin = style.getStrokeJoin(),\n\t\t\tcap = style.getStrokeCap(),\n\t\t\tmiterLimit = radius * style.getMiterLimit();\n\t\tvar joinBounds = new Rectangle(new Size(padding).multiply(2));\n\n\t\tfunction add(point) {\n\t\t\tbounds = bounds.include(matrix\n\t\t\t\t? matrix._transformPoint(point, point) : point);\n\t\t}\n\n\t\tfunction addRound(segment) {\n\t\t\tbounds = bounds.unite(joinBounds.setCenter(matrix\n\t\t\t\t? matrix._transformPoint(segment._point) : segment._point));\n\t\t}\n\n\t\tfunction addJoin(segment, join) {\n\t\t\tvar handleIn = segment._handleIn,\n\t\t\t\thandleOut = segment._handleOut;\n\t\t\tif (join === 'round' || !handleIn.isZero() && !handleOut.isZero()\n\t\t\t\t\t&& handleIn.isColinear(handleOut)) {\n\t\t\t\taddRound(segment);\n\t\t\t} else {\n\t\t\t\tPath._addBevelJoin(segment, join, radius, miterLimit, add);\n\t\t\t}\n\t\t}\n\n\t\tfunction addCap(segment, cap) {\n\t\t\tif (cap === 'round') {\n\t\t\t\taddRound(segment);\n\t\t\t} else {\n\t\t\t\tPath._addSquareCap(segment, cap, radius, add);\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 1; i < length; i++)\n\t\t\taddJoin(segments[i], join);\n\t\tif (closed) {\n\t\t\taddJoin(segments[0], join);\n\t\t} else if (length > 0) {\n\t\t\taddCap(segments[0], cap);\n\t\t\taddCap(segments[segments.length - 1], cap);\n\t\t}\n\t\treturn bounds;\n\t},\n\n\t_getPenPadding: function(radius, matrix) {\n\t\tif (!matrix)\n\t\t\treturn [radius, radius];\n\t\tvar mx = matrix.shiftless(),\n\t\t\thor = mx.transform(new Point(radius, 0)),\n\t\t\tver = mx.transform(new Point(0, radius)),\n\t\t\tphi = hor.getAngleInRadians(),\n\t\t\ta = hor.getLength(),\n\t\t\tb = ver.getLength();\n\t\tvar sin = Math.sin(phi),\n\t\t\tcos = Math.cos(phi),\n\t\t\ttan = Math.tan(phi),\n\t\t\ttx = -Math.atan(b * tan / a),\n\t\t\tty = Math.atan(b / (tan * a));\n\t\treturn [Math.abs(a * Math.cos(tx) * cos - b * Math.sin(tx) * sin),\n\t\t\t\tMath.abs(b * Math.sin(ty) * cos + a * Math.cos(ty) * sin)];\n\t},\n\n\t_addBevelJoin: function(segment, join, radius, miterLimit, addPoint, area) {\n\t\tvar curve2 = segment.getCurve(),\n\t\t\tcurve1 = curve2.getPrevious(),\n\t\t\tpoint = curve2.getPointAt(0, true),\n\t\t\tnormal1 = curve1.getNormalAt(1, true),\n\t\t\tnormal2 = curve2.getNormalAt(0, true),\n\t\t\tstep = normal1.getDirectedAngle(normal2) < 0 ? -radius : radius;\n\t\tnormal1.setLength(step);\n\t\tnormal2.setLength(step);\n\t\tif (area) {\n\t\t\taddPoint(point);\n\t\t\taddPoint(point.add(normal1));\n\t\t}\n\t\tif (join === 'miter') {\n\t\t\tvar corner = new Line(\n\t\t\t\t\tpoint.add(normal1),\n\t\t\t\t\tnew Point(-normal1.y, normal1.x), true\n\t\t\t\t).intersect(new Line(\n\t\t\t\t\tpoint.add(normal2),\n\t\t\t\t\tnew Point(-normal2.y, normal2.x), true\n\t\t\t\t), true);\n\t\t\tif (corner && point.getDistance(corner) <= miterLimit) {\n\t\t\t\taddPoint(corner);\n\t\t\t\tif (!area)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (!area)\n\t\t\taddPoint(point.add(normal1));\n\t\taddPoint(point.add(normal2));\n\t},\n\n\t_addSquareCap: function(segment, cap, radius, addPoint, area) {\n\t\tvar point = segment._point,\n\t\t\tloc = segment.getLocation(),\n\t\t\tnormal = loc.getNormal().normalize(radius);\n\t\tif (area) {\n\t\t\taddPoint(point.subtract(normal));\n\t\t\taddPoint(point.add(normal));\n\t\t}\n\t\tif (cap === 'square')\n\t\t\tpoint = point.add(normal.rotate(loc.getParameter() === 0 ? -90 : 90));\n\t\taddPoint(point.add(normal));\n\t\taddPoint(point.subtract(normal));\n\t},\n\n\tgetHandleBounds: function(segments, closed, style, matrix, strokePadding,\n\t\t\tjoinPadding) {\n\t\tvar coords = new Array(6),\n\t\t\tx1 = Infinity,\n\t\t\tx2 = -x1,\n\t\t\ty1 = x1,\n\t\t\ty2 = x2;\n\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\tvar segment = segments[i];\n\t\t\tsegment._transformCoordinates(matrix, coords, false);\n\t\t\tfor (var j = 0; j < 6; j += 2) {\n\t\t\t\tvar padding = j === 0 ? joinPadding : strokePadding,\n\t\t\t\t\tpaddingX = padding ? padding[0] : 0,\n\t\t\t\t\tpaddingY = padding ? padding[1] : 0,\n\t\t\t\t\tx = coords[j],\n\t\t\t\t\ty = coords[j + 1],\n\t\t\t\t\txn = x - paddingX,\n\t\t\t\t\txx = x + paddingX,\n\t\t\t\t\tyn = y - paddingY,\n\t\t\t\t\tyx = y + paddingY;\n\t\t\t\tif (xn < x1) x1 = xn;\n\t\t\t\tif (xx > x2) x2 = xx;\n\t\t\t\tif (yn < y1) y1 = yn;\n\t\t\t\tif (yx > y2) y2 = yx;\n\t\t\t}\n\t\t}\n\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);\n\t},\n\n\tgetRoughBounds: function(segments, closed, style, matrix) {\n\t\tvar strokeRadius = style.hasStroke() ? style.getStrokeWidth() / 2 : 0,\n\t\t\tjoinRadius = strokeRadius;\n\t\tif (strokeRadius > 0) {\n\t\t\tif (style.getStrokeJoin() === 'miter')\n\t\t\t\tjoinRadius = strokeRadius * style.getMiterLimit();\n\t\t\tif (style.getStrokeCap() === 'square')\n\t\t\t\tjoinRadius = Math.max(joinRadius, strokeRadius * Math.sqrt(2));\n\t\t}\n\t\treturn Path.getHandleBounds(segments, closed, style, matrix,\n\t\t\t\tPath._getPenPadding(strokeRadius, matrix),\n\t\t\t\tPath._getPenPadding(joinRadius, matrix));\n\t}\n}});\n\nPath.inject({ statics: new function() {\n\n\tvar kappa = 0.5522847498307936,\n\t\tellipseSegments = [\n\t\t\tnew Segment([-1, 0], [0, kappa ], [0, -kappa]),\n\t\t\tnew Segment([0, -1], [-kappa, 0], [kappa, 0 ]),\n\t\t\tnew Segment([1, 0], [0, -kappa], [0, kappa ]),\n\t\t\tnew Segment([0, 1], [kappa, 0 ], [-kappa, 0])\n\t\t];\n\n\tfunction createPath(segments, closed, args) {\n\t\tvar props = Base.getNamed(args),\n\t\t\tpath = new Path(props && props.insert === false && Item.NO_INSERT);\n\t\tpath._add(segments);\n\t\tpath._closed = closed;\n\t\treturn path.set(props);\n\t}\n\n\tfunction createEllipse(center, radius, args) {\n\t\tvar segments = new Array(4);\n\t\tfor (var i = 0; i < 4; i++) {\n\t\t\tvar segment = ellipseSegments[i];\n\t\t\tsegments[i] = new Segment(\n\t\t\t\tsegment._point.multiply(radius).add(center),\n\t\t\t\tsegment._handleIn.multiply(radius),\n\t\t\t\tsegment._handleOut.multiply(radius)\n\t\t\t);\n\t\t}\n\t\treturn createPath(segments, true, args);\n\t}\n\n\treturn {\n\t\tLine: function() {\n\t\t\treturn createPath([\n\t\t\t\tnew Segment(Point.readNamed(arguments, 'from')),\n\t\t\t\tnew Segment(Point.readNamed(arguments, 'to'))\n\t\t\t], false, arguments);\n\t\t},\n\n\t\tCircle: function() {\n\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\tradius = Base.readNamed(arguments, 'radius');\n\t\t\treturn createEllipse(center, new Size(radius), arguments);\n\t\t},\n\n\t\tRectangle: function() {\n\t\t\tvar rect = Rectangle.readNamed(arguments, 'rectangle'),\n\t\t\t\tradius = Size.readNamed(arguments, 'radius', 0,\n\t\t\t\t\t\t{ readNull: true }),\n\t\t\t\tbl = rect.getBottomLeft(true),\n\t\t\t\ttl = rect.getTopLeft(true),\n\t\t\t\ttr = rect.getTopRight(true),\n\t\t\t\tbr = rect.getBottomRight(true),\n\t\t\t\tsegments;\n\t\t\tif (!radius || radius.isZero()) {\n\t\t\t\tsegments = [\n\t\t\t\t\tnew Segment(bl),\n\t\t\t\t\tnew Segment(tl),\n\t\t\t\t\tnew Segment(tr),\n\t\t\t\t\tnew Segment(br)\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\tradius = Size.min(radius, rect.getSize(true).divide(2));\n\t\t\t\tvar rx = radius.width,\n\t\t\t\t\try = radius.height,\n\t\t\t\t\thx = rx * kappa,\n\t\t\t\t\thy = ry * kappa;\n\t\t\t\tsegments = [\n\t\t\t\t\tnew Segment(bl.add(rx, 0), null, [-hx, 0]),\n\t\t\t\t\tnew Segment(bl.subtract(0, ry), [0, hy]),\n\t\t\t\t\tnew Segment(tl.add(0, ry), null, [0, -hy]),\n\t\t\t\t\tnew Segment(tl.add(rx, 0), [-hx, 0], null),\n\t\t\t\t\tnew Segment(tr.subtract(rx, 0), null, [hx, 0]),\n\t\t\t\t\tnew Segment(tr.add(0, ry), [0, -hy], null),\n\t\t\t\t\tnew Segment(br.subtract(0, ry), null, [0, hy]),\n\t\t\t\t\tnew Segment(br.subtract(rx, 0), [hx, 0])\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn createPath(segments, true, arguments);\n\t\t},\n\n\t\tRoundRectangle: '#Rectangle',\n\n\t\tEllipse: function() {\n\t\t\tvar ellipse = Shape._readEllipse(arguments);\n\t\t\treturn createEllipse(ellipse.center, ellipse.radius, arguments);\n\t\t},\n\n\t\tOval: '#Ellipse',\n\n\t\tArc: function() {\n\t\t\tvar from = Point.readNamed(arguments, 'from'),\n\t\t\t\tthrough = Point.readNamed(arguments, 'through'),\n\t\t\t\tto = Point.readNamed(arguments, 'to'),\n\t\t\t\tprops = Base.getNamed(arguments),\n\t\t\t\tpath = new Path(props && props.insert === false\n\t\t\t\t\t\t&& Item.NO_INSERT);\n\t\t\tpath.moveTo(from);\n\t\t\tpath.arcTo(through, to);\n\t\t\treturn path.set(props);\n\t\t},\n\n\t\tRegularPolygon: function() {\n\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\tsides = Base.readNamed(arguments, 'sides'),\n\t\t\t\tradius = Base.readNamed(arguments, 'radius'),\n\t\t\t\tstep = 360 / sides,\n\t\t\t\tthree = !(sides % 3),\n\t\t\t\tvector = new Point(0, three ? -radius : radius),\n\t\t\t\toffset = three ? -1 : 0.5,\n\t\t\t\tsegments = new Array(sides);\n\t\t\tfor (var i = 0; i < sides; i++)\n\t\t\t\tsegments[i] = new Segment(center.add(\n\t\t\t\t\tvector.rotate((i + offset) * step)));\n\t\t\treturn createPath(segments, true, arguments);\n\t\t},\n\n\t\tStar: function() {\n\t\t\tvar center = Point.readNamed(arguments, 'center'),\n\t\t\t\tpoints = Base.readNamed(arguments, 'points') * 2,\n\t\t\t\tradius1 = Base.readNamed(arguments, 'radius1'),\n\t\t\t\tradius2 = Base.readNamed(arguments, 'radius2'),\n\t\t\t\tstep = 360 / points,\n\t\t\t\tvector = new Point(0, -1),\n\t\t\t\tsegments = new Array(points);\n\t\t\tfor (var i = 0; i < points; i++)\n\t\t\t\tsegments[i] = new Segment(center.add(vector.rotate(step * i)\n\t\t\t\t\t\t.multiply(i % 2 ? radius2 : radius1)));\n\t\t\treturn createPath(segments, true, arguments);\n\t\t}\n\t};\n}});\n\nvar CompoundPath = PathItem.extend({\n\t_class: 'CompoundPath',\n\t_serializeFields: {\n\t\tchildren: []\n\t},\n\n\tinitialize: function CompoundPath(arg) {\n\t\tthis._children = [];\n\t\tthis._namedChildren = {};\n\t\tif (!this._initialize(arg)) {\n\t\t\tif (typeof arg === 'string') {\n\t\t\t\tthis.setPathData(arg);\n\t\t\t} else {\n\t\t\t\tthis.addChildren(Array.isArray(arg) ? arg : arguments);\n\t\t\t}\n\t\t}\n\t},\n\n\tinsertChildren: function insertChildren(index, items, _preserve) {\n\t\titems = insertChildren.base.call(this, index, items, _preserve, Path);\n\t\tfor (var i = 0, l = !_preserve && items && items.length; i < l; i++) {\n\t\t\tvar item = items[i];\n\t\t\tif (item._clockwise === undefined)\n\t\t\t\titem.setClockwise(item._index === 0);\n\t\t}\n\t\treturn items;\n\t},\n\n\treverse: function() {\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tchildren[i].reverse();\n\t},\n\n\tsmooth: function() {\n\t\tfor (var i = 0, l = this._children.length; i < l; i++)\n\t\t\tthis._children[i].smooth();\n\t},\n\n\treduce: function reduce() {\n\t\tif (this._children.length === 0) {\n\t\t\tvar path = new Path(Item.NO_INSERT);\n\t\t\tpath.insertAbove(this);\n\t\t\tpath.setStyle(this._style);\n\t\t\tthis.remove();\n\t\t\treturn path;\n\t\t} else {\n\t\t\treturn reduce.base.call(this);\n\t\t}\n\t},\n\n\tinterpolate: function(compoundpath0, compoundpath1, coef) {\n\t\tfor (var i = 0, l = this._children.length; i < l; i++) {\n\t\t\tif ( !compoundpath0._children[i] || !compoundpath1._children[i] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis._children[i].interpolate(\n\t\t\t\tcompoundpath0._children[i],\n\t\t\t\tcompoundpath1._children[i],\n\t\t\t\tcoef\n\t\t\t);\n\t\t}\n\t},\n\n\tisClockwise: function() {\n\t\tvar child = this.getFirstChild();\n\t\treturn child && child.isClockwise();\n\t},\n\n\tsetClockwise: function(clockwise) {\n\t\tif (this.isClockwise() !== !!clockwise)\n\t\t\tthis.reverse();\n\t},\n\n\tgetFirstSegment: function() {\n\t\tvar first = this.getFirstChild();\n\t\treturn first && first.getFirstSegment();\n\t},\n\n\tgetLastSegment: function() {\n\t\tvar last = this.getLastChild();\n\t\treturn last && last.getLastSegment();\n\t},\n\n\tgetCurves: function() {\n\t\tvar children = this._children,\n\t\t\tcurves = [];\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tcurves.push.apply(curves, children[i].getCurves());\n\t\treturn curves;\n\t},\n\n\tgetFirstCurve: function() {\n\t\tvar first = this.getFirstChild();\n\t\treturn first && first.getFirstCurve();\n\t},\n\n\tgetLastCurve: function() {\n\t\tvar last = this.getLastChild();\n\t\treturn last && last.getFirstCurve();\n\t},\n\n\tgetArea: function() {\n\t\tvar children = this._children,\n\t\t\tarea = 0;\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tarea += children[i].getArea();\n\t\treturn area;\n\t}\n}, {\n\tbeans: true,\n\n\tgetPathData: function(_matrix, _precision) {\n\t\tvar children = this._children,\n\t\t\tpaths = [];\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tvar child = children[i],\n\t\t\t\tmx = child._matrix;\n\t\t\tpaths.push(child.getPathData(_matrix && !mx.isIdentity()\n\t\t\t\t\t? _matrix.chain(mx) : mx, _precision));\n\t\t}\n\t\treturn paths.join(' ');\n\t}\n}, {\n\t_getChildHitTestOptions: function(options) {\n\t\treturn options.class === Path || options.type === 'path'\n\t\t\t\t? options\n\t\t\t\t: new Base(options, { fill: false });\n\t},\n\n\t_draw: function(ctx, param, strokeMatrix) {\n\t\tvar children = this._children;\n\t\tif (children.length === 0)\n\t\t\treturn;\n\n\t\tif (this._currentPath) {\n\t\t\tctx.currentPath = this._currentPath;\n\t\t} else {\n\t\t\tparam = param.extend({ dontStart: true, dontFinish: true });\n\t\t\tctx.beginPath();\n\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\tchildren[i].draw(ctx, param, strokeMatrix);\n\t\t\tthis._currentPath = ctx.currentPath;\n\t\t}\n\n\t\tif (!param.clip) {\n\t\t\tthis._setStyles(ctx);\n\t\t\tvar style = this._style;\n\t\t\tif (style.hasFill()) {\n\t\t\t\tctx.fill(style.getWindingRule());\n\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t}\n\t\t\tif (style.hasStroke())\n\t\t\t\tctx.stroke();\n\t\t}\n\t},\n\n\t_drawSelected: function(ctx, matrix, selectedItems) {\n\t\tvar children = this._children;\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tvar child = children[i],\n\t\t\t\tmx = child._matrix;\n\t\t\tif (!selectedItems[child._id])\n\t\t\t\tchild._drawSelected(ctx, mx.isIdentity() ? matrix\n\t\t\t\t\t\t: matrix.chain(mx));\n\t\t}\n\t}\n}, new function() {\n\tfunction getCurrentPath(that, check) {\n\t\tvar children = that._children;\n\t\tif (check && children.length === 0)\n\t\t\tthrow new Error('Use a moveTo() command first');\n\t\treturn children[children.length - 1];\n\t}\n\n\tvar fields = {\n\t\tmoveTo: function() {\n\t\t\tvar current = getCurrentPath(this),\n\t\t\t\tpath = current && current.isEmpty() ? current : new Path();\n\t\t\tif (path !== current)\n\t\t\t\tthis.addChild(path);\n\t\t\tpath.moveTo.apply(path, arguments);\n\t\t},\n\n\t\tmoveBy: function() {\n\t\t\tvar current = getCurrentPath(this, true),\n\t\t\t\tlast = current && current.getLastSegment(),\n\t\t\t\tpoint = Point.read(arguments);\n\t\t\tthis.moveTo(last ? point.add(last._point) : point);\n\t\t},\n\n\t\tclosePath: function(join) {\n\t\t\tgetCurrentPath(this, true).closePath(join);\n\t\t}\n\t};\n\n\tBase.each(['lineTo', 'cubicCurveTo', 'quadraticCurveTo', 'curveTo', 'arcTo',\n\t\t\t'lineBy', 'cubicCurveBy', 'quadraticCurveBy', 'curveBy', 'arcBy'],\n\t\t\tfunction(key) {\n\t\t\t\tfields[key] = function() {\n\t\t\t\t\tvar path = getCurrentPath(this, true);\n\t\t\t\t\tpath[key].apply(path, arguments);\n\t\t\t\t};\n\t\t\t}\n\t);\n\n\treturn fields;\n});\n\nPathItem.inject(new function() {\n\tvar operators = {\n\t\tunite: function(w) {\n\t\t\treturn w === 1 || w === 0;\n\t\t},\n\n\t\tintersect: function(w) {\n\t\t\treturn w === 2;\n\t\t},\n\n\t\tsubtract: function(w) {\n\t\t\treturn w === 1;\n\t\t},\n\n\t\texclude: function(w) {\n\t\t\treturn w === 1;\n\t\t}\n\t};\n\n\tfunction computeBoolean(path1, path2, operation) {\n\t\tvar operator = operators[operation];\n\t\tfunction preparePath(path) {\n\t\t\treturn path.clone(false).reduce().reorient().transform(null, true,\n\t\t\t\t\ttrue);\n\t\t}\n\n\t\tvar _path1 = preparePath(path1),\n\t\t\t_path2 = path2 && path1 !== path2 && preparePath(path2);\n\t\tif (_path2 && /^(subtract|exclude)$/.test(operation)\n\t\t\t\t^ (_path2.isClockwise() !== _path1.isClockwise()))\n\t\t\t_path2.reverse();\n\t\tsplitPath(_path1.getIntersections(_path2, null, true));\n\n\t\tvar chain = [],\n\t\t\tsegments = [],\n\t\t\tmonoCurves = [],\n\t\t\ttolerance = 0.000001;\n\n\t\tfunction collect(paths) {\n\t\t\tfor (var i = 0, l = paths.length; i < l; i++) {\n\t\t\t\tvar path = paths[i];\n\t\t\t\tsegments.push.apply(segments, path._segments);\n\t\t\t\tmonoCurves.push.apply(monoCurves, path._getMonoCurves());\n\t\t\t}\n\t\t}\n\n\t\tcollect(_path1._children || [_path1]);\n\t\tif (_path2)\n\t\t\tcollect(_path2._children || [_path2]);\n\t\tsegments.sort(function(a, b) {\n\t\t\tvar _a = a._intersection,\n\t\t\t\t_b = b._intersection;\n\t\t\treturn !_a && !_b || _a && _b ? 0 : _a ? -1 : 1;\n\t\t});\n\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\tvar segment = segments[i];\n\t\t\tif (segment._winding != null)\n\t\t\t\tcontinue;\n\t\t\tchain.length = 0;\n\t\t\tvar startSeg = segment,\n\t\t\t\ttotalLength = 0,\n\t\t\t\twindingSum = 0;\n\t\t\tdo {\n\t\t\t\tvar length = segment.getCurve().getLength();\n\t\t\t\tchain.push({ segment: segment, length: length });\n\t\t\t\ttotalLength += length;\n\t\t\t\tsegment = segment.getNext();\n\t\t\t} while (segment && !segment._intersection && segment !== startSeg);\n\t\t\tfor (var j = 0; j < 3; j++) {\n\t\t\t\tvar length = totalLength * (j + 1) / 4;\n\t\t\t\tfor (k = 0, m = chain.length; k < m; k++) {\n\t\t\t\t\tvar node = chain[k],\n\t\t\t\t\t\tcurveLength = node.length;\n\t\t\t\t\tif (length <= curveLength) {\n\t\t\t\t\t\tif (length <= tolerance\n\t\t\t\t\t\t\t\t|| curveLength - length <= tolerance)\n\t\t\t\t\t\t\tlength = curveLength / 2;\n\t\t\t\t\t\tvar curve = node.segment.getCurve(),\n\t\t\t\t\t\t\tpt = curve.getPointAt(length),\n\t\t\t\t\t\t\thor = curve.isLinear() && Math.abs(curve\n\t\t\t\t\t\t\t\t\t.getTangentAt(0.5, true).y) <= tolerance,\n\t\t\t\t\t\t\tpath = curve._path;\n\t\t\t\t\t\tif (path._parent instanceof CompoundPath)\n\t\t\t\t\t\t\tpath = path._parent;\n\t\t\t\t\t\twindingSum += operation === 'subtract' && _path2\n\t\t\t\t\t\t\t&& (path === _path1 && _path2._getWinding(pt, hor)\n\t\t\t\t\t\t\t|| path === _path2 && !_path1._getWinding(pt, hor))\n\t\t\t\t\t\t\t? 0\n\t\t\t\t\t\t\t: getWinding(pt, monoCurves, hor);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tlength -= curveLength;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar winding = Math.round(windingSum / 3);\n\t\t\tfor (var j = chain.length - 1; j >= 0; j--)\n\t\t\t\tchain[j].segment._winding = winding;\n\t\t}\n\t\tvar result = new CompoundPath(Item.NO_INSERT);\n\t\tresult.insertAbove(path1);\n\t\tresult.addChildren(tracePaths(segments, operator), true);\n\t\tresult = result.reduce();\n\t\tresult.setStyle(path1._style);\n\t\treturn result;\n\t}\n\n\tfunction splitPath(intersections) {\n\t\tvar tMin = 0.000001,\n\t\t\ttMax = 1 - tMin,\n\t\t\tlinearHandles;\n\n\t\tfunction resetLinear() {\n\t\t\tfor (var i = 0, l = linearHandles.length; i < l; i++)\n\t\t\t\tlinearHandles[i].set(0, 0);\n\t\t}\n\n\t\tfor (var i = intersections.length - 1, curve, prev; i >= 0; i--) {\n\t\t\tvar loc = intersections[i],\n\t\t\t\tt = loc._parameter;\n\t\t\tif (prev && prev._curve === loc._curve && prev._parameter > 0) {\n\t\t\t\tt /= prev._parameter;\n\t\t\t} else {\n\t\t\t\tcurve = loc._curve;\n\t\t\t\tif (linearHandles)\n\t\t\t\t\tresetLinear();\n\t\t\t\tlinearHandles = curve.isLinear() ? [\n\t\t\t\t\t\tcurve._segment1._handleOut,\n\t\t\t\t\t\tcurve._segment2._handleIn\n\t\t\t\t\t] : null;\n\t\t\t}\n\t\t\tvar newCurve,\n\t\t\t\tsegment;\n\t\t\tif (newCurve = curve.divide(t, true, true)) {\n\t\t\t\tsegment = newCurve._segment1;\n\t\t\t\tcurve = newCurve.getPrevious();\n\t\t\t\tif (linearHandles)\n\t\t\t\t\tlinearHandles.push(segment._handleOut, segment._handleIn);\n\t\t\t} else {\n\t\t\t\tsegment = t < tMin\n\t\t\t\t\t? curve._segment1\n\t\t\t\t\t: t > tMax\n\t\t\t\t\t\t? curve._segment2\n\t\t\t\t\t\t: curve.getPartLength(0, t) < curve.getPartLength(t, 1)\n\t\t\t\t\t\t\t? curve._segment1\n\t\t\t\t\t\t\t: curve._segment2;\n\t\t\t}\n\t\t\tsegment._intersection = loc.getIntersection();\n\t\t\tloc._segment = segment;\n\t\t\tprev = loc;\n\t\t}\n\t\tif (linearHandles)\n\t\t\tresetLinear();\n\t}\n\n\tfunction getWinding(point, curves, horizontal, testContains) {\n\t\tvar tolerance = 0.000001,\n\t\t\ttMin = tolerance,\n\t\t\ttMax = 1 - tMin,\n\t\t\tpx = point.x,\n\t\t\tpy = point.y,\n\t\t\twindLeft = 0,\n\t\t\twindRight = 0,\n\t\t\troots = [],\n\t\t\tabs = Math.abs;\n\t\tif (horizontal) {\n\t\t\tvar yTop = -Infinity,\n\t\t\t\tyBottom = Infinity,\n\t\t\t\tyBefore = py - tolerance,\n\t\t\t\tyAfter = py + tolerance;\n\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\t\tvar values = curves[i].values;\n\t\t\t\tif (Curve.solveCubic(values, 0, px, roots, 0, 1) > 0) {\n\t\t\t\t\tfor (var j = roots.length - 1; j >= 0; j--) {\n\t\t\t\t\t\tvar y = Curve.evaluate(values, roots[j], 0).y;\n\t\t\t\t\t\tif (y < yBefore && y > yTop) {\n\t\t\t\t\t\t\tyTop = y;\n\t\t\t\t\t\t} else if (y > yAfter && y < yBottom) {\n\t\t\t\t\t\t\tyBottom = y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tyTop = (yTop + py) / 2;\n\t\t\tyBottom = (yBottom + py) / 2;\n\t\t\tif (yTop > -Infinity)\n\t\t\t\twindLeft = getWinding(new Point(px, yTop), curves);\n\t\t\tif (yBottom < Infinity)\n\t\t\t\twindRight = getWinding(new Point(px, yBottom), curves);\n\t\t} else {\n\t\t\tvar xBefore = px - tolerance,\n\t\t\t\txAfter = px + tolerance;\n\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\t\tvar curve = curves[i],\n\t\t\t\t\tvalues = curve.values,\n\t\t\t\t\twinding = curve.winding,\n\t\t\t\t\tprevT,\n\t\t\t\t\tprevX;\n\t\t\t\tif (winding && (winding === 1\n\t\t\t\t\t\t&& py >= values[1] && py <= values[7]\n\t\t\t\t\t\t|| py >= values[7] && py <= values[1])\n\t\t\t\t\t&& Curve.solveCubic(values, 1, py, roots, 0, 1) === 1) {\n\t\t\t\t\tvar t = roots[0],\n\t\t\t\t\t\tx = Curve.evaluate(values, t, 0).x,\n\t\t\t\t\t\tslope = Curve.evaluate(values, t, 1).y;\n\t\t\t\t\tif (!(t > tMax\n\t\t\t\t\t\t\t&& (i === l - 1 || curve.next !== curves[i + 1])\n\t\t\t\t\t\t\t&& abs(Curve.evaluate(curve.next.values, 0, 0).x -x)\n\t\t\t\t\t\t\t\t<= tolerance\n\t\t\t\t\t\t|| i > 0 && curve.previous === curves[i - 1]\n\t\t\t\t\t\t\t&& abs(prevX - x) < tolerance\n\t\t\t\t\t\t\t&& prevT > tMax && t < tMin)) {\n\t\t\t\t\t\tif (Numerical.isZero(slope) && !Curve.isLinear(values)\n\t\t\t\t\t\t\t\t|| t < tMin && slope * Curve.evaluate(\n\t\t\t\t\t\t\t\t\tcurve.previous.values, 1, 1).y < 0\n\t\t\t\t\t\t\t\t|| t > tMax && slope * Curve.evaluate(\n\t\t\t\t\t\t\t\t\tcurve.next.values, 0, 1).y < 0) {\n\t\t\t\t\t\t\tif (testContains && x >= xBefore && x <= xAfter) {\n\t\t\t\t\t\t\t\t++windLeft;\n\t\t\t\t\t\t\t\t++windRight;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (x <= xBefore) {\n\t\t\t\t\t\t\twindLeft += winding;\n\t\t\t\t\t\t} else if (x >= xAfter) {\n\t\t\t\t\t\t\twindRight += winding;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tprevT = t;\n\t\t\t\t\tprevX = x;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Math.max(abs(windLeft), abs(windRight));\n\t}\n\n\tfunction tracePaths(segments, operator, selfOp) {\n\t\tvar paths = [],\n\t\t\ttMin = 0.000001,\n\t\t\ttMax = 1 - tMin;\n\t\tfor (var i = 0, seg, startSeg, l = segments.length; i < l; i++) {\n\t\t\tseg = startSeg = segments[i];\n\t\t\tif (seg._visited || !operator(seg._winding))\n\t\t\t\tcontinue;\n\t\t\tvar path = new Path(Item.NO_INSERT),\n\t\t\t\tinter = seg._intersection,\n\t\t\t\tstartInterSeg = inter && inter._segment,\n\t\t\t\tadded = false,\n\t\t\t\tdir = 1;\n\t\t\tdo {\n\t\t\t\tvar handleIn = dir > 0 ? seg._handleIn : seg._handleOut,\n\t\t\t\t\thandleOut = dir > 0 ? seg._handleOut : seg._handleIn,\n\t\t\t\t\tinterSeg;\n\t\t\t\tif (added && (!operator(seg._winding) || selfOp)\n\t\t\t\t\t\t&& (inter = seg._intersection)\n\t\t\t\t\t\t&& (interSeg = inter._segment)\n\t\t\t\t\t\t&& interSeg !== startSeg) {\n\t\t\t\t\tif (selfOp) {\n\t\t\t\t\t\tseg._visited = interSeg._visited;\n\t\t\t\t\t\tseg = interSeg;\n\t\t\t\t\t\tdir = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar c1 = seg.getCurve();\n\t\t\t\t\t\tif (dir > 0)\n\t\t\t\t\t\t\tc1 = c1.getPrevious();\n\t\t\t\t\t\tvar t1 = c1.getTangentAt(dir < 1 ? tMin : tMax, true),\n\t\t\t\t\t\t\tc4 = interSeg.getCurve(),\n\t\t\t\t\t\t\tc3 = c4.getPrevious(),\n\t\t\t\t\t\t\tt3 = c3.getTangentAt(tMax, true),\n\t\t\t\t\t\t\tt4 = c4.getTangentAt(tMin, true),\n\t\t\t\t\t\t\tw3 = t1.cross(t3),\n\t\t\t\t\t\t\tw4 = t1.cross(t4);\n\t\t\t\t\t\tif (w3 * w4 !== 0) {\n\t\t\t\t\t\t\tvar curve = w3 < w4 ? c3 : c4,\n\t\t\t\t\t\t\t\tnextCurve = operator(curve._segment1._winding)\n\t\t\t\t\t\t\t\t\t? curve\n\t\t\t\t\t\t\t\t\t: w3 < w4 ? c4 : c3,\n\t\t\t\t\t\t\t\tnextSeg = nextCurve._segment1;\n\t\t\t\t\t\t\tdir = nextCurve === c3 ? -1 : 1;\n\t\t\t\t\t\t\tif (nextSeg._visited && seg._path !== nextSeg._path\n\t\t\t\t\t\t\t\t\t\t|| !operator(nextSeg._winding)) {\n\t\t\t\t\t\t\t\tdir = 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tseg._visited = interSeg._visited;\n\t\t\t\t\t\t\t\tseg = interSeg;\n\t\t\t\t\t\t\t\tif (nextSeg._visited)\n\t\t\t\t\t\t\t\t\tdir = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdir = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\thandleOut = dir > 0 ? seg._handleOut : seg._handleIn;\n\t\t\t\t}\n\t\t\t\tpath.add(new Segment(seg._point, added && handleIn, handleOut));\n\t\t\t\tadded = true;\n\t\t\t\tseg._visited = true;\n\t\t\t\tseg = dir > 0 ? seg.getNext() : seg. getPrevious();\n\t\t\t} while (seg && !seg._visited\n\t\t\t\t\t&& seg !== startSeg && seg !== startInterSeg\n\t\t\t\t\t&& (seg._intersection || operator(seg._winding)));\n\t\t\tif (seg && (seg === startSeg || seg === startInterSeg)) {\n\t\t\t\tpath.firstSegment.setHandleIn((seg === startInterSeg\n\t\t\t\t\t\t? startInterSeg : seg)._handleIn);\n\t\t\t\tpath.setClosed(true);\n\t\t\t} else {\n\t\t\t\tpath.lastSegment._handleOut.set(0, 0);\n\t\t\t}\n\t\t\tif (path._segments.length >\n\t\t\t\t\t(path._closed ? path.isPolygon() ? 2 : 0 : 1))\n\t\t\t\tpaths.push(path);\n\t\t}\n\t\treturn paths;\n\t}\n\n\treturn {\n\t\t_getWinding: function(point, horizontal, testContains) {\n\t\t\treturn getWinding(point, this._getMonoCurves(),\n\t\t\t\t\thorizontal, testContains);\n\t\t},\n\n\t\tunite: function(path) {\n\t\t\treturn computeBoolean(this, path, 'unite');\n\t\t},\n\n\t\tintersect: function(path) {\n\t\t\treturn computeBoolean(this, path, 'intersect');\n\t\t},\n\n\t\tsubtract: function(path) {\n\t\t\treturn computeBoolean(this, path, 'subtract');\n\t\t},\n\n\t\texclude: function(path) {\n\t\t\treturn computeBoolean(this, path, 'exclude');\n\t\t},\n\n\t\tdivide: function(path) {\n\t\t\treturn new Group([this.subtract(path), this.intersect(path)]);\n\t\t}\n\t};\n});\n\nPath.inject({\n\t_getMonoCurves: function() {\n\t\tvar monoCurves = this._monoCurves,\n\t\t\tprevCurve;\n\n\t\tfunction insertCurve(v) {\n\t\t\tvar y0 = v[1],\n\t\t\t\ty1 = v[7],\n\t\t\t\tcurve = {\n\t\t\t\t\tvalues: v,\n\t\t\t\t\twinding: y0 === y1\n\t\t\t\t\t\t? 0\n\t\t\t\t\t\t: y0 > y1\n\t\t\t\t\t\t\t? -1\n\t\t\t\t\t\t\t: 1,\n\t\t\t\t\tprevious: prevCurve,\n\t\t\t\t\tnext: null\n\t\t\t\t};\n\t\t\tif (prevCurve)\n\t\t\t\tprevCurve.next = curve;\n\t\t\tmonoCurves.push(curve);\n\t\t\tprevCurve = curve;\n\t\t}\n\n\t\tfunction handleCurve(v) {\n\t\t\tif (Curve.getLength(v) === 0)\n\t\t\t\treturn;\n\t\t\tvar y0 = v[1],\n\t\t\t\ty1 = v[3],\n\t\t\t\ty2 = v[5],\n\t\t\t\ty3 = v[7];\n\t\t\tif (Curve.isLinear(v)) {\n\t\t\t\tinsertCurve(v);\n\t\t\t} else {\n\t\t\t\tvar a = 3 * (y1 - y2) - y0 + y3,\n\t\t\t\t\tb = 2 * (y0 + y2) - 4 * y1,\n\t\t\t\t\tc = y1 - y0,\n\t\t\t\t\ttolerance = 0.000001,\n\t\t\t\t\troots = [];\n\t\t\t\tvar count = Numerical.solveQuadratic(a, b, c, roots, tolerance,\n\t\t\t\t\t\t1 - tolerance);\n\t\t\t\tif (count === 0) {\n\t\t\t\t\tinsertCurve(v);\n\t\t\t\t} else {\n\t\t\t\t\troots.sort();\n\t\t\t\t\tvar t = roots[0],\n\t\t\t\t\t\tparts = Curve.subdivide(v, t);\n\t\t\t\t\tinsertCurve(parts[0]);\n\t\t\t\t\tif (count > 1) {\n\t\t\t\t\t\tt = (roots[1] - t) / (1 - t);\n\t\t\t\t\t\tparts = Curve.subdivide(parts[1], t);\n\t\t\t\t\t\tinsertCurve(parts[0]);\n\t\t\t\t\t}\n\t\t\t\t\tinsertCurve(parts[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!monoCurves) {\n\t\t\tmonoCurves = this._monoCurves = [];\n\t\t\tvar curves = this.getCurves(),\n\t\t\t\tsegments = this._segments;\n\t\t\tfor (var i = 0, l = curves.length; i < l; i++)\n\t\t\t\thandleCurve(curves[i].getValues());\n\t\t\tif (!this._closed && segments.length > 1) {\n\t\t\t\tvar p1 = segments[segments.length - 1]._point,\n\t\t\t\t\tp2 = segments[0]._point,\n\t\t\t\t\tp1x = p1._x, p1y = p1._y,\n\t\t\t\t\tp2x = p2._x, p2y = p2._y;\n\t\t\t\thandleCurve([p1x, p1y, p1x, p1y, p2x, p2y, p2x, p2y]);\n\t\t\t}\n\t\t\tif (monoCurves.length > 0) {\n\t\t\t\tvar first = monoCurves[0],\n\t\t\t\t\tlast = monoCurves[monoCurves.length - 1];\n\t\t\t\tfirst.previous = last;\n\t\t\t\tlast.next = first;\n\t\t\t}\n\t\t}\n\t\treturn monoCurves;\n\t},\n\n\tgetInteriorPoint: function() {\n\t\tvar bounds = this.getBounds(),\n\t\t\tpoint = bounds.getCenter(true);\n\t\tif (!this.contains(point)) {\n\t\t\tvar curves = this._getMonoCurves(),\n\t\t\t\troots = [],\n\t\t\t\ty = point.y,\n\t\t\t\txIntercepts = [];\n\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {\n\t\t\t\tvar values = curves[i].values;\n\t\t\t\tif ((curves[i].winding === 1\n\t\t\t\t\t\t&& y >= values[1] && y <= values[7]\n\t\t\t\t\t\t|| y >= values[7] && y <= values[1])\n\t\t\t\t\t\t&& Curve.solveCubic(values, 1, y, roots, 0, 1) > 0) {\n\t\t\t\t\tfor (var j = roots.length - 1; j >= 0; j--)\n\t\t\t\t\t\txIntercepts.push(Curve.evaluate(values, roots[j], 0).x);\n\t\t\t\t}\n\t\t\t\tif (xIntercepts.length > 1)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpoint.x = (xIntercepts[0] + xIntercepts[1]) / 2;\n\t\t}\n\t\treturn point;\n\t},\n\n\treorient: function() {\n\t\tthis.setClockwise(true);\n\t\treturn this;\n\t}\n});\n\nCompoundPath.inject({\n\t_getMonoCurves: function() {\n\t\tvar children = this._children,\n\t\t\tmonoCurves = [];\n\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\tmonoCurves.push.apply(monoCurves, children[i]._getMonoCurves());\n\t\treturn monoCurves;\n\t},\n\n\treorient: function() {\n\t\tvar children = this.removeChildren().sort(function(a, b) {\n\t\t\treturn b.getBounds().getArea() - a.getBounds().getArea();\n\t\t});\n\t\tif (children.length > 0) {\n\t\t\tthis.addChildren(children);\n\t\t\tvar clockwise = children[0].isClockwise();\n\t\t\tfor (var i = 1, l = children.length; i < l; i++) {\n\t\t\t\tvar point = children[i].getInteriorPoint(),\n\t\t\t\t\tcounters = 0;\n\t\t\t\tfor (var j = i - 1; j >= 0; j--) {\n\t\t\t\t\tif (children[j].contains(point))\n\t\t\t\t\t\tcounters++;\n\t\t\t\t}\n\t\t\t\tchildren[i].setClockwise(counters % 2 === 0 && clockwise);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n});\n\nvar PathIterator = Base.extend({\n\t_class: 'PathIterator',\n\n\tinitialize: function(path, maxRecursion, tolerance, matrix) {\n\t\tvar curves = [],\n\t\t\tparts = [],\n\t\t\tlength = 0,\n\t\t\tminDifference = 1 / (maxRecursion || 32),\n\t\t\tsegments = path._segments,\n\t\t\tsegment1 = segments[0],\n\t\t\tsegment2;\n\n\t\tfunction addCurve(segment1, segment2) {\n\t\t\tvar curve = Curve.getValues(segment1, segment2, matrix);\n\t\t\tcurves.push(curve);\n\t\t\tcomputeParts(curve, segment1._index, 0, 1);\n\t\t}\n\n\t\tfunction computeParts(curve, index, minT, maxT) {\n\t\t\tif ((maxT - minT) > minDifference\n\t\t\t\t\t&& !Curve.isFlatEnough(curve, tolerance || 0.25)) {\n\t\t\t\tvar split = Curve.subdivide(curve),\n\t\t\t\t\thalfT = (minT + maxT) / 2;\n\t\t\t\tcomputeParts(split[0], index, minT, halfT);\n\t\t\t\tcomputeParts(split[1], index, halfT, maxT);\n\t\t\t} else {\n\t\t\t\tvar x = curve[6] - curve[0],\n\t\t\t\t\ty = curve[7] - curve[1],\n\t\t\t\t\tdist = Math.sqrt(x * x + y * y);\n\t\t\t\tif (dist > 0.000001) {\n\t\t\t\t\tlength += dist;\n\t\t\t\t\tparts.push({\n\t\t\t\t\t\toffset: length,\n\t\t\t\t\t\tvalue: maxT,\n\t\t\t\t\t\tindex: index\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 1, l = segments.length; i < l; i++) {\n\t\t\tsegment2 = segments[i];\n\t\t\taddCurve(segment1, segment2);\n\t\t\tsegment1 = segment2;\n\t\t}\n\t\tif (path._closed)\n\t\t\taddCurve(segment2, segments[0]);\n\n\t\tthis.curves = curves;\n\t\tthis.parts = parts;\n\t\tthis.length = length;\n\t\tthis.index = 0;\n\t},\n\n\tgetParameterAt: function(offset) {\n\t\tvar i, j = this.index;\n\t\tfor (;;) {\n\t\t\ti = j;\n\t\t\tif (j == 0 || this.parts[--j].offset < offset)\n\t\t\t\tbreak;\n\t\t}\n\t\tfor (var l = this.parts.length; i < l; i++) {\n\t\t\tvar part = this.parts[i];\n\t\t\tif (part.offset >= offset) {\n\t\t\t\tthis.index = i;\n\t\t\t\tvar prev = this.parts[i - 1];\n\t\t\t\tvar prevVal = prev && prev.index == part.index ? prev.value : 0,\n\t\t\t\t\tprevLen = prev ? prev.offset : 0;\n\t\t\t\treturn {\n\t\t\t\t\tvalue: prevVal + (part.value - prevVal)\n\t\t\t\t\t\t* (offset - prevLen) / (part.offset - prevLen),\n\t\t\t\t\tindex: part.index\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tvar part = this.parts[this.parts.length - 1];\n\t\treturn {\n\t\t\tvalue: 1,\n\t\t\tindex: part.index\n\t\t};\n\t},\n\n\tevaluate: function(offset, type) {\n\t\tvar param = this.getParameterAt(offset);\n\t\treturn Curve.evaluate(this.curves[param.index], param.value, type);\n\t},\n\n\tdrawPart: function(ctx, from, to) {\n\t\tfrom = this.getParameterAt(from);\n\t\tto = this.getParameterAt(to);\n\t\tfor (var i = from.index; i <= to.index; i++) {\n\t\t\tvar curve = Curve.getPart(this.curves[i],\n\t\t\t\t\ti == from.index ? from.value : 0,\n\t\t\t\t\ti == to.index ? to.value : 1);\n\t\t\tif (i == from.index)\n\t\t\t\tctx.moveTo(curve[0], curve[1]);\n\t\t\tctx.bezierCurveTo.apply(ctx, curve.slice(2));\n\t\t}\n\t}\n}, Base.each(['getPoint', 'getTangent', 'getNormal', 'getCurvature'],\n\tfunction(name, index) {\n\t\tthis[name + 'At'] = function(offset) {\n\t\t\treturn this.evaluate(offset, index);\n\t\t};\n\t}, {})\n);\n\nvar PathFitter = Base.extend({\n\tinitialize: function(path, error) {\n\t\tvar points = this.points = [],\n\t\t\tsegments = path._segments,\n\t\t\tprev;\n\t\tfor (var i = 0, l = segments.length; i < l; i++) {\n\t\t\tvar point = segments[i].point.clone();\n\t\t\tif (!prev || !prev.equals(point)) {\n\t\t\t\tpoints.push(point);\n\t\t\t\tprev = point;\n\t\t\t}\n\t\t}\n\n\t\tif (path._closed) {\n\t\t\tthis.closed = true;\n\t\t\tpoints.unshift(points[points.length - 1]);\n\t\t\tpoints.push(points[1]);\n\t\t}\n\n\t\tthis.error = error;\n\t},\n\n\tfit: function() {\n\t\tvar points = this.points,\n\t\t\tlength = points.length,\n\t\t\tsegments = this.segments = length > 0\n\t\t\t\t\t? [new Segment(points[0])] : [];\n\t\tif (length > 1)\n\t\t\tthis.fitCubic(0, length - 1,\n\t\t\t\tpoints[1].subtract(points[0]).normalize(),\n\t\t\t\tpoints[length - 2].subtract(points[length - 1]).normalize());\n\n\t\tif (this.closed) {\n\t\t\tsegments.shift();\n\t\t\tsegments.pop();\n\t\t}\n\n\t\treturn segments;\n\t},\n\n\tfitCubic: function(first, last, tan1, tan2) {\n\t\tif (last - first == 1) {\n\t\t\tvar pt1 = this.points[first],\n\t\t\t\tpt2 = this.points[last],\n\t\t\t\tdist = pt1.getDistance(pt2) / 3;\n\t\t\tthis.addCurve([pt1, pt1.add(tan1.normalize(dist)),\n\t\t\t\t\tpt2.add(tan2.normalize(dist)), pt2]);\n\t\t\treturn;\n\t\t}\n\t\tvar uPrime = this.chordLengthParameterize(first, last),\n\t\t\tmaxError = Math.max(this.error, this.error * this.error),\n\t\t\tsplit;\n\t\tfor (var i = 0; i <= 4; i++) {\n\t\t\tvar curve = this.generateBezier(first, last, uPrime, tan1, tan2);\n\t\t\tvar max = this.findMaxError(first, last, curve, uPrime);\n\t\t\tif (max.error < this.error) {\n\t\t\t\tthis.addCurve(curve);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsplit = max.index;\n\t\t\tif (max.error >= maxError)\n\t\t\t\tbreak;\n\t\t\tthis.reparameterize(first, last, uPrime, curve);\n\t\t\tmaxError = max.error;\n\t\t}\n\t\tvar V1 = this.points[split - 1].subtract(this.points[split]),\n\t\t\tV2 = this.points[split].subtract(this.points[split + 1]),\n\t\t\ttanCenter = V1.add(V2).divide(2).normalize();\n\t\tthis.fitCubic(first, split, tan1, tanCenter);\n\t\tthis.fitCubic(split, last, tanCenter.negate(), tan2);\n\t},\n\n\taddCurve: function(curve) {\n\t\tvar prev = this.segments[this.segments.length - 1];\n\t\tprev.setHandleOut(curve[1].subtract(curve[0]));\n\t\tthis.segments.push(\n\t\t\t\tnew Segment(curve[3], curve[2].subtract(curve[3])));\n\t},\n\n\tgenerateBezier: function(first, last, uPrime, tan1, tan2) {\n\t\tvar epsilon = 1e-12,\n\t\t\tpt1 = this.points[first],\n\t\t\tpt2 = this.points[last],\n\t\t\tC = [[0, 0], [0, 0]],\n\t\t\tX = [0, 0];\n\n\t\tfor (var i = 0, l = last - first + 1; i < l; i++) {\n\t\t\tvar u = uPrime[i],\n\t\t\t\tt = 1 - u,\n\t\t\t\tb = 3 * u * t,\n\t\t\t\tb0 = t * t * t,\n\t\t\t\tb1 = b * t,\n\t\t\t\tb2 = b * u,\n\t\t\t\tb3 = u * u * u,\n\t\t\t\ta1 = tan1.normalize(b1),\n\t\t\t\ta2 = tan2.normalize(b2),\n\t\t\t\ttmp = this.points[first + i]\n\t\t\t\t\t.subtract(pt1.multiply(b0 + b1))\n\t\t\t\t\t.subtract(pt2.multiply(b2 + b3));\n\t\t\tC[0][0] += a1.dot(a1);\n\t\t\tC[0][1] += a1.dot(a2);\n\t\t\tC[1][0] = C[0][1];\n\t\t\tC[1][1] += a2.dot(a2);\n\t\t\tX[0] += a1.dot(tmp);\n\t\t\tX[1] += a2.dot(tmp);\n\t\t}\n\n\t\tvar detC0C1 = C[0][0] * C[1][1] - C[1][0] * C[0][1],\n\t\t\talpha1, alpha2;\n\t\tif (Math.abs(detC0C1) > epsilon) {\n\t\t\tvar detC0X\t= C[0][0] * X[1]\t- C[1][0] * X[0],\n\t\t\t\tdetXC1\t= X[0]\t  * C[1][1] - X[1]\t  * C[0][1];\n\t\t\talpha1 = detXC1 / detC0C1;\n\t\t\talpha2 = detC0X / detC0C1;\n\t\t} else {\n\t\t\tvar c0 = C[0][0] + C[0][1],\n\t\t\t\tc1 = C[1][0] + C[1][1];\n\t\t\tif (Math.abs(c0) > epsilon) {\n\t\t\t\talpha1 = alpha2 = X[0] / c0;\n\t\t\t} else if (Math.abs(c1) > epsilon) {\n\t\t\t\talpha1 = alpha2 = X[1] / c1;\n\t\t\t} else {\n\t\t\t\talpha1 = alpha2 = 0;\n\t\t\t}\n\t\t}\n\n\t\tvar segLength = pt2.getDistance(pt1);\n\t\tepsilon *= segLength;\n\t\tif (alpha1 < epsilon || alpha2 < epsilon) {\n\t\t\talpha1 = alpha2 = segLength / 3;\n\t\t}\n\n\t\treturn [pt1, pt1.add(tan1.normalize(alpha1)),\n\t\t\t\tpt2.add(tan2.normalize(alpha2)), pt2];\n\t},\n\n\treparameterize: function(first, last, u, curve) {\n\t\tfor (var i = first; i <= last; i++) {\n\t\t\tu[i - first] = this.findRoot(curve, this.points[i], u[i - first]);\n\t\t}\n\t},\n\n\tfindRoot: function(curve, point, u) {\n\t\tvar curve1 = [],\n\t\t\tcurve2 = [];\n\t\tfor (var i = 0; i <= 2; i++) {\n\t\t\tcurve1[i] = curve[i + 1].subtract(curve[i]).multiply(3);\n\t\t}\n\t\tfor (var i = 0; i <= 1; i++) {\n\t\t\tcurve2[i] = curve1[i + 1].subtract(curve1[i]).multiply(2);\n\t\t}\n\t\tvar pt = this.evaluate(3, curve, u),\n\t\t\tpt1 = this.evaluate(2, curve1, u),\n\t\t\tpt2 = this.evaluate(1, curve2, u),\n\t\t\tdiff = pt.subtract(point),\n\t\t\tdf = pt1.dot(pt1) + diff.dot(pt2);\n\t\tif (Math.abs(df) < 0.000001)\n\t\t\treturn u;\n\t\treturn u - diff.dot(pt1) / df;\n\t},\n\n\tevaluate: function(degree, curve, t) {\n\t\tvar tmp = curve.slice();\n\t\tfor (var i = 1; i <= degree; i++) {\n\t\t\tfor (var j = 0; j <= degree - i; j++) {\n\t\t\t\ttmp[j] = tmp[j].multiply(1 - t).add(tmp[j + 1].multiply(t));\n\t\t\t}\n\t\t}\n\t\treturn tmp[0];\n\t},\n\n\tchordLengthParameterize: function(first, last) {\n\t\tvar u = [0];\n\t\tfor (var i = first + 1; i <= last; i++) {\n\t\t\tu[i - first] = u[i - first - 1]\n\t\t\t\t\t+ this.points[i].getDistance(this.points[i - 1]);\n\t\t}\n\t\tfor (var i = 1, m = last - first; i <= m; i++) {\n\t\t\tu[i] /= u[m];\n\t\t}\n\t\treturn u;\n\t},\n\n\tfindMaxError: function(first, last, curve, u) {\n\t\tvar index = Math.floor((last - first + 1) / 2),\n\t\t\tmaxDist = 0;\n\t\tfor (var i = first + 1; i < last; i++) {\n\t\t\tvar P = this.evaluate(3, curve, u[i - first]);\n\t\t\tvar v = P.subtract(this.points[i]);\n\t\t\tvar dist = v.x * v.x + v.y * v.y;\n\t\t\tif (dist >= maxDist) {\n\t\t\t\tmaxDist = dist;\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\terror: maxDist,\n\t\t\tindex: index\n\t\t};\n\t}\n});\n\nvar TextItem = Item.extend({\n\t_class: 'TextItem',\n\t_boundsSelected: true,\n\t_applyMatrix: false,\n\t_canApplyMatrix: false,\n\t_serializeFields: {\n\t\tcontent: null\n\t},\n\t_boundsGetter: 'getBounds',\n\n\tinitialize: function TextItem(arg) {\n\t\tthis._content = '';\n\t\tthis._lines = [];\n\t\tvar hasProps = arg && Base.isPlainObject(arg)\n\t\t\t\t&& arg.x === undefined && arg.y === undefined;\n\t\tthis._initialize(hasProps && arg, !hasProps && Point.read(arguments));\n\t},\n\n\t_equals: function(item) {\n\t\treturn this._content === item._content;\n\t},\n\n\t_clone: function _clone(copy, insert) {\n\t\tcopy.setContent(this._content);\n\t\treturn _clone.base.call(this, copy, insert);\n\t},\n\n\tgetContent: function() {\n\t\treturn this._content;\n\t},\n\n\tsetContent: function(content) {\n\t\tthis._content = '' + content;\n\t\tthis._lines = this._content.split(/\\r\\n|\\n|\\r/mg);\n\t\tthis._changed(265);\n\t},\n\n\tisEmpty: function() {\n\t\treturn !this._content;\n\t},\n\n\tgetCharacterStyle: '#getStyle',\n\tsetCharacterStyle: '#setStyle',\n\n\tgetParagraphStyle: '#getStyle',\n\tsetParagraphStyle: '#setStyle'\n});\n\nvar PointText = TextItem.extend({\n\t_class: 'PointText',\n\n\tinitialize: function PointText() {\n\t\tTextItem.apply(this, arguments);\n\t},\n\n\tclone: function(insert) {\n\t\treturn this._clone(new PointText(Item.NO_INSERT), insert);\n\t},\n\n\tgetPoint: function() {\n\t\tvar point = this._matrix.getTranslation();\n\t\treturn new LinkedPoint(point.x, point.y, this, 'setPoint');\n\t},\n\n\tsetPoint: function() {\n\t\tvar point = Point.read(arguments);\n\t\tthis.translate(point.subtract(this._matrix.getTranslation()));\n\t},\n\n\t_draw: function(ctx) {\n\t\tif (!this._content)\n\t\t\treturn;\n\t\tthis._setStyles(ctx);\n\t\tvar style = this._style,\n\t\t\tlines = this._lines,\n\t\t\tleading = style.getLeading(),\n\t\t\tshadowColor = ctx.shadowColor;\n\t\tctx.font = style.getFontStyle();\n\t\tctx.textAlign = style.getJustification();\n\t\tfor (var i = 0, l = lines.length; i < l; i++) {\n\t\t\tctx.shadowColor = shadowColor;\n\t\t\tvar line = lines[i];\n\t\t\tif (style.hasFill()) {\n\t\t\t\tctx.fillText(line, 0, 0);\n\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';\n\t\t\t}\n\t\t\tif (style.hasStroke())\n\t\t\t\tctx.strokeText(line, 0, 0);\n\t\t\tctx.translate(0, leading);\n\t\t}\n\t},\n\n\t_getBounds: function(getter, matrix) {\n\t\tvar style = this._style,\n\t\t\tlines = this._lines,\n\t\t\tnumLines = lines.length,\n\t\t\tjustification = style.getJustification(),\n\t\t\tleading = style.getLeading(),\n\t\t\twidth = this.getView().getTextWidth(style.getFontStyle(), lines),\n\t\t\tx = 0;\n\t\tif (justification !== 'left')\n\t\t\tx -= width / (justification === 'center' ? 2: 1);\n\t\tvar bounds = new Rectangle(x,\n\t\t\t\t\tnumLines ? - 0.75 * leading : 0,\n\t\t\t\t\twidth, numLines * leading);\n\t\treturn matrix ? matrix._transformBounds(bounds, bounds) : bounds;\n\t}\n});\n\nvar Color = Base.extend(new function() {\n\tvar types = {\n\t\tgray: ['gray'],\n\t\trgb: ['red', 'green', 'blue'],\n\t\thsb: ['hue', 'saturation', 'brightness'],\n\t\thsl: ['hue', 'saturation', 'lightness'],\n\t\tgradient: ['gradient', 'origin', 'destination', 'highlight']\n\t};\n\n\tvar componentParsers = {},\n\t\tcolorCache = {},\n\t\tcolorCtx;\n\n\tfunction fromCSS(string) {\n\t\tvar match = string.match(/^#(\\w{1,2})(\\w{1,2})(\\w{1,2})$/),\n\t\t\tcomponents;\n\t\tif (match) {\n\t\t\tcomponents = [0, 0, 0];\n\t\t\tfor (var i = 0; i < 3; i++) {\n\t\t\t\tvar value = match[i + 1];\n\t\t\t\tcomponents[i] = parseInt(value.length == 1\n\t\t\t\t\t\t? value + value : value, 16) / 255;\n\t\t\t}\n\t\t} else if (match = string.match(/^rgba?\\((.*)\\)$/)) {\n\t\t\tcomponents = match[1].split(',');\n\t\t\tfor (var i = 0, l = components.length; i < l; i++) {\n\t\t\t\tvar value = +components[i];\n\t\t\t\tcomponents[i] = i < 3 ? value / 255 : value;\n\t\t\t}\n\t\t} else {\n\t\t\tvar cached = colorCache[string];\n\t\t\tif (!cached) {\n\t\t\t\tif (!colorCtx) {\n\t\t\t\t\tcolorCtx = CanvasProvider.getContext(1, 1);\n\t\t\t\t\tcolorCtx.globalCompositeOperation = 'copy';\n\t\t\t\t}\n\t\t\t\tcolorCtx.fillStyle = 'rgba(0,0,0,0)';\n\t\t\t\tcolorCtx.fillStyle = string;\n\t\t\t\tcolorCtx.fillRect(0, 0, 1, 1);\n\t\t\t\tvar data = colorCtx.getImageData(0, 0, 1, 1).data;\n\t\t\t\tcached = colorCache[string] = [\n\t\t\t\t\tdata[0] / 255,\n\t\t\t\t\tdata[1] / 255,\n\t\t\t\t\tdata[2] / 255\n\t\t\t\t];\n\t\t\t}\n\t\t\tcomponents = cached.slice();\n\t\t}\n\t\treturn components;\n\t}\n\n\tvar hsbIndices = [\n\t\t[0, 3, 1],\n\t\t[2, 0, 1],\n\t\t[1, 0, 3],\n\t\t[1, 2, 0],\n\t\t[3, 1, 0],\n\t\t[0, 1, 2]\n\t];\n\n\tvar converters = {\n\t\t'rgb-hsb': function(r, g, b) {\n\t\t\tvar max = Math.max(r, g, b),\n\t\t\t\tmin = Math.min(r, g, b),\n\t\t\t\tdelta = max - min,\n\t\t\t\th = delta === 0 ? 0\n\t\t\t\t\t:\t( max == r ? (g - b) / delta + (g < b ? 6 : 0)\n\t\t\t\t\t\t: max == g ? (b - r) / delta + 2\n\t\t\t\t\t\t:\t\t\t (r - g) / delta + 4) * 60;\n\t\t\treturn [h, max === 0 ? 0 : delta / max, max];\n\t\t},\n\n\t\t'hsb-rgb': function(h, s, b) {\n\t\t\th = (((h / 60) % 6) + 6) % 6;\n\t\t\tvar i = Math.floor(h),\n\t\t\t\tf = h - i,\n\t\t\t\ti = hsbIndices[i],\n\t\t\t\tv = [\n\t\t\t\t\tb,\n\t\t\t\t\tb * (1 - s),\n\t\t\t\t\tb * (1 - s * f),\n\t\t\t\t\tb * (1 - s * (1 - f))\n\t\t\t\t];\n\t\t\treturn [v[i[0]], v[i[1]], v[i[2]]];\n\t\t},\n\n\t\t'rgb-hsl': function(r, g, b) {\n\t\t\tvar max = Math.max(r, g, b),\n\t\t\t\tmin = Math.min(r, g, b),\n\t\t\t\tdelta = max - min,\n\t\t\t\tachromatic = delta === 0,\n\t\t\t\th = achromatic ? 0\n\t\t\t\t\t:\t( max == r ? (g - b) / delta + (g < b ? 6 : 0)\n\t\t\t\t\t\t: max == g ? (b - r) / delta + 2\n\t\t\t\t\t\t:\t\t\t (r - g) / delta + 4) * 60,\n\t\t\t\tl = (max + min) / 2,\n\t\t\t\ts = achromatic ? 0 : l < 0.5\n\t\t\t\t\t\t? delta / (max + min)\n\t\t\t\t\t\t: delta / (2 - max - min);\n\t\t\treturn [h, s, l];\n\t\t},\n\n\t\t'hsl-rgb': function(h, s, l) {\n\t\t\th = (((h / 360) % 1) + 1) % 1;\n\t\t\tif (s === 0)\n\t\t\t\treturn [l, l, l];\n\t\t\tvar t3s = [ h + 1 / 3, h, h - 1 / 3 ],\n\t\t\t\tt2 = l < 0.5 ? l * (1 + s) : l + s - l * s,\n\t\t\t\tt1 = 2 * l - t2,\n\t\t\t\tc = [];\n\t\t\tfor (var i = 0; i < 3; i++) {\n\t\t\t\tvar t3 = t3s[i];\n\t\t\t\tif (t3 < 0) t3 += 1;\n\t\t\t\tif (t3 > 1) t3 -= 1;\n\t\t\t\tc[i] = 6 * t3 < 1\n\t\t\t\t\t? t1 + (t2 - t1) * 6 * t3\n\t\t\t\t\t: 2 * t3 < 1\n\t\t\t\t\t\t? t2\n\t\t\t\t\t\t: 3 * t3 < 2\n\t\t\t\t\t\t\t? t1 + (t2 - t1) * ((2 / 3) - t3) * 6\n\t\t\t\t\t\t\t: t1;\n\t\t\t}\n\t\t\treturn c;\n\t\t},\n\n\t\t'rgb-gray': function(r, g, b) {\n\t\t\treturn [r * 0.2989 + g * 0.587 + b * 0.114];\n\t\t},\n\n\t\t'gray-rgb': function(g) {\n\t\t\treturn [g, g, g];\n\t\t},\n\n\t\t'gray-hsb': function(g) {\n\t\t\treturn [0, 0, g];\n\t\t},\n\n\t\t'gray-hsl': function(g) {\n\t\t\treturn [0, 0, g];\n\t\t},\n\n\t\t'gradient-rgb': function() {\n\t\t\treturn [];\n\t\t},\n\n\t\t'rgb-gradient': function() {\n\t\t\treturn [];\n\t\t}\n\n\t};\n\n\treturn Base.each(types, function(properties, type) {\n\t\tcomponentParsers[type] = [];\n\t\tBase.each(properties, function(name, index) {\n\t\t\tvar part = Base.capitalize(name),\n\t\t\t\thasOverlap = /^(hue|saturation)$/.test(name),\n\t\t\t\tparser = componentParsers[type][index] = name === 'gradient'\n\t\t\t\t\t? function(value) {\n\t\t\t\t\t\tvar current = this._components[0];\n\t\t\t\t\t\tvalue = Gradient.read(Array.isArray(value) ? value\n\t\t\t\t\t\t\t\t: arguments, 0, { readNull: true });\n\t\t\t\t\t\tif (current !== value) {\n\t\t\t\t\t\t\tif (current)\n\t\t\t\t\t\t\t\tcurrent._removeOwner(this);\n\t\t\t\t\t\t\tif (value)\n\t\t\t\t\t\t\t\tvalue._addOwner(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t\t: type === 'gradient'\n\t\t\t\t\t\t? function() {\n\t\t\t\t\t\t\treturn Point.read(arguments, 0, {\n\t\t\t\t\t\t\t\t\treadNull: name === 'highlight',\n\t\t\t\t\t\t\t\t\tclone: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t: function(value) {\n\t\t\t\t\t\t\treturn value == null || isNaN(value) ? 0 : value;\n\t\t\t\t\t\t};\n\n\t\t\tthis['get' + part] = function() {\n\t\t\t\treturn this._type === type\n\t\t\t\t\t|| hasOverlap && /^hs[bl]$/.test(this._type)\n\t\t\t\t\t\t? this._components[index]\n\t\t\t\t\t\t: this._convert(type)[index];\n\t\t\t};\n\n\t\t\tthis['set' + part] = function(value) {\n\t\t\t\tif (this._type !== type\n\t\t\t\t\t\t&& !(hasOverlap && /^hs[bl]$/.test(this._type))) {\n\t\t\t\t\tthis._components = this._convert(type);\n\t\t\t\t\tthis._properties = types[type];\n\t\t\t\t\tthis._type = type;\n\t\t\t\t}\n\t\t\t\tvalue = parser.call(this, value);\n\t\t\t\tif (value != null) {\n\t\t\t\t\tthis._components[index] = value;\n\t\t\t\t\tthis._changed();\n\t\t\t\t}\n\t\t\t};\n\t\t}, this);\n\t}, {\n\t\t_class: 'Color',\n\t\t_readIndex: true,\n\n\t\tinitialize: function Color(arg) {\n\t\t\tvar slice = Array.prototype.slice,\n\t\t\t\targs = arguments,\n\t\t\t\tread = 0,\n\t\t\t\ttype,\n\t\t\t\tcomponents,\n\t\t\t\talpha,\n\t\t\t\tvalues;\n\t\t\tif (Array.isArray(arg)) {\n\t\t\t\targs = arg;\n\t\t\t\targ = args[0];\n\t\t\t}\n\t\t\tvar argType = arg != null && typeof arg;\n\t\t\tif (argType === 'string' && arg in types) {\n\t\t\t\ttype = arg;\n\t\t\t\targ = args[1];\n\t\t\t\tif (Array.isArray(arg)) {\n\t\t\t\t\tcomponents = arg;\n\t\t\t\t\talpha = args[2];\n\t\t\t\t} else {\n\t\t\t\t\tif (this.__read)\n\t\t\t\t\t\tread = 1;\n\t\t\t\t\targs = slice.call(args, 1);\n\t\t\t\t\targType = typeof arg;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!components) {\n\t\t\t\tvalues = argType === 'number'\n\t\t\t\t\t\t? args\n\t\t\t\t\t\t: argType === 'object' && arg.length != null\n\t\t\t\t\t\t\t? arg\n\t\t\t\t\t\t\t: null;\n\t\t\t\tif (values) {\n\t\t\t\t\tif (!type)\n\t\t\t\t\t\ttype = values.length >= 3\n\t\t\t\t\t\t\t\t? 'rgb'\n\t\t\t\t\t\t\t\t: 'gray';\n\t\t\t\t\tvar length = types[type].length;\n\t\t\t\t\talpha = values[length];\n\t\t\t\t\tif (this.__read)\n\t\t\t\t\t\tread += values === arguments\n\t\t\t\t\t\t\t? length + (alpha != null ? 1 : 0)\n\t\t\t\t\t\t\t: 1;\n\t\t\t\t\tif (values.length > length)\n\t\t\t\t\t\tvalues = slice.call(values, 0, length);\n\t\t\t\t} else if (argType === 'string') {\n\t\t\t\t\ttype = 'rgb';\n\t\t\t\t\tcomponents = fromCSS(arg);\n\t\t\t\t\tif (components.length === 4) {\n\t\t\t\t\t\talpha = components[3];\n\t\t\t\t\t\tcomponents.length--;\n\t\t\t\t\t}\n\t\t\t\t} else if (argType === 'object') {\n\t\t\t\t\tif (arg.constructor === Color) {\n\t\t\t\t\t\ttype = arg._type;\n\t\t\t\t\t\tcomponents = arg._components.slice();\n\t\t\t\t\t\talpha = arg._alpha;\n\t\t\t\t\t\tif (type === 'gradient') {\n\t\t\t\t\t\t\tfor (var i = 1, l = components.length; i < l; i++) {\n\t\t\t\t\t\t\t\tvar point = components[i];\n\t\t\t\t\t\t\t\tif (point)\n\t\t\t\t\t\t\t\t\tcomponents[i] = point.clone();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (arg.constructor === Gradient) {\n\t\t\t\t\t\ttype = 'gradient';\n\t\t\t\t\t\tvalues = args;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttype = 'hue' in arg\n\t\t\t\t\t\t\t? 'lightness' in arg\n\t\t\t\t\t\t\t\t? 'hsl'\n\t\t\t\t\t\t\t\t: 'hsb'\n\t\t\t\t\t\t\t: 'gradient' in arg || 'stops' in arg\n\t\t\t\t\t\t\t\t\t|| 'radial' in arg\n\t\t\t\t\t\t\t\t? 'gradient'\n\t\t\t\t\t\t\t\t: 'gray' in arg\n\t\t\t\t\t\t\t\t\t? 'gray'\n\t\t\t\t\t\t\t\t\t: 'rgb';\n\t\t\t\t\t\tvar properties = types[type];\n\t\t\t\t\t\t\tparsers = componentParsers[type];\n\t\t\t\t\t\tthis._components = components = [];\n\t\t\t\t\t\tfor (var i = 0, l = properties.length; i < l; i++) {\n\t\t\t\t\t\t\tvar value = arg[properties[i]];\n\t\t\t\t\t\t\tif (value == null && i === 0 && type === 'gradient'\n\t\t\t\t\t\t\t\t\t&& 'stops' in arg) {\n\t\t\t\t\t\t\t\tvalue = {\n\t\t\t\t\t\t\t\t\tstops: arg.stops,\n\t\t\t\t\t\t\t\t\tradial: arg.radial\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvalue = parsers[i].call(this, value);\n\t\t\t\t\t\t\tif (value != null)\n\t\t\t\t\t\t\t\tcomponents[i] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\talpha = arg.alpha;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.__read && type)\n\t\t\t\t\tread = 1;\n\t\t\t}\n\t\t\tthis._type = type || 'rgb';\n\t\t\tif (type === 'gradient')\n\t\t\t\tthis._id = Color._id = (Color._id || 0) + 1;\n\t\t\tif (!components) {\n\t\t\t\tthis._components = components = [];\n\t\t\t\tvar parsers = componentParsers[this._type];\n\t\t\t\tfor (var i = 0, l = parsers.length; i < l; i++) {\n\t\t\t\t\tvar value = parsers[i].call(this, values && values[i]);\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t\tcomponents[i] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._components = components;\n\t\t\tthis._properties = types[this._type];\n\t\t\tthis._alpha = alpha;\n\t\t\tif (this.__read)\n\t\t\t\tthis.__read = read;\n\t\t},\n\n\t\t_serialize: function(options, dictionary) {\n\t\t\tvar components = this.getComponents();\n\t\t\treturn Base.serialize(\n\t\t\t\t\t/^(gray|rgb)$/.test(this._type)\n\t\t\t\t\t\t? components\n\t\t\t\t\t\t: [this._type].concat(components),\n\t\t\t\t\toptions, true, dictionary);\n\t\t},\n\n\t\t_changed: function() {\n\t\t\tthis._canvasStyle = null;\n\t\t\tif (this._owner)\n\t\t\t\tthis._owner._changed(65);\n\t\t},\n\n\t\t_convert: function(type) {\n\t\t\tvar converter;\n\t\t\treturn this._type === type\n\t\t\t\t\t? this._components.slice()\n\t\t\t\t\t: (converter = converters[this._type + '-' + type])\n\t\t\t\t\t\t? converter.apply(this, this._components)\n\t\t\t\t\t\t: converters['rgb-' + type].apply(this,\n\t\t\t\t\t\t\tconverters[this._type + '-rgb'].apply(this,\n\t\t\t\t\t\t\t\tthis._components));\n\t\t},\n\n\t\tconvert: function(type) {\n\t\t\treturn new Color(type, this._convert(type), this._alpha);\n\t\t},\n\n\t\tgetType: function() {\n\t\t\treturn this._type;\n\t\t},\n\n\t\tsetType: function(type) {\n\t\t\tthis._components = this._convert(type);\n\t\t\tthis._properties = types[type];\n\t\t\tthis._type = type;\n\t\t},\n\n\t\tgetComponents: function() {\n\t\t\tvar components = this._components.slice();\n\t\t\tif (this._alpha != null)\n\t\t\t\tcomponents.push(this._alpha);\n\t\t\treturn components;\n\t\t},\n\n\t\tgetAlpha: function() {\n\t\t\treturn this._alpha != null ? this._alpha : 1;\n\t\t},\n\n\t\tsetAlpha: function(alpha) {\n\t\t\tthis._alpha = alpha == null ? null : Math.min(Math.max(alpha, 0), 1);\n\t\t\tthis._changed();\n\t\t},\n\n\t\thasAlpha: function() {\n\t\t\treturn this._alpha != null;\n\t\t},\n\n\t\tequals: function(color) {\n\t\t\tvar col = Base.isPlainValue(color, true)\n\t\t\t\t\t? Color.read(arguments)\n\t\t\t\t\t: color;\n\t\t\treturn col === this || col && this._class === col._class\n\t\t\t\t\t&& this._type === col._type\n\t\t\t\t\t&& this._alpha === col._alpha\n\t\t\t\t\t&& Base.equals(this._components, col._components)\n\t\t\t\t\t|| false;\n\t\t},\n\n\t\ttoString: function() {\n\t\t\tvar properties = this._properties,\n\t\t\t\tparts = [],\n\t\t\t\tisGradient = this._type === 'gradient',\n\t\t\t\tf = Formatter.instance;\n\t\t\tfor (var i = 0, l = properties.length; i < l; i++) {\n\t\t\t\tvar value = this._components[i];\n\t\t\t\tif (value != null)\n\t\t\t\t\tparts.push(properties[i] + ': '\n\t\t\t\t\t\t\t+ (isGradient ? value : f.number(value)));\n\t\t\t}\n\t\t\tif (this._alpha != null)\n\t\t\t\tparts.push('alpha: ' + f.number(this._alpha));\n\t\t\treturn '{ ' + parts.join(', ') + ' }';\n\t\t},\n\n\t\ttoCSS: function(hex) {\n\t\t\tvar components = this._convert('rgb'),\n\t\t\t\talpha = hex || this._alpha == null ? 1 : this._alpha;\n\t\t\tfunction convert(val) {\n\t\t\t\treturn Math.round((val < 0 ? 0 : val > 1 ? 1 : val) * 255);\n\t\t\t}\n\t\t\tcomponents = [\n\t\t\t\tconvert(components[0]),\n\t\t\t\tconvert(components[1]),\n\t\t\t\tconvert(components[2])\n\t\t\t];\n\t\t\tif (alpha < 1)\n\t\t\t\tcomponents.push(alpha < 0 ? 0 : alpha);\n\t\t\treturn hex\n\t\t\t\t\t? '#' + ((1 << 24) + (components[0] << 16)\n\t\t\t\t\t\t+ (components[1] << 8)\n\t\t\t\t\t\t+ components[2]).toString(16).slice(1)\n\t\t\t\t\t: (components.length == 4 ? 'rgba(' : 'rgb(')\n\t\t\t\t\t\t+ components.join(',') + ')';\n\t\t},\n\n\t\ttoCanvasStyle: function(ctx) {\n\t\t\tif (this._canvasStyle)\n\t\t\t\treturn this._canvasStyle;\n\t\t\tif (this._type !== 'gradient')\n\t\t\t\treturn this._canvasStyle = this.toCSS();\n\t\t\tvar components = this._components,\n\t\t\t\tgradient = components[0],\n\t\t\t\tstops = gradient._stops,\n\t\t\t\torigin = components[1],\n\t\t\t\tdestination = components[2],\n\t\t\t\tcanvasGradient;\n\t\t\tif (gradient._radial) {\n\t\t\t\tvar radius = destination.getDistance(origin),\n\t\t\t\t\thighlight = components[3];\n\t\t\t\tif (highlight) {\n\t\t\t\t\tvar vector = highlight.subtract(origin);\n\t\t\t\t\tif (vector.getLength() > radius)\n\t\t\t\t\t\thighlight = origin.add(vector.normalize(radius - 0.1));\n\t\t\t\t}\n\t\t\t\tvar start = highlight || origin;\n\t\t\t\tcanvasGradient = ctx.createRadialGradient(start.x, start.y,\n\t\t\t\t\t\t0, origin.x, origin.y, radius);\n\t\t\t} else {\n\t\t\t\tcanvasGradient = ctx.createLinearGradient(origin.x, origin.y,\n\t\t\t\t\t\tdestination.x, destination.y);\n\t\t\t}\n\t\t\tfor (var i = 0, l = stops.length; i < l; i++) {\n\t\t\t\tvar stop = stops[i];\n\t\t\t\tcanvasGradient.addColorStop(stop._rampPoint,\n\t\t\t\t\t\tstop._color.toCanvasStyle());\n\t\t\t}\n\t\t\treturn this._canvasStyle = canvasGradient;\n\t\t},\n\n\t\ttransform: function(matrix) {\n\t\t\tif (this._type === 'gradient') {\n\t\t\t\tvar components = this._components;\n\t\t\t\tfor (var i = 1, l = components.length; i < l; i++) {\n\t\t\t\t\tvar point = components[i];\n\t\t\t\t\tmatrix._transformPoint(point, point, true);\n\t\t\t\t}\n\t\t\t\tthis._changed();\n\t\t\t}\n\t\t},\n\n\t\tstatics: {\n\t\t\t_types: types,\n\n\t\t\trandom: function() {\n\t\t\t\tvar random = Math.random;\n\t\t\t\treturn new Color(random(), random(), random());\n\t\t\t}\n\t\t}\n\t});\n}, new function() {\n\tvar operators = {\n\t\tadd: function(a, b) {\n\t\t\treturn a + b;\n\t\t},\n\n\t\tsubtract: function(a, b) {\n\t\t\treturn a - b;\n\t\t},\n\n\t\tmultiply: function(a, b) {\n\t\t\treturn a * b;\n\t\t},\n\n\t\tdivide: function(a, b) {\n\t\t\treturn a / b;\n\t\t}\n\t};\n\n\treturn Base.each(operators, function(operator, name) {\n\t\tthis[name] = function(color) {\n\t\t\tcolor = Color.read(arguments);\n\t\t\tvar type = this._type,\n\t\t\t\tcomponents1 = this._components,\n\t\t\t\tcomponents2 = color._convert(type);\n\t\t\tfor (var i = 0, l = components1.length; i < l; i++)\n\t\t\t\tcomponents2[i] = operator(components1[i], components2[i]);\n\t\t\treturn new Color(type, components2,\n\t\t\t\t\tthis._alpha != null\n\t\t\t\t\t\t\t? operator(this._alpha, color.getAlpha())\n\t\t\t\t\t\t\t: null);\n\t\t};\n\t}, {\n\t});\n});\n\nBase.each(Color._types, function(properties, type) {\n\tvar ctor = this[Base.capitalize(type) + 'Color'] = function(arg) {\n\t\t\tvar argType = arg != null && typeof arg,\n\t\t\t\tcomponents = argType === 'object' && arg.length != null\n\t\t\t\t\t? arg\n\t\t\t\t\t: argType === 'string'\n\t\t\t\t\t\t? null\n\t\t\t\t\t\t: arguments;\n\t\t\treturn components\n\t\t\t\t\t? new Color(type, components)\n\t\t\t\t\t: new Color(arg);\n\t\t};\n\tif (type.length == 3) {\n\t\tvar acronym = type.toUpperCase();\n\t\tColor[acronym] = this[acronym + 'Color'] = ctor;\n\t}\n}, Base.exports);\n\nvar Gradient = Base.extend({\n\t_class: 'Gradient',\n\n\tinitialize: function Gradient(stops, radial) {\n\t\tthis._id = Gradient._id = (Gradient._id || 0) + 1;\n\t\tif (stops && this._set(stops))\n\t\t\tstops = radial = null;\n\t\tif (!this._stops)\n\t\t\tthis.setStops(stops || ['white', 'black']);\n\t\tif (this._radial == null)\n\t\t\tthis.setRadial(typeof radial === 'string' && radial === 'radial'\n\t\t\t\t\t|| radial || false);\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn dictionary.add(this, function() {\n\t\t\treturn Base.serialize([this._stops, this._radial],\n\t\t\t\t\toptions, true, dictionary);\n\t\t});\n\t},\n\n\t_changed: function() {\n\t\tfor (var i = 0, l = this._owners && this._owners.length; i < l; i++)\n\t\t\tthis._owners[i]._changed();\n\t},\n\n\t_addOwner: function(color) {\n\t\tif (!this._owners)\n\t\t\tthis._owners = [];\n\t\tthis._owners.push(color);\n\t},\n\n\t_removeOwner: function(color) {\n\t\tvar index = this._owners ? this._owners.indexOf(color) : -1;\n\t\tif (index != -1) {\n\t\t\tthis._owners.splice(index, 1);\n\t\t\tif (this._owners.length === 0)\n\t\t\t\tthis._owners = undefined;\n\t\t}\n\t},\n\n\tclone: function() {\n\t\tvar stops = [];\n\t\tfor (var i = 0, l = this._stops.length; i < l; i++)\n\t\t\tstops[i] = this._stops[i].clone();\n\t\treturn new Gradient(stops);\n\t},\n\n\tgetStops: function() {\n\t\treturn this._stops;\n\t},\n\n\tsetStops: function(stops) {\n\t\tif (this.stops) {\n\t\t\tfor (var i = 0, l = this._stops.length; i < l; i++)\n\t\t\t\tthis._stops[i]._owner = undefined;\n\t\t}\n\t\tif (stops.length < 2)\n\t\t\tthrow new Error(\n\t\t\t\t\t'Gradient stop list needs to contain at least two stops.');\n\t\tthis._stops = GradientStop.readAll(stops, 0, { clone: true });\n\t\tfor (var i = 0, l = this._stops.length; i < l; i++) {\n\t\t\tvar stop = this._stops[i];\n\t\t\tstop._owner = this;\n\t\t\tif (stop._defaultRamp)\n\t\t\t\tstop.setRampPoint(i / (l - 1));\n\t\t}\n\t\tthis._changed();\n\t},\n\n\tgetRadial: function() {\n\t\treturn this._radial;\n\t},\n\n\tsetRadial: function(radial) {\n\t\tthis._radial = radial;\n\t\tthis._changed();\n\t},\n\n\tequals: function(gradient) {\n\t\tif (gradient === this)\n\t\t\treturn true;\n\t\tif (gradient && this._class === gradient._class\n\t\t\t\t&& this._stops.length === gradient._stops.length) {\n\t\t\tfor (var i = 0, l = this._stops.length; i < l; i++) {\n\t\t\t\tif (!this._stops[i].equals(gradient._stops[i]))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n});\n\nvar GradientStop = Base.extend({\n\t_class: 'GradientStop',\n\n\tinitialize: function GradientStop(arg0, arg1) {\n\t\tif (arg0) {\n\t\t\tvar color, rampPoint;\n\t\t\tif (arg1 === undefined && Array.isArray(arg0)) {\n\t\t\t\tcolor = arg0[0];\n\t\t\t\trampPoint = arg0[1];\n\t\t\t} else if (arg0.color) {\n\t\t\t\tcolor = arg0.color;\n\t\t\t\trampPoint = arg0.rampPoint;\n\t\t\t} else {\n\t\t\t\tcolor = arg0;\n\t\t\t\trampPoint = arg1;\n\t\t\t}\n\t\t\tthis.setColor(color);\n\t\t\tthis.setRampPoint(rampPoint);\n\t\t}\n\t},\n\n\tclone: function() {\n\t\treturn new GradientStop(this._color.clone(), this._rampPoint);\n\t},\n\n\t_serialize: function(options, dictionary) {\n\t\treturn Base.serialize([this._color, this._rampPoint], options, true,\n\t\t\t\tdictionary);\n\t},\n\n\t_changed: function() {\n\t\tif (this._owner)\n\t\t\tthis._owner._changed(65);\n\t},\n\n\tgetRampPoint: function() {\n\t\treturn this._rampPoint;\n\t},\n\n\tsetRampPoint: function(rampPoint) {\n\t\tthis._defaultRamp = rampPoint == null;\n\t\tthis._rampPoint = rampPoint || 0;\n\t\tthis._changed();\n\t},\n\n\tgetColor: function() {\n\t\treturn this._color;\n\t},\n\n\tsetColor: function(color) {\n\t\tthis._color = Color.read(arguments);\n\t\tif (this._color === color)\n\t\t\tthis._color = color.clone();\n\t\tthis._color._owner = this;\n\t\tthis._changed();\n\t},\n\n\tequals: function(stop) {\n\t\treturn stop === this || stop && this._class === stop._class\n\t\t\t\t&& this._color.equals(stop._color)\n\t\t\t\t&& this._rampPoint == stop._rampPoint\n\t\t\t\t|| false;\n\t}\n});\n\nvar Style = Base.extend(new function() {\n\tvar defaults = {\n\t\tfillColor: undefined,\n\t\tstrokeColor: undefined,\n\t\tstrokeWidth: 1,\n\t\tstrokeCap: 'butt',\n\t\tstrokeJoin: 'miter',\n\t\tstrokeScaling: true,\n\t\tmiterLimit: 10,\n\t\tdashOffset: 0,\n\t\tdashArray: [],\n\t\twindingRule: 'nonzero',\n\t\tshadowColor: undefined,\n\t\tshadowBlur: 0,\n\t\tshadowOffset: new Point(),\n\t\tselectedColor: undefined,\n\t\tfontFamily: 'sans-serif',\n\t\tfontWeight: 'normal',\n\t\tfontSize: 12,\n\t\tfont: 'sans-serif',\n\t\tleading: null,\n\t\tjustification: 'left'\n\t};\n\n\tvar flags = {\n\t\tstrokeWidth: 97,\n\t\tstrokeCap: 97,\n\t\tstrokeJoin: 97,\n\t\tstrokeScaling: 105,\n\t\tmiterLimit: 97,\n\t\tfontFamily: 9,\n\t\tfontWeight: 9,\n\t\tfontSize: 9,\n\t\tfont: 9,\n\t\tleading: 9,\n\t\tjustification: 9\n\t};\n\n\tvar item = { beans: true },\n\t\tfields = {\n\t\t\t_defaults: defaults,\n\t\t\t_textDefaults: new Base(defaults, {\n\t\t\t\tfillColor: new Color()\n\t\t\t}),\n\t\t\tbeans: true\n\t\t};\n\n\tBase.each(defaults, function(value, key) {\n\t\tvar isColor = /Color$/.test(key),\n\t\t\tisPoint = key === 'shadowOffset',\n\t\t\tpart = Base.capitalize(key),\n\t\t\tflag = flags[key],\n\t\t\tset = 'set' + part,\n\t\t\tget = 'get' + part;\n\n\t\tfields[set] = function(value) {\n\t\t\tvar owner = this._owner,\n\t\t\t\tchildren = owner && owner._children;\n\t\t\tif (children && children.length > 0\n\t\t\t\t\t&& !(owner instanceof CompoundPath)) {\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++)\n\t\t\t\t\tchildren[i]._style[set](value);\n\t\t\t} else {\n\t\t\t\tvar old = this._values[key];\n\t\t\t\tif (old !== value) {\n\t\t\t\t\tif (isColor) {\n\t\t\t\t\t\tif (old)\n\t\t\t\t\t\t\told._owner = undefined;\n\t\t\t\t\t\tif (value && value.constructor === Color) {\n\t\t\t\t\t\t\tif (value._owner)\n\t\t\t\t\t\t\t\tvalue = value.clone();\n\t\t\t\t\t\t\tvalue._owner = owner;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._values[key] = value;\n\t\t\t\t\tif (owner)\n\t\t\t\t\t\towner._changed(flag || 65);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfields[get] = function(_dontMerge) {\n\t\t\tvar owner = this._owner,\n\t\t\t\tchildren = owner && owner._children,\n\t\t\t\tvalue;\n\t\t\tif (!children || children.length === 0 || _dontMerge\n\t\t\t\t\t|| owner instanceof CompoundPath) {\n\t\t\t\tvar value = this._values[key];\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\tvalue = this._defaults[key];\n\t\t\t\t\tif (value && value.clone)\n\t\t\t\t\t\tvalue = value.clone();\n\t\t\t\t} else {\n\t\t\t\t\tvar ctor = isColor ? Color : isPoint ? Point : null;\n\t\t\t\t\tif (ctor && !(value && value.constructor === ctor)) {\n\t\t\t\t\t\tthis._values[key] = value = ctor.read([value], 0,\n\t\t\t\t\t\t\t\t{ readNull: true, clone: true });\n\t\t\t\t\t\tif (value && isColor)\n\t\t\t\t\t\t\tvalue._owner = owner;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tvar childValue = children[i]._style[get]();\n\t\t\t\tif (i === 0) {\n\t\t\t\t\tvalue = childValue;\n\t\t\t\t} else if (!Base.equals(value, childValue)) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn value;\n\t\t};\n\n\t\titem[get] = function(_dontMerge) {\n\t\t\treturn this._style[get](_dontMerge);\n\t\t};\n\n\t\titem[set] = function(value) {\n\t\t\tthis._style[set](value);\n\t\t};\n\t});\n\n\tItem.inject(item);\n\treturn fields;\n}, {\n\t_class: 'Style',\n\n\tinitialize: function Style(style, _owner, _project) {\n\t\tthis._values = {};\n\t\tthis._owner = _owner;\n\t\tthis._project = _owner && _owner._project || _project || paper.project;\n\t\tif (_owner instanceof TextItem)\n\t\t\tthis._defaults = this._textDefaults;\n\t\tif (style)\n\t\t\tthis.set(style);\n\t},\n\n\tset: function(style) {\n\t\tvar isStyle = style instanceof Style,\n\t\t\tvalues = isStyle ? style._values : style;\n\t\tif (values) {\n\t\t\tfor (var key in values) {\n\t\t\t\tif (key in this._defaults) {\n\t\t\t\t\tvar value = values[key];\n\t\t\t\t\tthis[key] = value && isStyle && value.clone\n\t\t\t\t\t\t\t? value.clone() : value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tequals: function(style) {\n\t\treturn style === this || style && this._class === style._class\n\t\t\t\t&& Base.equals(this._values, style._values)\n\t\t\t\t|| false;\n\t},\n\n\thasFill: function() {\n\t\treturn !!this.getFillColor();\n\t},\n\n\thasStroke: function() {\n\t\treturn !!this.getStrokeColor() && this.getStrokeWidth() > 0;\n\t},\n\n\thasShadow: function() {\n\t\treturn !!this.getShadowColor() && this.getShadowBlur() > 0;\n\t},\n\n\tgetView: function() {\n\t\treturn this._project.getView();\n\t},\n\n\tgetFontStyle: function() {\n\t\tvar fontSize = this.getFontSize();\n\t\treturn this.getFontWeight()\n\t\t\t\t+ ' ' + fontSize + (/[a-z]/i.test(fontSize + '') ? ' ' : 'px ')\n\t\t\t\t+ this.getFontFamily();\n\t},\n\n\tgetFont: '#getFontFamily',\n\tsetFont: '#setFontFamily',\n\n\tgetLeading: function getLeading() {\n\t\tvar leading = getLeading.base.call(this),\n\t\t\tfontSize = this.getFontSize();\n\t\tif (/pt|em|%|px/.test(fontSize))\n\t\t\tfontSize = this.getView().getPixelSize(fontSize);\n\t\treturn leading != null ? leading : fontSize * 1.2;\n\t}\n\n});\n\nvar DomElement = new function() {\n\tfunction handlePrefix(el, name, set, value) {\n\t\tvar prefixes = ['', 'webkit', 'moz', 'Moz', 'ms', 'o'],\n\t\t\tsuffix = name[0].toUpperCase() + name.substring(1);\n\t\tfor (var i = 0; i < 6; i++) {\n\t\t\tvar prefix = prefixes[i],\n\t\t\t\tkey = prefix ? prefix + suffix : name;\n\t\t\tif (key in el) {\n\t\t\t\tif (set) {\n\t\t\t\t\tel[key] = value;\n\t\t\t\t} else {\n\t\t\t\t\treturn el[key];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tgetStyles: function(el) {\n\t\t\tvar doc = el && el.nodeType !== 9 ? el.ownerDocument : el,\n\t\t\t\tview = doc && doc.defaultView;\n\t\t\treturn view && view.getComputedStyle(el, '');\n\t\t},\n\n\t\tgetBounds: function(el, viewport) {\n\t\t\tvar doc = el.ownerDocument,\n\t\t\t\tbody = doc.body,\n\t\t\t\thtml = doc.documentElement,\n\t\t\t\trect;\n\t\t\ttry {\n\t\t\t\trect = el.getBoundingClientRect();\n\t\t\t} catch (e) {\n\t\t\t\trect = { left: 0, top: 0, width: 0, height: 0 };\n\t\t\t}\n\t\t\tvar x = rect.left - (html.clientLeft || body.clientLeft || 0),\n\t\t\t\ty = rect.top - (html.clientTop || body.clientTop || 0);\n\t\t\tif (!viewport) {\n\t\t\t\tvar view = doc.defaultView;\n\t\t\t\tx += view.pageXOffset || html.scrollLeft || body.scrollLeft;\n\t\t\t\ty += view.pageYOffset || html.scrollTop || body.scrollTop;\n\t\t\t}\n\t\t\treturn new Rectangle(x, y, rect.width, rect.height);\n\t\t},\n\n\t\tgetViewportBounds: function(el) {\n\t\t\tvar doc = el.ownerDocument,\n\t\t\t\tview = doc.defaultView,\n\t\t\t\thtml = doc.documentElement;\n\t\t\treturn new Rectangle(0, 0,\n\t\t\t\tview.innerWidth || html.clientWidth,\n\t\t\t\tview.innerHeight || html.clientHeight\n\t\t\t);\n\t\t},\n\n\t\tgetOffset: function(el, viewport) {\n\t\t\treturn DomElement.getBounds(el, viewport).getPoint();\n\t\t},\n\n\t\tgetSize: function(el) {\n\t\t\treturn DomElement.getBounds(el, true).getSize();\n\t\t},\n\n\t\tisInvisible: function(el) {\n\t\t\treturn DomElement.getSize(el).equals(new Size(0, 0));\n\t\t},\n\n\t\tisInView: function(el) {\n\t\t\treturn !DomElement.isInvisible(el)\n\t\t\t\t\t&& DomElement.getViewportBounds(el).intersects(\n\t\t\t\t\t\tDomElement.getBounds(el, true));\n\t\t},\n\n\t\tgetPrefixed: function(el, name) {\n\t\t\treturn handlePrefix(el, name);\n\t\t},\n\n\t\tsetPrefixed: function(el, name, value) {\n\t\t\tif (typeof name === 'object') {\n\t\t\t\tfor (var key in name)\n\t\t\t\t\thandlePrefix(el, key, true, name[key]);\n\t\t\t} else {\n\t\t\t\thandlePrefix(el, name, true, value);\n\t\t\t}\n\t\t}\n\t};\n};\n\nvar DomEvent = {\n\tadd: function(el, events) {\n\t\tfor (var type in events) {\n\t\t\tvar func = events[type],\n\t\t\t\tparts = type.split(/[\\s,]+/g);\n\t\t\tfor (var i = 0, l = parts.length; i < l; i++)\n\t\t\t\tel.addEventListener(parts[i], func, false);\n\t\t}\n\t},\n\n\tremove: function(el, events) {\n\t\tfor (var type in events) {\n\t\t\tvar func = events[type],\n\t\t\t\tparts = type.split(/[\\s,]+/g);\n\t\t\tfor (var i = 0, l = parts.length; i < l; i++)\n\t\t\t\tel.removeEventListener(parts[i], func, false);\n\t\t}\n\t},\n\n\tgetPoint: function(event) {\n\t\tvar pos = event.targetTouches\n\t\t\t\t? event.targetTouches.length\n\t\t\t\t\t? event.targetTouches[0]\n\t\t\t\t\t: event.changedTouches[0]\n\t\t\t\t: event;\n\t\treturn new Point(\n\t\t\tpos.pageX || pos.clientX + document.documentElement.scrollLeft,\n\t\t\tpos.pageY || pos.clientY + document.documentElement.scrollTop\n\t\t);\n\t},\n\n\tgetTarget: function(event) {\n\t\treturn event.target || event.srcElement;\n\t},\n\n\tgetRelatedTarget: function(event) {\n\t\treturn event.relatedTarget || event.toElement;\n\t},\n\n\tgetOffset: function(event, target) {\n\t\treturn DomEvent.getPoint(event).subtract(DomElement.getOffset(\n\t\t\t\ttarget || DomEvent.getTarget(event)));\n\t},\n\n\tstop: function(event) {\n\t\tevent.stopPropagation();\n\t\tevent.preventDefault();\n\t}\n};\n\nDomEvent.requestAnimationFrame = new function() {\n\tvar nativeRequest = typeof window === 'object' &&\n\t\t\tDomElement.getPrefixed(window, 'requestAnimationFrame'),\n\t\trequested = false,\n\t\tcallbacks = [],\n\t\tfocused = true,\n\t\ttimer;\n\n\tif ( typeof window === 'object' ) {\n\t\tDomEvent.add(window, {\n\t\t\tfocus: function() {\n\t\t\t\tfocused = true;\n\t\t\t},\n\t\t\tblur: function() {\n\t\t\t\tfocused = false;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction handleCallbacks() {\n\t\tfor (var i = callbacks.length - 1; i >= 0; i--) {\n\t\t\tvar entry = callbacks[i],\n\t\t\t\tfunc = entry[0],\n\t\t\t\tel = entry[1];\n\t\t\tif (!el || (PaperScope.getAttribute(el, 'keepalive') == 'true'\n\t\t\t\t\t|| focused) && DomElement.isInView(el)) {\n\t\t\t\tcallbacks.splice(i, 1);\n\t\t\t\tfunc();\n\t\t\t}\n\t\t}\n\t\tif (nativeRequest) {\n\t\t\tif (callbacks.length) {\n\t\t\t\tnativeRequest(handleCallbacks);\n\t\t\t} else {\n\t\t\t\trequested = false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn function(callback, element) {\n\t\tcallbacks.push([callback, element]);\n\t\tif (nativeRequest) {\n\t\t\tif (!requested) {\n\t\t\t\tnativeRequest(handleCallbacks);\n\t\t\t\trequested = true;\n\t\t\t}\n\t\t} else if (!timer) {\n\t\t\ttimer = setInterval(handleCallbacks, 1000 / 60);\n\t\t}\n\t};\n};\n\nvar View = Base.extend(Emitter, {\n\t_class: 'View',\n\n\tinitialize: function View(project, element) {\n\t\tthis._project = project;\n\t\tthis._scope = project._scope;\n\t\tthis._element = element;\n\t\tvar size;\n\t\tif ( !noCanvas ) {\n\t\t\tif (!this._pixelRatio)\n\t\t\t\tthis._pixelRatio = window.devicePixelRatio || 1;\n\t\t\tthis._id = element.getAttribute('id');\n\t\t\tif (this._id == null)\n\t\t\t\telement.setAttribute('id', this._id = 'view-' + View._id++);\n\t\t\tDomEvent.add(element, this._viewEvents);\n\t\t\tvar none = 'none';\n\t\t\tDomElement.setPrefixed(element.style, {\n\t\t\t\tuserSelect: none,\n\t\t\t\ttouchAction: none,\n\t\t\t\ttouchCallout: none,\n\t\t\t\tcontentZooming: none,\n\t\t\t\tuserDrag: none,\n\t\t\t\ttapHighlightColor: 'rgba(0,0,0,0)'\n\t\t\t});\n\n\t\t\tfunction getSize(name) {\n\t\t\t\treturn element[name] || parseInt(element.getAttribute(name), 10);\n\t\t\t}\n\n\t\t\tfunction getCanvasSize() {\n\t\t\t\tvar size = DomElement.getSize(element);\n\t\t\t\treturn size.isNaN() || size.isZero()\n\t\t\t\t\t\t? new Size(getSize('width'), getSize('height'))\n\t\t\t\t\t\t: size;\n\t\t\t}\n\n\t\t\tif (PaperScope.hasAttribute(element, 'resize')) {\n\t\t\t\tvar that = this;\n\t\t\t\tDomEvent.add(window, this._windowEvents = {\n\t\t\t\t\tresize: function() {\n\t\t\t\t\t\tthat.setViewSize(getCanvasSize());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis._setViewSize(size = getCanvasSize());\n\t\t\tif (PaperScope.hasAttribute(element, 'stats')\n\t\t\t\t\t&& typeof Stats !== 'undefined') {\n\t\t\t\tthis._stats = new Stats();\n\t\t\t\tvar stats = this._stats.domElement,\n\t\t\t\t\tstyle = stats.style,\n\t\t\t\t\toffset = DomElement.getOffset(element);\n\t\t\t\tstyle.position = 'absolute';\n\t\t\t\tstyle.left = offset.x + 'px';\n\t\t\t\tstyle.top = offset.y + 'px';\n\t\t\t\tdocument.body.appendChild(stats);\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (!this._pixelRatio)\n\t\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._id = 'view-' + View._id++;\n\t\t\tsize = new Size(element.width, element.height);\n\t\t}\n\t\tView._views.push(this);\n\t\tView._viewsById[this._id] = this;\n\t\tthis._viewSize = size;\n\t\t(this._matrix = new Matrix())._owner = this;\n\t\tthis._zoom = 1;\n\t\tif (!View._focused)\n\t\t\tView._focused = this;\n\t\tthis._frameItems = {};\n\t\tthis._frameItemCount = 0;\n\t},\n\n\tremove: function() {\n\t\tif (!this._project)\n\t\t\treturn false;\n\t\tif (View._focused === this)\n\t\t\tView._focused = null;\n\t\tView._views.splice(View._views.indexOf(this), 1);\n\t\tdelete View._viewsById[this._id];\n\t\tif (this._project._view === this)\n\t\t\tthis._project._view = null;\n\t\tDomEvent.remove(this._element, this._viewEvents);\n\t\tDomEvent.remove(window, this._windowEvents);\n\t\tthis._element = this._project = null;\n\t\tthis.off('frame');\n\t\tthis._animate = false;\n\t\tthis._frameItems = {};\n\t\treturn true;\n\t},\n\n\t_events: {\n\t\tonFrame: {\n\t\t\tinstall: function() {\n\t\t\t\tthis.play();\n\t\t\t},\n\n\t\t\tuninstall: function() {\n\t\t\t\tthis.pause();\n\t\t\t}\n\t\t},\n\n\t\tonResize: {}\n\t},\n\n\t_animate: false,\n\t_time: 0,\n\t_count: 0,\n\n\t_requestFrame: function() {\n\t\tvar that = this;\n\t\tDomEvent.requestAnimationFrame(function() {\n\t\t\tthat._requested = false;\n\t\t\tif (!that._animate)\n\t\t\t\treturn;\n\t\t\tthat._requestFrame();\n\t\t\tthat._handleFrame();\n\t\t}, this._element);\n\t\tthis._requested = true;\n\t},\n\n\t_handleFrame: function() {\n\t\tpaper = this._scope;\n\t\tvar now = Date.now() / 1000,\n\t\t\tdelta = this._before ? now - this._before : 0;\n\t\tthis._before = now;\n\t\tthis._handlingFrame = true;\n\t\tthis.emit('frame', new Base({\n\t\t\tdelta: delta,\n\t\t\ttime: this._time += delta,\n\t\t\tcount: this._count++\n\t\t}));\n\t\tif (this._stats)\n\t\t\tthis._stats.update();\n\t\tthis._handlingFrame = false;\n\t\tthis.update();\n\t},\n\n\t_animateItem: function(item, animate) {\n\t\tvar items = this._frameItems;\n\t\tif (animate) {\n\t\t\titems[item._id] = {\n\t\t\t\titem: item,\n\t\t\t\ttime: 0,\n\t\t\t\tcount: 0\n\t\t\t};\n\t\t\tif (++this._frameItemCount === 1)\n\t\t\t\tthis.on('frame', this._handleFrameItems);\n\t\t} else {\n\t\t\tdelete items[item._id];\n\t\t\tif (--this._frameItemCount === 0) {\n\t\t\t\tthis.off('frame', this._handleFrameItems);\n\t\t\t}\n\t\t}\n\t},\n\n\t_handleFrameItems: function(event) {\n\t\tfor (var i in this._frameItems) {\n\t\t\tvar entry = this._frameItems[i];\n\t\t\tentry.item.emit('frame', new Base(event, {\n\t\t\t\ttime: entry.time += event.delta,\n\t\t\t\tcount: entry.count++\n\t\t\t}));\n\t\t}\n\t},\n\n\t_update: function() {\n\t\tthis._project._needsUpdate = true;\n\t\tif (this._handlingFrame)\n\t\t\treturn;\n\t\tif (this._animate) {\n\t\t\tthis._handleFrame();\n\t\t} else {\n\t\t\tthis.update();\n\t\t}\n\t},\n\n\t_changed: function(flags) {\n\t\tif (flags & 1)\n\t\t\tthis._project._needsUpdate = true;\n\t},\n\n\t_transform: function(matrix) {\n\t\tthis._matrix.concatenate(matrix);\n\t\tthis._bounds = null;\n\t\tthis._update();\n\t},\n\n\tgetElement: function() {\n\t\treturn this._element;\n\t},\n\n\tgetPixelRatio: function() {\n\t\treturn this._pixelRatio;\n\t},\n\n\tgetResolution: function() {\n\t\treturn this._pixelRatio * 72;\n\t},\n\n\tgetViewSize: function() {\n\t\tvar size = this._viewSize;\n\t\treturn new LinkedSize(size.width, size.height, this, 'setViewSize');\n\t},\n\n\tsetViewSize: function() {\n\t\tvar size = Size.read(arguments),\n\t\t\tdelta = size.subtract(this._viewSize);\n\t\tif (delta.isZero())\n\t\t\treturn;\n\t\tthis._viewSize.set(size.width, size.height);\n\t\tthis._setViewSize(size);\n\t\tthis._bounds = null;\n\t\tthis.emit('resize', {\n\t\t\tsize: size,\n\t\t\tdelta: delta\n\t\t});\n\t\tthis._update();\n\t},\n\n\t_setViewSize: function(size) {\n\t\tvar element = this._element;\n\t\telement.width = size.width;\n\t\telement.height = size.height;\n\t},\n\n\tgetBounds: function() {\n\t\tif (!this._bounds)\n\t\t\tthis._bounds = this._matrix.inverted()._transformBounds(\n\t\t\t\t\tnew Rectangle(new Point(), this._viewSize));\n\t\treturn this._bounds;\n\t},\n\n\tgetSize: function() {\n\t\treturn this.getBounds().getSize();\n\t},\n\n\tgetCenter: function() {\n\t\treturn this.getBounds().getCenter();\n\t},\n\n\tsetCenter: function() {\n\t\tvar center = Point.read(arguments);\n\t\tthis.scrollBy(center.subtract(this.getCenter()));\n\t},\n\n\tgetZoom: function() {\n\t\treturn this._zoom;\n\t},\n\n\tsetZoom: function(zoom) {\n\t\tthis._transform(new Matrix().scale(zoom / this._zoom,\n\t\t\tthis.getCenter()));\n\t\tthis._zoom = zoom;\n\t},\n\n\tisVisible: function() {\n\t\treturn DomElement.isInView(this._element);\n\t},\n\n\tscrollBy: function() {\n\t\tthis._transform(new Matrix().translate(Point.read(arguments).negate()));\n\t},\n\n\tplay: function() {\n\t\tthis._animate = true;\n\t\tif (!this._requested)\n\t\t\tthis._requestFrame();\n\t},\n\n\tpause: function() {\n\t\tthis._animate = false;\n\t},\n\n\tdraw: function() {\n\t\tthis.update();\n\t},\n\n\tprojectToView: function() {\n\t\treturn this._matrix._transformPoint(Point.read(arguments));\n\t},\n\n\tviewToProject: function() {\n\t\treturn this._matrix._inverseTransform(Point.read(arguments));\n\t}\n\n}, {\n\tstatics: {\n\t\t_views: [],\n\t\t_viewsById: {},\n\t\t_id: 0,\n\n\t\tcreate: function(project, element) {\n\t\t\tif (typeof element === 'string')\n\t\t\t\telement = document.getElementById(element);\n\t\t\treturn new CanvasView(project, element);\n\t\t}\n\t}\n}, new function() {\n\tif ( noCanvas ) {\n\t\treturn;\n\t}\n\n\tvar tool,\n\t\tprevFocus,\n\t\ttempFocus,\n\t\tdragging = false;\n\n\tfunction getView(event) {\n\t\tvar target = DomEvent.getTarget(event);\n\t\treturn target.getAttribute && View._viewsById[target.getAttribute('id')];\n\t}\n\n\tfunction viewToProject(view, event) {\n\t\treturn view.viewToProject(DomEvent.getOffset(event, view._element));\n\t}\n\n\tfunction updateFocus() {\n\t\tif (!View._focused || !View._focused.isVisible()) {\n\t\t\tfor (var i = 0, l = View._views.length; i < l; i++) {\n\t\t\t\tvar view = View._views[i];\n\t\t\t\tif (view && view.isVisible()) {\n\t\t\t\t\tView._focused = tempFocus = view;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction handleMouseMove(view, point, event) {\n\t\tview._handleEvent('mousemove', point, event);\n\t\tvar tool = view._scope.tool;\n\t\tif (tool) {\n\t\t\ttool._handleEvent(dragging && tool.responds('mousedrag')\n\t\t\t\t\t? 'mousedrag' : 'mousemove', point, event);\n\t\t}\n\t\tview.update();\n\t\treturn tool;\n\t}\n\n\tvar navigator = window.navigator,\n\t\tmousedown, mousemove, mouseup;\n\tif (navigator.pointerEnabled || navigator.msPointerEnabled) {\n\t\tmousedown = 'pointerdown MSPointerDown';\n\t\tmousemove = 'pointermove MSPointerMove';\n\t\tmouseup = 'pointerup pointercancel MSPointerUp MSPointerCancel';\n\t} else {\n\t\tmousedown = 'touchstart';\n\t\tmousemove = 'touchmove';\n\t\tmouseup = 'touchend touchcancel';\n\t\tif (!('ontouchstart' in window && navigator.userAgent.match(\n\t\t\t\t/mobile|tablet|ip(ad|hone|od)|android|silk/i))) {\n\t\t\tmousedown += ' mousedown';\n\t\t\tmousemove += ' mousemove';\n\t\t\tmouseup += ' mouseup';\n\t\t}\n\t}\n\n\tvar viewEvents = {\n\t\t'selectstart dragstart': function(event) {\n\t\t\tif (dragging)\n\t\t\t\tevent.preventDefault();\n\t\t}\n\t};\n\n\tvar docEvents = {\n\t\tmouseout: function(event) {\n\t\t\tvar view = View._focused,\n\t\t\t\ttarget = DomEvent.getRelatedTarget(event);\n\t\t\tif (view && (!target || target.nodeName === 'HTML'))\n\t\t\t\thandleMouseMove(view, viewToProject(view, event), event);\n\t\t},\n\n\t\tscroll: updateFocus\n\t};\n\n\tviewEvents[mousedown] = function(event) {\n\t\tvar view = View._focused = getView(event),\n\t\t\tpoint = viewToProject(view, event);\n\t\tdragging = true;\n\t\tview._handleEvent('mousedown', point, event);\n\t\tif (tool = view._scope.tool)\n\t\t\ttool._handleEvent('mousedown', point, event);\n\t\tview.update();\n\t};\n\n\tdocEvents[mousemove] = function(event) {\n\t\tvar view = View._focused;\n\t\tif (!dragging) {\n\t\t\tvar target = getView(event);\n\t\t\tif (target) {\n\t\t\t\tif (view !== target)\n\t\t\t\t\thandleMouseMove(view, viewToProject(view, event), event);\n\t\t\t\tprevFocus = view;\n\t\t\t\tview = View._focused = tempFocus = target;\n\t\t\t} else if (tempFocus && tempFocus === view) {\n\t\t\t\tview = View._focused = prevFocus;\n\t\t\t\tupdateFocus();\n\t\t\t}\n\t\t}\n\t\tif (view) {\n\t\t\tvar point = viewToProject(view, event);\n\t\t\tif (dragging || view.getBounds().contains(point))\n\t\t\t\ttool = handleMouseMove(view, point, event);\n\t\t}\n\t};\n\n\tdocEvents[mouseup] = function(event) {\n\t\tvar view = View._focused;\n\t\tif (!view || !dragging)\n\t\t\treturn;\n\t\tvar point = viewToProject(view, event);\n\t\tdragging = false;\n\t\tview._handleEvent('mouseup', point, event);\n\t\tif (tool)\n\t\t\ttool._handleEvent('mouseup', point, event);\n\t\tview.update();\n\t};\n\n\tDomEvent.add(document, docEvents);\n\n\tDomEvent.add(window, {\n\t\tload: updateFocus\n\t});\n\n\treturn {\n\t\t_viewEvents: viewEvents,\n\n\t\t_handleEvent: function() {},\n\n\t\tstatics: {\n\t\t\tupdateFocus: updateFocus\n\t\t}\n\t};\n});\n\nvar CanvasView = View.extend({\n\t_class: 'CanvasView',\n\n\tinitialize: function CanvasView(project, canvas) {\n\t\tif ( !noCanvas ) {\n\t\t\tif (!(canvas instanceof HTMLCanvasElement)) {\n\t\t\t\tvar size = Size.read(arguments);\n\t\t\t\tif (size.isZero())\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Cannot create CanvasView with the provided argument: '\n\t\t\t\t\t\t\t+ [].slice.call(arguments, 1));\n\t\t\t\tcanvas = CanvasProvider.getCanvas(size);\n\t\t\t}\n\t\t\tthis._context = canvas.getContext('2d');\n\t\t}\n\t\tthis._eventCounters = {};\n\t\tthis._pixelRatio = 1;\n\t\tif (!noCanvas && !/^off|false$/.test(PaperScope.getAttribute(canvas, 'hidpi'))) {\n\t\t\tvar deviceRatio = window.devicePixelRatio || 1,\n\t\t\t\tbackingStoreRatio = DomElement.getPrefixed(this._context,\n\t\t\t\t\t\t'backingStorePixelRatio') || 1;\n\t\t\tthis._pixelRatio = deviceRatio / backingStoreRatio;\n\t\t}\n\t\tView.call(this, project, canvas);\n\t},\n\n\t_setViewSize: function(size) {\n\t\tvar element = this._element,\n\t\t\tpixelRatio = this._pixelRatio,\n\t\t\twidth = size.width,\n\t\t\theight = size.height;\n\t\telement.width = width * pixelRatio;\n\t\telement.height = height * pixelRatio;\n\t\tif (pixelRatio !== 1) {\n\t\t\tif (!PaperScope.hasAttribute(element, 'resize')) {\n\t\t\t\tvar style = element.style;\n\t\t\t\tstyle.width = width + 'px';\n\t\t\t\tstyle.height = height + 'px';\n\t\t\t}\n\t\t\tthis._context.scale(pixelRatio, pixelRatio);\n\t\t}\n\t},\n\n\tgetPixelSize: function(size) {\n\t\tvar ctx = this._context,\n\t\t\tprevFont = ctx.font;\n\t\tctx.font = size + ' serif';\n\t\tsize = parseFloat(ctx.font);\n\t\tctx.font = prevFont;\n\t\treturn size;\n\t},\n\n\tgetTextWidth: function(font, lines) {\n\t\tvar ctx = this._context,\n\t\t\tprevFont = ctx.font,\n\t\t\twidth = 0;\n\t\tctx.font = font;\n\t\tfor (var i = 0, l = lines.length; i < l; i++)\n\t\t\twidth = Math.max(width, ctx.measureText(lines[i]).width);\n\t\tctx.font = prevFont;\n\t\treturn width;\n\t},\n\n\tupdate: function() {\n\t\tvar project = this._project;\n\t\tif (!project || !project._needsUpdate)\n\t\t\treturn false;\n\t\tvar ctx = this._context,\n\t\t\tsize = this._viewSize;\n\t\tctx.clearRect(0, 0, size.width + 1, size.height + 1);\n\t\tproject.draw(ctx, this._matrix, this._pixelRatio);\n\t\tproject._needsUpdate = false;\n\t\treturn true;\n\t}\n}, new function() {\n\n\tvar downPoint,\n\t\tlastPoint,\n\t\toverPoint,\n\t\tdownItem,\n\t\tlastItem,\n\t\toverItem,\n\t\tdragItem,\n\t\tdblClick,\n\t\tclickTime;\n\n\tfunction callEvent(view, type, event, point, target, lastPoint) {\n\t\tvar item = target,\n\t\t\tmouseEvent;\n\n\t\tfunction call(obj) {\n\t\t\tif (obj.responds(type)) {\n\t\t\t\tif (!mouseEvent) {\n\t\t\t\t\tmouseEvent = new MouseEvent(type, event, point, target,\n\t\t\t\t\t\t\tlastPoint ? point.subtract(lastPoint) : null);\n\t\t\t\t}\n\t\t\t\tif (obj.emit(type, mouseEvent) && mouseEvent.isStopped) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\twhile (item) {\n\t\t\tif (call(item))\n\t\t\t\treturn true;\n\t\t\titem = item.getParent();\n\t\t}\n\t\tif (call(view))\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\treturn {\n\t\t_handleEvent: function(type, point, event) {\n\t\t\tif (!this._eventCounters[type])\n\t\t\t\treturn;\n\t\t\tvar project = this._project,\n\t\t\t\thit = project.hitTest(point, {\n\t\t\t\t\ttolerance: 0,\n\t\t\t\t\tfill: true,\n\t\t\t\t\tstroke: true\n\t\t\t\t}),\n\t\t\t\titem = hit && hit.item,\n\t\t\t\tstopped = false;\n\t\t\tswitch (type) {\n\t\t\tcase 'mousedown':\n\t\t\t\tstopped = callEvent(this, type, event, point, item);\n\t\t\t\tdblClick = lastItem == item && (Date.now() - clickTime < 300);\n\t\t\t\tdownItem = lastItem = item;\n\t\t\t\tdownPoint = lastPoint = overPoint = point;\n\t\t\t\tdragItem = !stopped && item;\n\t\t\t\twhile (dragItem && !dragItem.responds('mousedrag'))\n\t\t\t\t\tdragItem = dragItem._parent;\n\t\t\t\tbreak;\n\t\t\tcase 'mouseup':\n\t\t\t\tstopped = callEvent(this, type, event, point, item, downPoint);\n\t\t\t\tif (dragItem) {\n\t\t\t\t\tif (lastPoint && !lastPoint.equals(point))\n\t\t\t\t\t\tcallEvent(this, 'mousedrag', event, point, dragItem,\n\t\t\t\t\t\t\t\tlastPoint);\n\t\t\t\t\tif (item !== dragItem) {\n\t\t\t\t\t\toverPoint = point;\n\t\t\t\t\t\tcallEvent(this, 'mousemove', event, point, item,\n\t\t\t\t\t\t\t\toverPoint);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!stopped && item && item === downItem) {\n\t\t\t\t\tclickTime = Date.now();\n\t\t\t\t\tcallEvent(this, dblClick && downItem.responds('doubleclick')\n\t\t\t\t\t\t\t? 'doubleclick' : 'click', event, downPoint, item);\n\t\t\t\t\tdblClick = false;\n\t\t\t\t}\n\t\t\t\tdownItem = dragItem = null;\n\t\t\t\tbreak;\n\t\t\tcase 'mousemove':\n\t\t\t\tif (dragItem)\n\t\t\t\t\tstopped = callEvent(this, 'mousedrag', event, point,\n\t\t\t\t\t\t\tdragItem, lastPoint);\n\t\t\t\tif (!stopped) {\n\t\t\t\t\tif (item !== overItem)\n\t\t\t\t\t\toverPoint = point;\n\t\t\t\t\tstopped = callEvent(this, type, event, point, item,\n\t\t\t\t\t\t\toverPoint);\n\t\t\t\t}\n\t\t\t\tlastPoint = overPoint = point;\n\t\t\t\tif (item !== overItem) {\n\t\t\t\t\tcallEvent(this, 'mouseleave', event, point, overItem);\n\t\t\t\t\toverItem = item;\n\t\t\t\t\tcallEvent(this, 'mouseenter', event, point, item);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn stopped;\n\t\t}\n\t};\n});\n\nvar Event = Base.extend({\n\t_class: 'Event',\n\n\tinitialize: function Event(event) {\n\t\tthis.event = event;\n\t},\n\n\tisPrevented: false,\n\tisStopped: false,\n\n\tpreventDefault: function() {\n\t\tthis.isPrevented = true;\n\t\tthis.event.preventDefault();\n\t},\n\n\tstopPropagation: function() {\n\t\tthis.isStopped = true;\n\t\tthis.event.stopPropagation();\n\t},\n\n\tstop: function() {\n\t\tthis.stopPropagation();\n\t\tthis.preventDefault();\n\t},\n\n\tgetModifiers: function() {\n\t\treturn Key.modifiers;\n\t}\n});\n\nvar KeyEvent = Event.extend({\n\t_class: 'KeyEvent',\n\n\tinitialize: function KeyEvent(down, key, character, event) {\n\t\tEvent.call(this, event);\n\t\tthis.type = down ? 'keydown' : 'keyup';\n\t\tthis.key = key;\n\t\tthis.character = character;\n\t},\n\n\ttoString: function() {\n\t\treturn \"{ type: '\" + this.type\n\t\t\t\t+ \"', key: '\" + this.key\n\t\t\t\t+ \"', character: '\" + this.character\n\t\t\t\t+ \"', modifiers: \" + this.getModifiers()\n\t\t\t\t+ \" }\";\n\t}\n});\n\nvar Key = new function() {\n\tif ( noCanvas ) {\n\t\treturn;\n\t}\n\n\tvar specialKeys = {\n\t\t8: 'backspace',\n\t\t9: 'tab',\n\t\t13: 'enter',\n\t\t16: 'shift',\n\t\t17: 'control',\n\t\t18: 'option',\n\t\t19: 'pause',\n\t\t20: 'caps-lock',\n\t\t27: 'escape',\n\t\t32: 'space',\n\t\t35: 'end',\n\t\t36: 'home',\n\t\t37: 'left',\n\t\t38: 'up',\n\t\t39: 'right',\n\t\t40: 'down',\n\t\t46: 'delete',\n\t\t91: 'command',\n\t\t93: 'command',\n\t\t224: 'command'\n\t},\n\n\tspecialChars = {\n\t\t9: true,\n\t\t13: true,\n\t\t32: true\n\t},\n\n\tmodifiers = new Base({\n\t\tshift: false,\n\t\tcontrol: false,\n\t\toption: false,\n\t\tcommand: false,\n\t\tcapsLock: false,\n\t\tspace: false\n\t}),\n\n\tcharCodeMap = {},\n\tkeyMap = {},\n\tdownCode;\n\n\tfunction handleKey(down, keyCode, charCode, event) {\n\t\tvar character = charCode ? String.fromCharCode(charCode) : '',\n\t\t\tspecialKey = specialKeys[keyCode],\n\t\t\tkey = specialKey || character.toLowerCase(),\n\t\t\ttype = down ? 'keydown' : 'keyup',\n\t\t\tview = View._focused,\n\t\t\tscope = view && view.isVisible() && view._scope,\n\t\t\ttool = scope && scope.tool,\n\t\t\tname;\n\t\tkeyMap[key] = down;\n\t\tif (specialKey && (name = Base.camelize(specialKey)) in modifiers)\n\t\t\tmodifiers[name] = down;\n\t\tif (down) {\n\t\t\tcharCodeMap[keyCode] = charCode;\n\t\t} else {\n\t\t\tdelete charCodeMap[keyCode];\n\t\t}\n\t\tif (tool && tool.responds(type)) {\n\t\t\tpaper = scope;\n\t\t\ttool.emit(type, new KeyEvent(down, key, character, event));\n\t\t\tif (view)\n\t\t\t\tview.update();\n\t\t}\n\t}\n\n\tDomEvent.add(document, {\n\t\tkeydown: function(event) {\n\t\t\tvar code = event.which || event.keyCode;\n\t\t\tif (code in specialKeys || modifiers.command) {\n\t\t\t\thandleKey(true, code,\n\t\t\t\t\t\tcode in specialChars || modifiers.command ? code : 0,\n\t\t\t\t\t\tevent);\n\t\t\t} else {\n\t\t\t\tdownCode = code;\n\t\t\t}\n\t\t},\n\n\t\tkeypress: function(event) {\n\t\t\tif (downCode != null) {\n\t\t\t\thandleKey(true, downCode, event.which || event.keyCode, event);\n\t\t\t\tdownCode = null;\n\t\t\t}\n\t\t},\n\n\t\tkeyup: function(event) {\n\t\t\tvar code = event.which || event.keyCode;\n\t\t\tif (code in charCodeMap)\n\t\t\t\thandleKey(false, code, charCodeMap[code], event);\n\t\t}\n\t});\n\n\tDomEvent.add(window, {\n\t\tblur: function(event) {\n\t\t\tfor (var code in charCodeMap)\n\t\t\t\thandleKey(false, code, charCodeMap[code], event);\n\t\t}\n\t});\n\n\treturn {\n\t\tmodifiers: modifiers,\n\n\t\tisDown: function(key) {\n\t\t\treturn !!keyMap[key];\n\t\t}\n\t};\n};\n\nvar MouseEvent = Event.extend({\n\t_class: 'MouseEvent',\n\n\tinitialize: function MouseEvent(type, event, point, target, delta) {\n\t\tEvent.call(this, event);\n\t\tthis.type = type;\n\t\tthis.point = point;\n\t\tthis.target = target;\n\t\tthis.delta = delta;\n\t},\n\n\ttoString: function() {\n\t\treturn \"{ type: '\" + this.type\n\t\t\t\t+ \"', point: \" + this.point\n\t\t\t\t+ ', target: ' + this.target\n\t\t\t\t+ (this.delta ? ', delta: ' + this.delta : '')\n\t\t\t\t+ ', modifiers: ' + this.getModifiers()\n\t\t\t\t+ ' }';\n\t}\n});\n\nvar ToolEvent = Event.extend({\n\t_class: 'ToolEvent',\n\t_item: null,\n\n\tinitialize: function ToolEvent(tool, type, event) {\n\t\tthis.tool = tool;\n\t\tthis.type = type;\n\t\tthis.event = event;\n\t},\n\n\t_choosePoint: function(point, toolPoint) {\n\t\treturn point ? point : toolPoint ? toolPoint.clone() : null;\n\t},\n\n\tgetPoint: function() {\n\t\treturn this._choosePoint(this._point, this.tool._point);\n\t},\n\n\tsetPoint: function(point) {\n\t\tthis._point = point;\n\t},\n\n\tgetLastPoint: function() {\n\t\treturn this._choosePoint(this._lastPoint, this.tool._lastPoint);\n\t},\n\n\tsetLastPoint: function(lastPoint) {\n\t\tthis._lastPoint = lastPoint;\n\t},\n\n\tgetDownPoint: function() {\n\t\treturn this._choosePoint(this._downPoint, this.tool._downPoint);\n\t},\n\n\tsetDownPoint: function(downPoint) {\n\t\tthis._downPoint = downPoint;\n\t},\n\n\tgetMiddlePoint: function() {\n\t\tif (!this._middlePoint && this.tool._lastPoint) {\n\t\t\treturn this.tool._point.add(this.tool._lastPoint).divide(2);\n\t\t}\n\t\treturn this._middlePoint;\n\t},\n\n\tsetMiddlePoint: function(middlePoint) {\n\t\tthis._middlePoint = middlePoint;\n\t},\n\n\tgetDelta: function() {\n\t\treturn !this._delta && this.tool._lastPoint\n\t\t\t\t? this.tool._point.subtract(this.tool._lastPoint)\n\t\t\t\t: this._delta;\n\t},\n\n\tsetDelta: function(delta) {\n\t\tthis._delta = delta;\n\t},\n\n\tgetCount: function() {\n\t\treturn /^mouse(down|up)$/.test(this.type)\n\t\t\t\t? this.tool._downCount\n\t\t\t\t: this.tool._count;\n\t},\n\n\tsetCount: function(count) {\n\t\tthis.tool[/^mouse(down|up)$/.test(this.type) ? 'downCount' : 'count']\n\t\t\t= count;\n\t},\n\n\tgetItem: function() {\n\t\tif (!this._item) {\n\t\t\tvar result = this.tool._scope.project.hitTest(this.getPoint());\n\t\t\tif (result) {\n\t\t\t\tvar item = result.item,\n\t\t\t\t\tparent = item._parent;\n\t\t\t\twhile (/^(Group|CompoundPath)$/.test(parent._class)) {\n\t\t\t\t\titem = parent;\n\t\t\t\t\tparent = parent._parent;\n\t\t\t\t}\n\t\t\t\tthis._item = item;\n\t\t\t}\n\t\t}\n\t\treturn this._item;\n\t},\n\n\tsetItem: function(item) {\n\t\tthis._item = item;\n\t},\n\n\ttoString: function() {\n\t\treturn '{ type: ' + this.type\n\t\t\t\t+ ', point: ' + this.getPoint()\n\t\t\t\t+ ', count: ' + this.getCount()\n\t\t\t\t+ ', modifiers: ' + this.getModifiers()\n\t\t\t\t+ ' }';\n\t}\n});\n\nvar Tool = PaperScopeItem.extend({\n\t_class: 'Tool',\n\t_list: 'tools',\n\t_reference: 'tool',\n\t_events: [ 'onActivate', 'onDeactivate', 'onEditOptions',\n\t\t\t'onMouseDown', 'onMouseUp', 'onMouseDrag', 'onMouseMove',\n\t\t\t'onKeyDown', 'onKeyUp' ],\n\n\tinitialize: function Tool(props) {\n\t\tPaperScopeItem.call(this);\n\t\tthis._firstMove = true;\n\t\tthis._count = 0;\n\t\tthis._downCount = 0;\n\t\tthis._set(props);\n\t},\n\n\tgetMinDistance: function() {\n\t\treturn this._minDistance;\n\t},\n\n\tsetMinDistance: function(minDistance) {\n\t\tthis._minDistance = minDistance;\n\t\tif (this._minDistance != null && this._maxDistance != null\n\t\t\t\t&& this._minDistance > this._maxDistance) {\n\t\t\tthis._maxDistance = this._minDistance;\n\t\t}\n\t},\n\n\tgetMaxDistance: function() {\n\t\treturn this._maxDistance;\n\t},\n\n\tsetMaxDistance: function(maxDistance) {\n\t\tthis._maxDistance = maxDistance;\n\t\tif (this._minDistance != null && this._maxDistance != null\n\t\t\t\t&& this._maxDistance < this._minDistance) {\n\t\t\tthis._minDistance = maxDistance;\n\t\t}\n\t},\n\n\tgetFixedDistance: function() {\n\t\treturn this._minDistance == this._maxDistance\n\t\t\t? this._minDistance : null;\n\t},\n\n\tsetFixedDistance: function(distance) {\n\t\tthis._minDistance = distance;\n\t\tthis._maxDistance = distance;\n\t},\n\n\t_updateEvent: function(type, point, minDistance, maxDistance, start,\n\t\t\tneedsChange, matchMaxDistance) {\n\t\tif (!start) {\n\t\t\tif (minDistance != null || maxDistance != null) {\n\t\t\t\tvar minDist = minDistance != null ? minDistance : 0,\n\t\t\t\t\tvector = point.subtract(this._point),\n\t\t\t\t\tdistance = vector.getLength();\n\t\t\t\tif (distance < minDist)\n\t\t\t\t\treturn false;\n\t\t\t\tvar maxDist = maxDistance != null ? maxDistance : 0;\n\t\t\t\tif (maxDist != 0) {\n\t\t\t\t\tif (distance > maxDist) {\n\t\t\t\t\t\tpoint = this._point.add(vector.normalize(maxDist));\n\t\t\t\t\t} else if (matchMaxDistance) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (needsChange && point.equals(this._point))\n\t\t\t\treturn false;\n\t\t}\n\t\tthis._lastPoint = start && type == 'mousemove' ? point : this._point;\n\t\tthis._point = point;\n\t\tswitch (type) {\n\t\tcase 'mousedown':\n\t\t\tthis._lastPoint = this._downPoint;\n\t\t\tthis._downPoint = this._point;\n\t\t\tthis._downCount++;\n\t\t\tbreak;\n\t\tcase 'mouseup':\n\t\t\tthis._lastPoint = this._downPoint;\n\t\t\tbreak;\n\t\t}\n\t\tthis._count = start ? 0 : this._count + 1;\n\t\treturn true;\n\t},\n\n\t_fireEvent: function(type, event) {\n\t\tvar sets = paper.project._removeSets;\n\t\tif (sets) {\n\t\t\tif (type === 'mouseup')\n\t\t\t\tsets.mousedrag = null;\n\t\t\tvar set = sets[type];\n\t\t\tif (set) {\n\t\t\t\tfor (var id in set) {\n\t\t\t\t\tvar item = set[id];\n\t\t\t\t\tfor (var key in sets) {\n\t\t\t\t\t\tvar other = sets[key];\n\t\t\t\t\t\tif (other && other != set)\n\t\t\t\t\t\t\tdelete other[item._id];\n\t\t\t\t\t}\n\t\t\t\t\titem.remove();\n\t\t\t\t}\n\t\t\t\tsets[type] = null;\n\t\t\t}\n\t\t}\n\t\treturn this.responds(type)\n\t\t\t\t&& this.emit(type, new ToolEvent(this, type, event));\n\t},\n\n\t_handleEvent: function(type, point, event) {\n\t\tpaper = this._scope;\n\t\tvar called = false;\n\t\tswitch (type) {\n\t\tcase 'mousedown':\n\t\t\tthis._updateEvent(type, point, null, null, true, false, false);\n\t\t\tcalled = this._fireEvent(type, event);\n\t\t\tbreak;\n\t\tcase 'mousedrag':\n\t\t\tvar needsChange = false,\n\t\t\t\tmatchMaxDistance = false;\n\t\t\twhile (this._updateEvent(type, point, this.minDistance,\n\t\t\t\t\tthis.maxDistance, false, needsChange, matchMaxDistance)) {\n\t\t\t\tcalled = this._fireEvent(type, event) || called;\n\t\t\t\tneedsChange = true;\n\t\t\t\tmatchMaxDistance = true;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'mouseup':\n\t\t\tif (!point.equals(this._point)\n\t\t\t\t\t&& this._updateEvent('mousedrag', point, this.minDistance,\n\t\t\t\t\t\t\tthis.maxDistance, false, false, false)) {\n\t\t\t\tcalled = this._fireEvent('mousedrag', event);\n\t\t\t}\n\t\t\tthis._updateEvent(type, point, null, this.maxDistance, false,\n\t\t\t\t\tfalse, false);\n\t\t\tcalled = this._fireEvent(type, event) || called;\n\t\t\tthis._updateEvent(type, point, null, null, true, false, false);\n\t\t\tthis._firstMove = true;\n\t\t\tbreak;\n\t\tcase 'mousemove':\n\t\t\twhile (this._updateEvent(type, point, this.minDistance,\n\t\t\t\t\tthis.maxDistance, this._firstMove, true, false)) {\n\t\t\t\tcalled = this._fireEvent(type, event) || called;\n\t\t\t\tthis._firstMove = false;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (called)\n\t\t\tevent.preventDefault();\n\t\treturn called;\n\t}\n\n});\n\nvar Http = {\n\trequest: function(method, url, callback) {\n\t\tvar xhr = new (window.ActiveXObject || XMLHttpRequest)(\n\t\t\t\t\t'Microsoft.XMLHTTP');\n\t\txhr.open(method.toUpperCase(), url, true);\n\t\tif ('overrideMimeType' in xhr)\n\t\t\txhr.overrideMimeType('text/plain');\n\t\txhr.onreadystatechange = function() {\n\t\t\tif (xhr.readyState === 4) {\n\t\t\t\tvar status = xhr.status;\n\t\t\t\tif (status === 0 || status === 200) {\n\t\t\t\t\tcallback.call(xhr, xhr.responseText);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Could not load ' + url + ' (Error '\n\t\t\t\t\t\t\t+ status + ')');\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\treturn xhr.send(null);\n\t}\n};\n\nvar CanvasProvider = {\n\tcanvases: [],\n\n\tgetCanvas: function(width, height) {\n\t\tvar canvas,\n\t\t\tclear = true;\n\t\tif (typeof width === 'object') {\n\t\t\theight = width.height;\n\t\t\twidth = width.width;\n\t\t}\n\t\tif ( noCanvas ) {\n\t\t\treturn { getContext: function() {} };\n\t\t}\n\t\tif (this.canvases.length) {\n\t\t\tcanvas = this.canvases.pop();\n\t\t} else {\n\t\t\tcanvas = document.createElement('canvas');\n\t\t}\n\t\tvar ctx = canvas.getContext('2d');\n\t\tif (canvas.width === width && canvas.height === height) {\n\t\t\tif (clear)\n\t\t\t\tctx.clearRect(0, 0, width + 1, height + 1);\n\t\t} else {\n\t\t\tcanvas.width = width;\n\t\t\tcanvas.height = height;\n\t\t}\n\t\tctx.save();\n\t\treturn canvas;\n\t},\n\n\tgetContext: function(width, height) {\n\t\treturn this.getCanvas(width, height).getContext('2d');\n\t},\n\n\trelease: function(obj) {\n\t\tvar canvas = obj.canvas ? obj.canvas : obj;\n\t\tcanvas.getContext('2d').restore();\n\t\tthis.canvases.push(canvas);\n\t}\n};\n\nvar BlendMode = new function() {\n\tif ( noCanvas ) {\n\t\treturn;\n\t}\n\n\tvar min = Math.min,\n\t\tmax = Math.max,\n\t\tabs = Math.abs,\n\t\tsr, sg, sb, sa,\n\t\tbr, bg, bb, ba,\n\t\tdr, dg, db;\n\n\tfunction getLum(r, g, b) {\n\t\treturn 0.2989 * r + 0.587 * g + 0.114 * b;\n\t}\n\n\tfunction setLum(r, g, b, l) {\n\t\tvar d = l - getLum(r, g, b);\n\t\tdr = r + d;\n\t\tdg = g + d;\n\t\tdb = b + d;\n\t\tvar l = getLum(dr, dg, db),\n\t\t\tmn = min(dr, dg, db),\n\t\t\tmx = max(dr, dg, db);\n\t\tif (mn < 0) {\n\t\t\tvar lmn = l - mn;\n\t\t\tdr = l + (dr - l) * l / lmn;\n\t\t\tdg = l + (dg - l) * l / lmn;\n\t\t\tdb = l + (db - l) * l / lmn;\n\t\t}\n\t\tif (mx > 255) {\n\t\t\tvar ln = 255 - l,\n\t\t\t\tmxl = mx - l;\n\t\t\tdr = l + (dr - l) * ln / mxl;\n\t\t\tdg = l + (dg - l) * ln / mxl;\n\t\t\tdb = l + (db - l) * ln / mxl;\n\t\t}\n\t}\n\n\tfunction getSat(r, g, b) {\n\t\treturn max(r, g, b) - min(r, g, b);\n\t}\n\n\tfunction setSat(r, g, b, s) {\n\t\tvar col = [r, g, b],\n\t\t\tmx = max(r, g, b),\n\t\t\tmn = min(r, g, b),\n\t\t\tmd;\n\t\tmn = mn === r ? 0 : mn === g ? 1 : 2;\n\t\tmx = mx === r ? 0 : mx === g ? 1 : 2;\n\t\tmd = min(mn, mx) === 0 ? max(mn, mx) === 1 ? 2 : 1 : 0;\n\t\tif (col[mx] > col[mn]) {\n\t\t\tcol[md] = (col[md] - col[mn]) * s / (col[mx] - col[mn]);\n\t\t\tcol[mx] = s;\n\t\t} else {\n\t\t\tcol[md] = col[mx] = 0;\n\t\t}\n\t\tcol[mn] = 0;\n\t\tdr = col[0];\n\t\tdg = col[1];\n\t\tdb = col[2];\n\t}\n\n\tvar modes = {\n\t\tmultiply: function() {\n\t\t\tdr = br * sr / 255;\n\t\t\tdg = bg * sg / 255;\n\t\t\tdb = bb * sb / 255;\n\t\t},\n\n\t\tscreen: function() {\n\t\t\tdr = br + sr - (br * sr / 255);\n\t\t\tdg = bg + sg - (bg * sg / 255);\n\t\t\tdb = bb + sb - (bb * sb / 255);\n\t\t},\n\n\t\toverlay: function() {\n\t\t\tdr = br < 128 ? 2 * br * sr / 255 : 255 - 2 * (255 - br) * (255 - sr) / 255;\n\t\t\tdg = bg < 128 ? 2 * bg * sg / 255 : 255 - 2 * (255 - bg) * (255 - sg) / 255;\n\t\t\tdb = bb < 128 ? 2 * bb * sb / 255 : 255 - 2 * (255 - bb) * (255 - sb) / 255;\n\t\t},\n\n\t\t'soft-light': function() {\n\t\t\tvar t = sr * br / 255;\n\t\t\tdr = t + br * (255 - (255 - br) * (255 - sr) / 255 - t) / 255;\n\t\t\tt = sg * bg / 255;\n\t\t\tdg = t + bg * (255 - (255 - bg) * (255 - sg) / 255 - t) / 255;\n\t\t\tt = sb * bb / 255;\n\t\t\tdb = t + bb * (255 - (255 - bb) * (255 - sb) / 255 - t) / 255;\n\t\t},\n\n\t\t'hard-light': function() {\n\t\t\tdr = sr < 128 ? 2 * sr * br / 255 : 255 - 2 * (255 - sr) * (255 - br) / 255;\n\t\t\tdg = sg < 128 ? 2 * sg * bg / 255 : 255 - 2 * (255 - sg) * (255 - bg) / 255;\n\t\t\tdb = sb < 128 ? 2 * sb * bb / 255 : 255 - 2 * (255 - sb) * (255 - bb) / 255;\n\t\t},\n\n\t\t'color-dodge': function() {\n\t\t\tdr = br === 0 ? 0 : sr === 255 ? 255 : min(255, 255 * br / (255 - sr));\n\t\t\tdg = bg === 0 ? 0 : sg === 255 ? 255 : min(255, 255 * bg / (255 - sg));\n\t\t\tdb = bb === 0 ? 0 : sb === 255 ? 255 : min(255, 255 * bb / (255 - sb));\n\t\t},\n\n\t\t'color-burn': function() {\n\t\t\tdr = br === 255 ? 255 : sr === 0 ? 0 : max(0, 255 - (255 - br) * 255 / sr);\n\t\t\tdg = bg === 255 ? 255 : sg === 0 ? 0 : max(0, 255 - (255 - bg) * 255 / sg);\n\t\t\tdb = bb === 255 ? 255 : sb === 0 ? 0 : max(0, 255 - (255 - bb) * 255 / sb);\n\t\t},\n\n\t\tdarken: function() {\n\t\t\tdr = br < sr ? br : sr;\n\t\t\tdg = bg < sg ? bg : sg;\n\t\t\tdb = bb < sb ? bb : sb;\n\t\t},\n\n\t\tlighten: function() {\n\t\t\tdr = br > sr ? br : sr;\n\t\t\tdg = bg > sg ? bg : sg;\n\t\t\tdb = bb > sb ? bb : sb;\n\t\t},\n\n\t\tdifference: function() {\n\t\t\tdr = br - sr;\n\t\t\tif (dr < 0)\n\t\t\t\tdr = -dr;\n\t\t\tdg = bg - sg;\n\t\t\tif (dg < 0)\n\t\t\t\tdg = -dg;\n\t\t\tdb = bb - sb;\n\t\t\tif (db < 0)\n\t\t\t\tdb = -db;\n\t\t},\n\n\t\texclusion: function() {\n\t\t\tdr = br + sr * (255 - br - br) / 255;\n\t\t\tdg = bg + sg * (255 - bg - bg) / 255;\n\t\t\tdb = bb + sb * (255 - bb - bb) / 255;\n\t\t},\n\n\t\thue: function() {\n\t\t\tsetSat(sr, sg, sb, getSat(br, bg, bb));\n\t\t\tsetLum(dr, dg, db, getLum(br, bg, bb));\n\t\t},\n\n\t\tsaturation: function() {\n\t\t\tsetSat(br, bg, bb, getSat(sr, sg, sb));\n\t\t\tsetLum(dr, dg, db, getLum(br, bg, bb));\n\t\t},\n\n\t\tluminosity: function() {\n\t\t\tsetLum(br, bg, bb, getLum(sr, sg, sb));\n\t\t},\n\n\t\tcolor: function() {\n\t\t\tsetLum(sr, sg, sb, getLum(br, bg, bb));\n\t\t},\n\n\t\tadd: function() {\n\t\t\tdr = min(br + sr, 255);\n\t\t\tdg = min(bg + sg, 255);\n\t\t\tdb = min(bb + sb, 255);\n\t\t},\n\n\t\tsubtract: function() {\n\t\t\tdr = max(br - sr, 0);\n\t\t\tdg = max(bg - sg, 0);\n\t\t\tdb = max(bb - sb, 0);\n\t\t},\n\n\t\taverage: function() {\n\t\t\tdr = (br + sr) / 2;\n\t\t\tdg = (bg + sg) / 2;\n\t\t\tdb = (bb + sb) / 2;\n\t\t},\n\n\t\tnegation: function() {\n\t\t\tdr = 255 - abs(255 - sr - br);\n\t\t\tdg = 255 - abs(255 - sg - bg);\n\t\t\tdb = 255 - abs(255 - sb - bb);\n\t\t}\n\t};\n\n\tvar nativeModes = this.nativeModes = Base.each([\n\t\t'source-over', 'source-in', 'source-out', 'source-atop',\n\t\t'destination-over', 'destination-in', 'destination-out',\n\t\t'destination-atop', 'lighter', 'darker', 'copy', 'xor'\n\t], function(mode) {\n\t\tthis[mode] = true;\n\t}, {});\n\n\tvar ctx = CanvasProvider.getContext(1, 1);\n\tBase.each(modes, function(func, mode) {\n\t\tvar darken = mode === 'darken',\n\t\t\tok = false;\n\t\tctx.save();\n\t\ttry {\n\t\t\tctx.fillStyle = darken ? '#300' : '#a00';\n\t\t\tctx.fillRect(0, 0, 1, 1);\n\t\t\tctx.globalCompositeOperation = mode;\n\t\t\tif (ctx.globalCompositeOperation === mode) {\n\t\t\t\tctx.fillStyle = darken ? '#a00' : '#300';\n\t\t\t\tctx.fillRect(0, 0, 1, 1);\n\t\t\t\tok = ctx.getImageData(0, 0, 1, 1).data[0] !== darken ? 170 : 51;\n\t\t\t}\n\t\t} catch (e) {}\n\t\tctx.restore();\n\t\tnativeModes[mode] = ok;\n\t});\n\tCanvasProvider.release(ctx);\n\n\tthis.process = function(mode, srcContext, dstContext, alpha, offset) {\n\t\tvar srcCanvas = srcContext.canvas,\n\t\t\tnormal = mode === 'normal';\n\t\tif (normal || nativeModes[mode]) {\n\t\t\tdstContext.save();\n\t\t\tdstContext.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\tdstContext.globalAlpha = alpha;\n\t\t\tif (!normal)\n\t\t\t\tdstContext.globalCompositeOperation = mode;\n\t\t\tdstContext.drawImage(srcCanvas, offset.x, offset.y);\n\t\t\tdstContext.restore();\n\t\t} else {\n\t\t\tvar process = modes[mode];\n\t\t\tif (!process)\n\t\t\t\treturn;\n\t\t\tvar dstData = dstContext.getImageData(offset.x, offset.y,\n\t\t\t\t\tsrcCanvas.width, srcCanvas.height),\n\t\t\t\tdst = dstData.data,\n\t\t\t\tsrc = srcContext.getImageData(0, 0,\n\t\t\t\t\tsrcCanvas.width, srcCanvas.height).data;\n\t\t\tfor (var i = 0, l = dst.length; i < l; i += 4) {\n\t\t\t\tsr = src[i];\n\t\t\t\tbr = dst[i];\n\t\t\t\tsg = src[i + 1];\n\t\t\t\tbg = dst[i + 1];\n\t\t\t\tsb = src[i + 2];\n\t\t\t\tbb = dst[i + 2];\n\t\t\t\tsa = src[i + 3];\n\t\t\t\tba = dst[i + 3];\n\t\t\t\tprocess();\n\t\t\t\tvar a1 = sa * alpha / 255,\n\t\t\t\t\ta2 = 1 - a1;\n\t\t\t\tdst[i] = a1 * dr + a2 * br;\n\t\t\t\tdst[i + 1] = a1 * dg + a2 * bg;\n\t\t\t\tdst[i + 2] = a1 * db + a2 * bb;\n\t\t\t\tdst[i + 3] = sa * alpha + a2 * ba;\n\t\t\t}\n\t\t\tdstContext.putImageData(dstData, offset.x, offset.y);\n\t\t}\n\t};\n};\n\nvar SVGStyles = Base.each({\n\tfillColor: ['fill', 'color'],\n\tstrokeColor: ['stroke', 'color'],\n\tstrokeWidth: ['stroke-width', 'number'],\n\tstrokeCap: ['stroke-linecap', 'string'],\n\tstrokeJoin: ['stroke-linejoin', 'string'],\n\tstrokeScaling: ['vector-effect', 'lookup', {\n\t\ttrue: 'none',\n\t\tfalse: 'non-scaling-stroke'\n\t}, function(item, value) {\n\t\treturn !value\n\t\t\t\t&& (item instanceof PathItem\n\t\t\t\t\t|| item instanceof Shape\n\t\t\t\t\t|| item instanceof TextItem);\n\t}],\n\tmiterLimit: ['stroke-miterlimit', 'number'],\n\tdashArray: ['stroke-dasharray', 'array'],\n\tdashOffset: ['stroke-dashoffset', 'number'],\n\tfontFamily: ['font-family', 'string'],\n\tfontWeight: ['font-weight', 'string'],\n\tfontSize: ['font-size', 'number'],\n\tjustification: ['text-anchor', 'lookup', {\n\t\tleft: 'start',\n\t\tcenter: 'middle',\n\t\tright: 'end'\n\t}],\n\topacity: ['opacity', 'number'],\n\tblendMode: ['mix-blend-mode', 'string']\n}, function(entry, key) {\n\tvar part = Base.capitalize(key),\n\t\tlookup = entry[2];\n\tthis[key] = {\n\t\ttype: entry[1],\n\t\tproperty: key,\n\t\tattribute: entry[0],\n\t\ttoSVG: lookup,\n\t\tfromSVG: lookup && Base.each(lookup, function(value, name) {\n\t\t\tthis[value] = name;\n\t\t}, {}),\n\t\texportFilter: entry[3],\n\t\tget: 'get' + part,\n\t\tset: 'set' + part\n\t};\n}, {});\n\nvar SVGNamespaces = {\n\thref: 'http://www.w3.org/1999/xlink',\n\txlink: 'http://www.w3.org/2000/xmlns'\n};\n\nnew function() {\n\tvar formatter;\n\n\tfunction setAttributes(node, attrs) {\n\t\tfor (var key in attrs) {\n\t\t\tvar val = attrs[key],\n\t\t\t\tnamespace = SVGNamespaces[key];\n\t\t\tif (typeof val === 'number')\n\t\t\t\tval = formatter.number(val);\n\t\t\tif (namespace) {\n\t\t\t\tnode.setAttributeNS(namespace, key, val);\n\t\t\t} else {\n\t\t\t\tnode.setAttribute(key, val);\n\t\t\t}\n\t\t}\n\t\treturn node;\n\t}\n\n\tfunction createElement(tag, attrs) {\n\t\treturn setAttributes(\n\t\t\tdocument.createElementNS('http://www.w3.org/2000/svg', tag), attrs);\n\t}\n\n\tfunction getTransform(matrix, coordinates, center) {\n\t\tvar attrs = new Base(),\n\t\t\ttrans = matrix.getTranslation();\n\t\tif (coordinates) {\n\t\t\tmatrix = matrix.shiftless();\n\t\t\tvar point = matrix._inverseTransform(trans);\n\t\t\tattrs[center ? 'cx' : 'x'] = point.x;\n\t\t\tattrs[center ? 'cy' : 'y'] = point.y;\n\t\t\ttrans = null;\n\t\t}\n\t\tif (!matrix.isIdentity()) {\n\t\t\tvar decomposed = matrix.decompose();\n\t\t\tif (decomposed && !decomposed.shearing) {\n\t\t\t\tvar parts = [],\n\t\t\t\t\tangle = decomposed.rotation,\n\t\t\t\t\tscale = decomposed.scaling;\n\t\t\t\tif (trans && !trans.isZero())\n\t\t\t\t\tparts.push('translate(' + formatter.point(trans) + ')');\n\t\t\t\tif (!Numerical.isZero(scale.x - 1)\n\t\t\t\t\t\t|| !Numerical.isZero(scale.y - 1))\n\t\t\t\t\tparts.push('scale(' + formatter.point(scale) +')');\n\t\t\t\tif (angle)\n\t\t\t\t\tparts.push('rotate(' + formatter.number(angle) + ')');\n\t\t\t\tattrs.transform = parts.join(' ');\n\t\t\t} else {\n\t\t\t\tattrs.transform = 'matrix(' + matrix.getValues().join(',') + ')';\n\t\t\t}\n\t\t}\n\t\treturn attrs;\n\t}\n\n\tfunction exportGroup(item, options) {\n\t\tvar attrs = getTransform(item._matrix),\n\t\t\tchildren = item._children;\n\t\tvar node = createElement('g', attrs);\n\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\tvar child = children[i];\n\t\t\tvar childNode = exportSVG(child, options);\n\t\t\tif (childNode) {\n\t\t\t\tif (child.isClipMask()) {\n\t\t\t\t\tvar clip = createElement('clipPath');\n\t\t\t\t\tclip.appendChild(childNode);\n\t\t\t\t\tsetDefinition(child, clip, 'clip');\n\t\t\t\t\tsetAttributes(node, {\n\t\t\t\t\t\t'clip-path': 'url(#' + clip.id + ')'\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn node;\n\t}\n\n\tfunction exportRaster(item) {\n\t\tvar attrs = getTransform(item._matrix, true),\n\t\t\tsize = item.getSize();\n\t\tattrs.x -= size.width / 2;\n\t\tattrs.y -= size.height / 2;\n\t\tattrs.width = size.width;\n\t\tattrs.height = size.height;\n\t\tattrs.href = item.toDataURL();\n\t\treturn createElement('image', attrs);\n\t}\n\n\tfunction exportPath(item, options) {\n\t\tif (options.matchShapes) {\n\t\t\tvar shape = item.toShape(false);\n\t\t\tif (shape)\n\t\t\t\treturn exportShape(shape, options);\n\t\t}\n\t\tvar segments = item._segments,\n\t\t\ttype,\n\t\t\tattrs = getTransform(item._matrix);\n\t\tif (segments.length === 0)\n\t\t\treturn null;\n\t\tif (item.isPolygon()) {\n\t\t\tif (segments.length >= 3) {\n\t\t\t\ttype = item._closed ? 'polygon' : 'polyline';\n\t\t\t\tvar parts = [];\n\t\t\t\tfor(i = 0, l = segments.length; i < l; i++)\n\t\t\t\t\tparts.push(formatter.point(segments[i]._point));\n\t\t\t\tattrs.points = parts.join(' ');\n\t\t\t} else {\n\t\t\t\ttype = 'line';\n\t\t\t\tvar first = segments[0]._point,\n\t\t\t\t\tlast = segments[segments.length - 1]._point;\n\t\t\t\tattrs.set({\n\t\t\t\t\tx1: first.x,\n\t\t\t\t\ty1: first.y,\n\t\t\t\t\tx2: last.x,\n\t\t\t\t\ty2: last.y\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\ttype = 'path';\n\t\t\tattrs.d = item.getPathData(null, options.precision);\n\t\t}\n\t\treturn createElement(type, attrs);\n\t}\n\n\tfunction exportShape(item) {\n\t\tvar type = item._type,\n\t\t\tradius = item._radius,\n\t\t\tattrs = getTransform(item._matrix, true, type !== 'rectangle');\n\t\tif (type === 'rectangle') {\n\t\t\ttype = 'rect';\n\t\t\tvar size = item._size,\n\t\t\t\twidth = size.width,\n\t\t\t\theight = size.height;\n\t\t\tattrs.x -= width / 2;\n\t\t\tattrs.y -= height / 2;\n\t\t\tattrs.width = width;\n\t\t\tattrs.height = height;\n\t\t\tif (radius.isZero())\n\t\t\t\tradius = null;\n\t\t}\n\t\tif (radius) {\n\t\t\tif (type === 'circle') {\n\t\t\t\tattrs.r = radius;\n\t\t\t} else {\n\t\t\t\tattrs.rx = radius.width;\n\t\t\t\tattrs.ry = radius.height;\n\t\t\t}\n\t\t}\n\t\treturn createElement(type, attrs);\n\t}\n\n\tfunction exportCompoundPath(item, options) {\n\t\tvar attrs = getTransform(item._matrix);\n\t\tvar data = item.getPathData(null, options.precision);\n\t\tif (data)\n\t\t\tattrs.d = data;\n\t\treturn createElement('path', attrs);\n\t}\n\n\tfunction exportPlacedSymbol(item, options) {\n\t\tvar attrs = getTransform(item._matrix, true),\n\t\t\tsymbol = item.getSymbol(),\n\t\t\tsymbolNode = getDefinition(symbol, 'symbol'),\n\t\t\tdefinition = symbol.getDefinition(),\n\t\t\tbounds = definition.getBounds();\n\t\tif (!symbolNode) {\n\t\t\tsymbolNode = createElement('symbol', {\n\t\t\t\tviewBox: formatter.rectangle(bounds)\n\t\t\t});\n\t\t\tsymbolNode.appendChild(exportSVG(definition, options));\n\t\t\tsetDefinition(symbol, symbolNode, 'symbol');\n\t\t}\n\t\tattrs.href = '#' + symbolNode.id;\n\t\tattrs.x += bounds.x;\n\t\tattrs.y += bounds.y;\n\t\tattrs.width = formatter.number(bounds.width);\n\t\tattrs.height = formatter.number(bounds.height);\n\t\tattrs.overflow = 'visible';\n\t\treturn createElement('use', attrs);\n\t}\n\n\tfunction exportGradient(color) {\n\t\tvar gradientNode = getDefinition(color, 'color');\n\t\tif (!gradientNode) {\n\t\t\tvar gradient = color.getGradient(),\n\t\t\t\tradial = gradient._radial,\n\t\t\t\torigin = color.getOrigin().transform(),\n\t\t\t\tdestination = color.getDestination().transform(),\n\t\t\t\tattrs;\n\t\t\tif (radial) {\n\t\t\t\tattrs = {\n\t\t\t\t\tcx: origin.x,\n\t\t\t\t\tcy: origin.y,\n\t\t\t\t\tr: origin.getDistance(destination)\n\t\t\t\t};\n\t\t\t\tvar highlight = color.getHighlight();\n\t\t\t\tif (highlight) {\n\t\t\t\t\thighlight = highlight.transform();\n\t\t\t\t\tattrs.fx = highlight.x;\n\t\t\t\t\tattrs.fy = highlight.y;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tattrs = {\n\t\t\t\t\tx1: origin.x,\n\t\t\t\t\ty1: origin.y,\n\t\t\t\t\tx2: destination.x,\n\t\t\t\t\ty2: destination.y\n\t\t\t\t};\n\t\t\t}\n\t\t\tattrs.gradientUnits = 'userSpaceOnUse';\n\t\t\tgradientNode = createElement(\n\t\t\t\t\t(radial ? 'radial' : 'linear') + 'Gradient', attrs);\n\t\t\tvar stops = gradient._stops;\n\t\t\tfor (var i = 0, l = stops.length; i < l; i++) {\n\t\t\t\tvar stop = stops[i],\n\t\t\t\t\tstopColor = stop._color,\n\t\t\t\t\talpha = stopColor.getAlpha();\n\t\t\t\tattrs = {\n\t\t\t\t\toffset: stop._rampPoint,\n\t\t\t\t\t'stop-color': stopColor.toCSS(true)\n\t\t\t\t};\n\t\t\t\tif (alpha < 1)\n\t\t\t\t\tattrs['stop-opacity'] = alpha;\n\t\t\t\tgradientNode.appendChild(createElement('stop', attrs));\n\t\t\t}\n\t\t\tsetDefinition(color, gradientNode, 'color');\n\t\t}\n\t\treturn 'url(#' + gradientNode.id + ')';\n\t}\n\n\tfunction exportText(item) {\n\t\tvar node = createElement('text', getTransform(item._matrix, true));\n\t\tnode.textContent = item._content;\n\t\treturn node;\n\t}\n\n\tvar exporters = {\n\t\tGroup: exportGroup,\n\t\tLayer: exportGroup,\n\t\tRaster: exportRaster,\n\t\tPath: exportPath,\n\t\tShape: exportShape,\n\t\tCompoundPath: exportCompoundPath,\n\t\tPlacedSymbol: exportPlacedSymbol,\n\t\tPointText: exportText\n\t};\n\n\tfunction applyStyle(item, node, isRoot) {\n\t\tvar attrs = {},\n\t\t\tparent = !isRoot && item.getParent();\n\n\t\tif (item._name != null)\n\t\t\tattrs.id = item._name;\n\n\t\tBase.each(SVGStyles, function(entry) {\n\t\t\tvar get = entry.get,\n\t\t\t\ttype = entry.type,\n\t\t\t\tvalue = item[get]();\n\t\t\tif (entry.exportFilter\n\t\t\t\t\t? entry.exportFilter(item, value)\n\t\t\t\t\t: !parent || !Base.equals(parent[get](), value)) {\n\t\t\t\tif (type === 'color' && value != null) {\n\t\t\t\t\tvar alpha = value.getAlpha();\n\t\t\t\t\tif (alpha < 1)\n\t\t\t\t\t\tattrs[entry.attribute + '-opacity'] = alpha;\n\t\t\t\t}\n\t\t\t\tattrs[entry.attribute] = value == null\n\t\t\t\t\t? 'none'\n\t\t\t\t\t: type === 'number'\n\t\t\t\t\t\t? formatter.number(value)\n\t\t\t\t\t\t: type === 'color'\n\t\t\t\t\t\t\t? value.gradient\n\t\t\t\t\t\t\t\t? exportGradient(value, item)\n\t\t\t\t\t\t\t\t: value.toCSS(true)\n\t\t\t\t\t\t\t: type === 'array'\n\t\t\t\t\t\t\t\t? value.join(',')\n\t\t\t\t\t\t\t\t: type === 'lookup'\n\t\t\t\t\t\t\t\t\t? entry.toSVG[value]\n\t\t\t\t\t\t\t\t\t: value;\n\t\t\t}\n\t\t});\n\n\t\tif (attrs.opacity === 1)\n\t\t\tdelete attrs.opacity;\n\n\t\tif (!item._visible)\n\t\t\tattrs.visibility = 'hidden';\n\n\t\treturn setAttributes(node, attrs);\n\t}\n\n\tvar definitions;\n\tfunction getDefinition(item, type) {\n\t\tif (!definitions)\n\t\t\tdefinitions = { ids: {}, svgs: {} };\n\t\treturn item && definitions.svgs[type + '-' + item._id];\n\t}\n\n\tfunction setDefinition(item, node, type) {\n\t\tif (!definitions)\n\t\t\tgetDefinition();\n\t\tvar id = definitions.ids[type] = (definitions.ids[type] || 0) + 1;\n\t\tnode.id = type + '-' + id;\n\t\tdefinitions.svgs[type + '-' + item._id] = node;\n\t}\n\n\tfunction exportDefinitions(node, options) {\n\t\tvar svg = node,\n\t\t\tdefs = null;\n\t\tif (definitions) {\n\t\t\tsvg = node.nodeName.toLowerCase() === 'svg' && node;\n\t\t\tfor (var i in definitions.svgs) {\n\t\t\t\tif (!defs) {\n\t\t\t\t\tif (!svg) {\n\t\t\t\t\t\tsvg = createElement('svg');\n\t\t\t\t\t\tsvg.appendChild(node);\n\t\t\t\t\t}\n\t\t\t\t\tdefs = svg.insertBefore(createElement('defs'),\n\t\t\t\t\t\t\tsvg.firstChild);\n\t\t\t\t}\n\t\t\t\tdefs.appendChild(definitions.svgs[i]);\n\t\t\t}\n\t\t\tdefinitions = null;\n\t\t}\n\t\treturn options.asString\n\t\t\t\t? new XMLSerializer().serializeToString(svg)\n\t\t\t\t: svg;\n\t}\n\n\tfunction exportSVG(item, options, isRoot) {\n\t\tvar exporter = exporters[item._class],\n\t\t\tnode = exporter && exporter(item, options);\n\t\tif (node) {\n\t\t\tvar onExport = options.onExport;\n\t\t\tif (onExport)\n\t\t\t\tnode = onExport(item, node, options) || node;\n\t\t\tvar data = JSON.stringify(item._data);\n\t\t\tif (data && data !== '{}' && data !== 'null')\n\t\t\t\tnode.setAttribute('data-paper-data', data);\n\t\t}\n\t\treturn node && applyStyle(item, node, isRoot);\n\t}\n\n\tfunction setOptions(options) {\n\t\tif (!options)\n\t\t\toptions = {};\n\t\tformatter = new Formatter(options.precision);\n\t\treturn options;\n\t}\n\n\tItem.inject({\n\t\texportSVG: function(options) {\n\t\t\toptions = setOptions(options);\n\t\t\treturn exportDefinitions(exportSVG(this, options, true), options);\n\t\t}\n\t});\n\n\tProject.inject({\n\t\texportSVG: function(options) {\n\t\t\toptions = setOptions(options);\n\t\t\tvar layers = this.layers,\n\t\t\t\tview = this.getView(),\n\t\t\t\tsize = view.getViewSize(),\n\t\t\t\tnode = createElement('svg', {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t\twidth: size.width,\n\t\t\t\t\theight: size.height,\n\t\t\t\t\tversion: '1.1',\n\t\t\t\t\txmlns: 'http://www.w3.org/2000/svg',\n\t\t\t\t\t'xmlns:xlink': 'http://www.w3.org/1999/xlink'\n\t\t\t\t}),\n\t\t\t\tparent = node,\n\t\t\t\tmatrix = view._matrix;\n\t\t\tif (!matrix.isIdentity())\n\t\t\t\tparent = node.appendChild(\n\t\t\t\t\t\tcreateElement('g', getTransform(matrix)));\n\t\t\tfor (var i = 0, l = layers.length; i < l; i++)\n\t\t\t\tparent.appendChild(exportSVG(layers[i], options, true));\n\t\t\treturn exportDefinitions(node, options);\n\t\t}\n\t});\n};\n\nnew function() {\n\n\tfunction getValue(node, name, isString, allowNull) {\n\t\tvar namespace = SVGNamespaces[name],\n\t\t\tvalue = namespace\n\t\t\t\t? node.getAttributeNS(namespace, name)\n\t\t\t\t: node.getAttribute(name);\n\t\tif (value === 'null')\n\t\t\tvalue = null;\n\t\treturn value == null\n\t\t\t\t? allowNull\n\t\t\t\t\t? null\n\t\t\t\t\t: isString\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: 0\n\t\t\t\t: isString\n\t\t\t\t\t? value\n\t\t\t\t\t: parseFloat(value);\n\t}\n\n\tfunction getPoint(node, x, y, allowNull) {\n\t\tx = getValue(node, x, false, allowNull);\n\t\ty = getValue(node, y, false, allowNull);\n\t\treturn allowNull && (x == null || y == null) ? null\n\t\t\t\t: new Point(x, y);\n\t}\n\n\tfunction getSize(node, w, h, allowNull) {\n\t\tw = getValue(node, w, false, allowNull);\n\t\th = getValue(node, h, false, allowNull);\n\t\treturn allowNull && (w == null || h == null) ? null\n\t\t\t\t: new Size(w, h);\n\t}\n\n\tfunction convertValue(value, type, lookup) {\n\t\treturn value === 'none'\n\t\t\t\t? null\n\t\t\t\t: type === 'number'\n\t\t\t\t\t? parseFloat(value)\n\t\t\t\t\t: type === 'array'\n\t\t\t\t\t\t? value ? value.split(/[\\s,]+/g).map(parseFloat) : []\n\t\t\t\t\t\t: type === 'color'\n\t\t\t\t\t\t\t? getDefinition(value) || value\n\t\t\t\t\t\t\t: type === 'lookup'\n\t\t\t\t\t\t\t\t? lookup[value]\n\t\t\t\t\t\t\t\t: value;\n\t}\n\n\tfunction importGroup(node, type, options, isRoot) {\n\t\tvar nodes = node.childNodes,\n\t\t\tisClip = type === 'clippath',\n\t\t\titem = new Group(),\n\t\t\tproject = item._project,\n\t\t\tcurrentStyle = project._currentStyle,\n\t\t\tchildren = [];\n\t\tif (!isClip) {\n\t\t\titem = applyAttributes(item, node, isRoot);\n\t\t\tproject._currentStyle = item._style.clone();\n\t\t}\n\t\tfor (var i = 0, l = nodes.length; i < l; i++) {\n\t\t\tvar childNode = nodes[i],\n\t\t\t\tchild;\n\t\t\tif (childNode.nodeType === 1\n\t\t\t\t\t&& (child = importSVG(childNode, options, false))\n\t\t\t\t\t&& !(child instanceof Symbol))\n\t\t\t\tchildren.push(child);\n\t\t}\n\t\titem.addChildren(children);\n\t\tif (isClip)\n\t\t\titem = applyAttributes(item.reduce(), node, isRoot);\n\t\tproject._currentStyle = currentStyle;\n\t\tif (isClip || type === 'defs') {\n\t\t\titem.remove();\n\t\t\titem = null;\n\t\t}\n\t\treturn item;\n\t}\n\n\tfunction importPoly(node, type) {\n\t\tvar coords = node.getAttribute('points').match(\n\t\t\t\t\t/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g),\n\t\t\tpoints = [];\n\t\tfor (var i = 0, l = coords.length; i < l; i += 2)\n\t\t\tpoints.push(new Point(\n\t\t\t\t\tparseFloat(coords[i]),\n\t\t\t\t\tparseFloat(coords[i + 1])));\n\t\tvar path = new Path(points);\n\t\tif (type === 'polygon')\n\t\t\tpath.closePath();\n\t\treturn path;\n\t}\n\n\tfunction importPath(node) {\n\t\tvar data = node.getAttribute('d'),\n\t\t\tparam = { pathData: data };\n\t\treturn (data.match(/m/gi) || []).length > 1 || /z\\S+/i.test(data)\n\t\t\t\t? new CompoundPath(param)\n\t\t\t\t: new Path(param);\n\t}\n\n\tfunction importGradient(node, type) {\n\t\tvar id = (getValue(node, 'href', true) || '').substring(1),\n\t\t\tisRadial = type === 'radialgradient',\n\t\t\tgradient;\n\t\tif (id) {\n\t\t\tgradient = definitions[id].getGradient();\n\t\t} else {\n\t\t\tvar nodes = node.childNodes,\n\t\t\t\tstops = [];\n\t\t\tfor (var i = 0, l = nodes.length; i < l; i++) {\n\t\t\t\tvar child = nodes[i];\n\t\t\t\tif (child.nodeType === 1)\n\t\t\t\t\tstops.push(applyAttributes(new GradientStop(), child));\n\t\t\t}\n\t\t\tgradient = new Gradient(stops, isRadial);\n\t\t}\n\t\tvar origin, destination, highlight;\n\t\tif (isRadial) {\n\t\t\torigin = getPoint(node, 'cx', 'cy');\n\t\t\tdestination = origin.add(getValue(node, 'r'), 0);\n\t\t\thighlight = getPoint(node, 'fx', 'fy', true);\n\t\t} else {\n\t\t\torigin = getPoint(node, 'x1', 'y1');\n\t\t\tdestination = getPoint(node, 'x2', 'y2');\n\t\t}\n\t\tapplyAttributes(\n\t\t\tnew Color(gradient, origin, destination, highlight), node);\n\t\treturn null;\n\t}\n\n\tvar importers = {\n\t\t'#document': function (node, type, options, isRoot) {\n\t\t\tvar nodes = node.childNodes;\n\t\t\tfor (var i = 0, l = nodes.length; i < l; i++) {\n\t\t\t\tvar child = nodes[i];\n\t\t\t\tif (child.nodeType === 1) {\n\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\tdocument.body.appendChild(child);\n\t\t\t\t\tvar item = importSVG(child, options, isRoot);\n\t\t\t\t\tif (next) {\n\t\t\t\t\t\tnode.insertBefore(child, next);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode.appendChild(child);\n\t\t\t\t\t}\n\t\t\t\t\treturn item;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tg: importGroup,\n\t\tsvg: importGroup,\n\t\tclippath: importGroup,\n\t\tpolygon: importPoly,\n\t\tpolyline: importPoly,\n\t\tpath: importPath,\n\t\tlineargradient: importGradient,\n\t\tradialgradient: importGradient,\n\n\t\timage: function (node) {\n\t\t\tvar raster = new Raster(getValue(node, 'href', true));\n\t\t\traster.on('load', function() {\n\t\t\t\tvar size = getSize(node, 'width', 'height');\n\t\t\t\tthis.setSize(size);\n\t\t\t\tvar center = this._matrix._transformPoint(\n\t\t\t\t\t\tgetPoint(node, 'x', 'y').add(size.divide(2)));\n\t\t\t\tthis.translate(center);\n\t\t\t});\n\t\t\treturn raster;\n\t\t},\n\n\t\tsymbol: function(node, type, options, isRoot) {\n\t\t\treturn new Symbol(importGroup(node, type, options, isRoot), true);\n\t\t},\n\n\t\tdefs: importGroup,\n\n\t\tuse: function(node) {\n\t\t\tvar id = (getValue(node, 'href', true) || '').substring(1),\n\t\t\t\tdefinition = definitions[id],\n\t\t\t\tpoint = getPoint(node, 'x', 'y');\n\t\t\treturn definition\n\t\t\t\t\t? definition instanceof Symbol\n\t\t\t\t\t\t? definition.place(point)\n\t\t\t\t\t\t: definition.clone().translate(point)\n\t\t\t\t\t: null;\n\t\t},\n\n\t\tcircle: function(node) {\n\t\t\treturn new Shape.Circle(getPoint(node, 'cx', 'cy'),\n\t\t\t\t\tgetValue(node, 'r'));\n\t\t},\n\n\t\tellipse: function(node) {\n\t\t\treturn new Shape.Ellipse({\n\t\t\t\tcenter: getPoint(node, 'cx', 'cy'),\n\t\t\t\tradius: getSize(node, 'rx', 'ry')\n\t\t\t});\n\t\t},\n\n\t\trect: function(node) {\n\t\t\tvar point = getPoint(node, 'x', 'y'),\n\t\t\t\tsize = getSize(node, 'width', 'height'),\n\t\t\t\tradius = getSize(node, 'rx', 'ry');\n\t\t\treturn new Shape.Rectangle(new Rectangle(point, size), radius);\n\t\t},\n\n\t\tline: function(node) {\n\t\t\treturn new Path.Line(getPoint(node, 'x1', 'y1'),\n\t\t\t\t\tgetPoint(node, 'x2', 'y2'));\n\t\t},\n\n\t\ttext: function(node) {\n\t\t\tvar text = new PointText(getPoint(node, 'x', 'y')\n\t\t\t\t\t.add(getPoint(node, 'dx', 'dy')));\n\t\t\ttext.setContent(node.textContent.trim() || '');\n\t\t\treturn text;\n\t\t}\n\t};\n\n\tfunction applyTransform(item, value, name, node) {\n\t\tvar transforms = (node.getAttribute(name) || '').split(/\\)\\s*/g),\n\t\t\tmatrix = new Matrix();\n\t\tfor (var i = 0, l = transforms.length; i < l; i++) {\n\t\t\tvar transform = transforms[i];\n\t\t\tif (!transform)\n\t\t\t\tbreak;\n\t\t\tvar parts = transform.split(/\\(\\s*/),\n\t\t\t\tcommand = parts[0],\n\t\t\t\tv = parts[1].split(/[\\s,]+/g);\n\t\t\tfor (var j = 0, m = v.length; j < m; j++)\n\t\t\t\tv[j] = parseFloat(v[j]);\n\t\t\tswitch (command) {\n\t\t\tcase 'matrix':\n\t\t\t\tmatrix.concatenate(\n\t\t\t\t\t\tnew Matrix(v[0], v[1], v[2], v[3], v[4], v[5]));\n\t\t\t\tbreak;\n\t\t\tcase 'rotate':\n\t\t\t\tmatrix.rotate(v[0], v[1], v[2]);\n\t\t\t\tbreak;\n\t\t\tcase 'translate':\n\t\t\t\tmatrix.translate(v[0], v[1]);\n\t\t\t\tbreak;\n\t\t\tcase 'scale':\n\t\t\t\tmatrix.scale(v);\n\t\t\t\tbreak;\n\t\t\tcase 'skewX':\n\t\t\t\tmatrix.skew(v[0], 0);\n\t\t\t\tbreak;\n\t\t\tcase 'skewY':\n\t\t\t\tmatrix.skew(0, v[0]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\titem.transform(matrix);\n\t}\n\n\tfunction applyOpacity(item, value, name) {\n\t\tvar color = item[name === 'fill-opacity' ? 'getFillColor'\n\t\t\t\t: 'getStrokeColor']();\n\t\tif (color)\n\t\t\tcolor.setAlpha(parseFloat(value));\n\t}\n\n\tvar attributes = Base.each(SVGStyles, function(entry) {\n\t\tthis[entry.attribute] = function(item, value) {\n\t\t\titem[entry.set](convertValue(value, entry.type, entry.fromSVG));\n\t\t\tif (entry.type === 'color' && item instanceof Shape) {\n\t\t\t\tvar color = item[entry.get]();\n\t\t\t\tif (color)\n\t\t\t\t\tcolor.transform(new Matrix().translate(\n\t\t\t\t\t\t\titem.getPosition(true).negate()));\n\t\t\t}\n\t\t};\n\t}, {\n\t\tid: function(item, value) {\n\t\t\tdefinitions[value] = item;\n\t\t\tif (item.setName)\n\t\t\t\titem.setName(value);\n\t\t},\n\n\t\t'clip-path': function(item, value) {\n\t\t\tvar clip = getDefinition(value);\n\t\t\tif (clip) {\n\t\t\t\tclip = clip.clone();\n\t\t\t\tclip.setClipMask(true);\n\t\t\t\tif (item instanceof Group) {\n\t\t\t\t\titem.insertChild(0, clip);\n\t\t\t\t} else {\n\t\t\t\t\treturn new Group(clip, item);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tgradientTransform: applyTransform,\n\t\ttransform: applyTransform,\n\n\t\t'fill-opacity': applyOpacity,\n\t\t'stroke-opacity': applyOpacity,\n\n\t\tvisibility: function(item, value) {\n\t\t\titem.setVisible(value === 'visible');\n\t\t},\n\n\t\tdisplay: function(item, value) {\n\t\t\titem.setVisible(value !== null);\n\t\t},\n\n\t\t'stop-color': function(item, value) {\n\t\t\tif (item.setColor)\n\t\t\t\titem.setColor(value);\n\t\t},\n\n\t\t'stop-opacity': function(item, value) {\n\t\t\tif (item._color)\n\t\t\t\titem._color.setAlpha(parseFloat(value));\n\t\t},\n\n\t\toffset: function(item, value) {\n\t\t\tvar percentage = value.match(/(.*)%$/);\n\t\t\titem.setRampPoint(percentage\n\t\t\t\t\t? percentage[1] / 100\n\t\t\t\t\t: parseFloat(value));\n\t\t},\n\n\t\tviewBox: function(item, value, name, node, styles) {\n\t\t\tvar rect = new Rectangle(convertValue(value, 'array')),\n\t\t\t\tsize = getSize(node, 'width', 'height', true);\n\t\t\tif (item instanceof Group) {\n\t\t\t\tvar scale = size ? rect.getSize().divide(size) : 1,\n\t\t\t\t\tmatrix = new Matrix().translate(rect.getPoint()).scale(scale);\n\t\t\t\titem.transform(matrix.inverted());\n\t\t\t} else if (item instanceof Symbol) {\n\t\t\t\tif (size)\n\t\t\t\t\trect.setSize(size);\n\t\t\t\tvar clip = getAttribute(node, 'overflow', styles) != 'visible',\n\t\t\t\t\tgroup = item._definition;\n\t\t\t\tif (clip && !rect.contains(group.getBounds())) {\n\t\t\t\t\tclip = new Shape.Rectangle(rect).transform(group._matrix);\n\t\t\t\t\tclip.setClipMask(true);\n\t\t\t\t\tgroup.addChild(clip);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction getAttribute(node, name, styles) {\n\t\tvar attr = node.attributes[name],\n\t\t\tvalue = attr && attr.value;\n\t\tif (!value) {\n\t\t\tvar style = Base.camelize(name);\n\t\t\tvalue = node.style[style];\n\t\t\tif (!value && styles.node[style] !== styles.parent[style])\n\t\t\t\tvalue = styles.node[style];\n\t\t}\n\t\treturn !value\n\t\t\t\t? undefined\n\t\t\t\t: value === 'none'\n\t\t\t\t\t? null\n\t\t\t\t\t: value;\n\t}\n\n\tfunction applyAttributes(item, node, isRoot) {\n\t\tvar styles = {\n\t\t\tnode: DomElement.getStyles(node) || {},\n\t\t\tparent: !isRoot && DomElement.getStyles(node.parentNode) || {}\n\t\t};\n\t\tBase.each(attributes, function(apply, name) {\n\t\t\tvar value = getAttribute(node, name, styles);\n\t\t\tif (value !== undefined)\n\t\t\t\titem = Base.pick(apply(item, value, name, node, styles), item);\n\t\t});\n\t\treturn item;\n\t}\n\n\tvar definitions = {};\n\tfunction getDefinition(value) {\n\t\tvar match = value && value.match(/\\((?:#|)([^)']+)/);\n\t\treturn match && definitions[match[1]];\n\t}\n\n\tfunction importSVG(source, options, isRoot) {\n\t\tif (!source)\n\t\t\treturn null;\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t} else if (typeof options === 'function') {\n\t\t\toptions = { onLoad: options };\n\t\t}\n\n\t\tvar node = source,\n\t\t\tscope = paper;\n\n\t\tfunction onLoadCallback(svg) {\n\t\t\tpaper = scope;\n\t\t\tvar item = importSVG(svg, options, isRoot),\n\t\t\t\tonLoad = options.onLoad,\n\t\t\t\tview = scope.project && scope.getView();\n\t\t\tif (onLoad)\n\t\t\t\tonLoad.call(this, item);\n\t\t\tview.update();\n\t\t}\n\n\t\tif (isRoot) {\n\t\t\tif (typeof source === 'string' && !/^.*</.test(source)) {\n\t\t\t\tnode = document.getElementById(source);\n\t\t\t\tif (node) {\n\t\t\t\t\tsource = null;\n\t\t\t\t} else {\n\t\t\t\t\treturn Http.request('get', source, onLoadCallback);\n\t\t\t\t}\n\t\t\t} else if (typeof File !== 'undefined' && source instanceof File) {\n\t\t\t\tvar reader = new FileReader();\n\t\t\t\treader.onload = function() {\n\t\t\t\t\tonLoadCallback(reader.result);\n\t\t\t\t};\n\t\t\t\treturn reader.readAsText(source);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof source === 'string')\n\t\t\tnode = new DOMParser().parseFromString(source, 'image/svg+xml');\n\t\tif (!node.nodeName)\n\t\t\tthrow new Error('Unsupported SVG source: ' + source);\n\t\tvar type = node.nodeName.toLowerCase(),\n\t\t\timporter = importers[type],\n\t\t\titem,\n\t\t\tdata = node.getAttribute && node.getAttribute('data-paper-data'),\n\t\t\tsettings = scope.settings,\n\t\t\tapplyMatrix = settings.applyMatrix;\n\t\tsettings.applyMatrix = false;\n\t\titem = importer && importer(node, type, options, isRoot) || null;\n\t\tsettings.applyMatrix = applyMatrix;\n\t\tif (item) {\n\t\t\tif (type !== '#document' && !(item instanceof Group))\n\t\t\t\titem = applyAttributes(item, node, isRoot);\n\t\t\tvar onImport = options.onImport;\n\t\t\tif (onImport)\n\t\t\t\titem = onImport(node, item, options) || item;\n\t\t\tif (options.expandShapes && item instanceof Shape) {\n\t\t\t\titem.remove();\n\t\t\t\titem = item.toPath();\n\t\t\t}\n\t\t\tif (data)\n\t\t\t\titem._data = JSON.parse(data);\n\t\t}\n\t\tif (isRoot) {\n\t\t\tdefinitions = {};\n\t\t\tif (applyMatrix && item)\n\t\t\t\titem.matrix.apply(true, true);\n\t\t}\n\t\treturn item;\n\t}\n\n\tItem.inject({\n\t\timportSVG: function(node, options) {\n\t\t\treturn this.addChild(importSVG(node, options, true));\n\t\t}\n\t});\n\n\tProject.inject({\n\t\timportSVG: function(node, options) {\n\t\t\tthis.activate();\n\t\t\treturn importSVG(node, options, true);\n\t\t}\n\t});\n};\n\npaper = new (PaperScope.inject(Base.exports, {\n\tenumerable: true,\n\tBase: Base,\n\tNumerical: Numerical,\n\tKey: Key\n}))();\n\nif (typeof define === 'function' && define.amd) {\n\tdefine('paper', paper);\n} else if (typeof module === 'object' && module) {\n\tmodule.exports = paper;\n}\n\nreturn paper;\n};\n","function Collection( args ) {\n\t// already a Collection? Job's done\n\tif ( arguments.length === 1 && args instanceof Collection ) {\n\t\treturn args;\n\n\t} else if ( arguments.length > 1 || !Array.isArray( args ) ) {\n\t\targs = [].slice.call( arguments, 0 );\n\t}\n\n\tthis.length = 0;\n\n\targs.forEach(function( arg ) {\n\t\t// unwrap any collection\n\t\tif ( arg instanceof Collection ) {\n\t\t\tfor ( var i = -1; ++i < arg.length; ) {\n\t\t\t\tthis[this.length++] = arg[i];\n\t\t\t}\n\n\t\t} else {\n\t\t\tthis[this.length++] = arg;\n\t\t}\n\n\t}, this);\n\n\treturn this;\n}\n\nCollection.prototype.forEach = function(cb, scope) {\n\tfor ( var i = -1; ++i < this.length; ) {\n\t\tcb.call(scope || this[i], this[i], i, this);\n\t}\n\n\treturn this;\n};\n\nCollection.prototype.prop = function(name, val) {\n\tvar i;\n\n\t// object setter\n\tif ( typeof name === 'object' ) {\n\t\tfor ( i = -1; ++i < this.length; ) {\n\t\t\tthis[i].set( name );\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t// getter\n\tif ( val === undefined ) {\n\t\treturn this[0][name];\n\t}\n\n\t// simple setter\n\tfor ( i = -1; ++i < this.length; ) {\n\t\tthis[i][name] = val;\n\t}\n\n\treturn this;\n};\n\nfunction wrapConstructor( constructor, prototype, useConstructed ) {\n\treturn function wrapper() {\n\t\tvar c,\n\t\t\ttmp,\n\t\t\tarr = [];\n\n\t\t// constructor used with new\n\t\tif ( this instanceof wrapper ) {\n\t\t\t// proxy to paper native constructor\n\t\t\tc = Object.create(prototype);\n\t\t\ttmp = constructor.apply(c, arguments);\n\t\t\treturn useConstructed ?\n\t\t\t\ttmp : c;\n\n\t\t// without new, build a collection\n\t\t} else {\n\t\t\tif ( Array.isArray( arguments[0] ) ) {\n\t\t\t\targuments[0].forEach(function(params, i) {\n\t\t\t\t\tarr.push( Object.create(prototype) );\n\t\t\t\t\tc = constructor.call( arr[i], params );\n\t\t\t\t\tif ( useConstructed ) {\n\t\t\t\t\t\tarr[i] = c;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t} else {\n\t\t\t\tarr.push( Object.create(prototype) );\n\t\t\t\tc = constructor.apply( arr[0], arguments );\n\t\t\t\tif ( useConstructed ) {\n\t\t\t\t\tarr[0] = c;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new Collection( arr );\n\t\t}\n\t};\n}\n\nvar rconstructor = /(^|\\.)[A-Z][A-z]+$/;\nfunction constructorFilter( name ) {\n\treturn typeof this[name] === 'function' && rconstructor.test(name);\n}\n\n// unwrap a collection or array of collection\nfunction unwrapArg( arr, id, isPlural ) {\n\t// unwrap a single collection\n\tif ( arr && arr[id] instanceof Collection ) {\n\t\tarr[id] = isPlural ?\n\t\t\t[].slice.call( arr[id], 0 ) :\n\t\t\tarr[id][0];\n\n\t// unwrap an array of collection\n\t} else if ( arr && arr[id].length && arr[id][0] instanceof Collection ) {\n\t\tfor ( var i = -1; ++i < arr[id].length; ) {\n\t\t\tarr[id][i] = arr[id][i][0];\n\t\t}\n\t}\n}\n\nfunction unwrapArgs() {\n\tvar isPlural = this.isPlural,\n\t\targs = [].slice.call( arguments, 0 ),\n\t\tid,\n\t\ti;\n\n\t// first arg is an object and might have a collection or array of collection\n\t// Todo: objects should be unwrapped recursively\n\tif ( args[0] && args[0].constructor === Object ) {\n\t\tif ( 'children' in args[0] ) {\n\t\t\tid = 'children';\n\n\t\t} else if ( 'segments' in args[0] ) {\n\t\t\tid = 'segments';\n\n\t\t} else if ( 'nodes' in args[0] ) {\n\t\t\tid = 'nodes';\n\t\t}\n\n\t\tunwrapArg( args[0], id, true );\n\n\t// otherwise unwrap each arg\n\t} else {\n\t\tfor ( i = -1; ++i < args.length; ) {\n\t\t\t// if the method is plural (addChildren) and we're unwrapping\n\t\t\t// the last argument, we want to keep it in an array\n\t\t\tunwrapArg( args, i, i === args.length - 1 && isPlural );\n\t\t}\n\t}\n\n\treturn args;\n}\n\nCollection.proxy = function( paper ) {\n\tvar plumin = this;\n\n\tplumin.paper = paper;\n\n\tvar methodNames = {};\n\tObject.getOwnPropertyNames( paper.PaperScope.prototype )\n\t\t.filter( constructorFilter, paper.PaperScope.prototype )\n\t\t.forEach(function(name) {\n\t\t\tplumin[name] = wrapConstructor( this[name], this[name].prototype );\n\n\t\t\t// we don't want to proxy methods of Collection\n\t\t\tif ( name === 'Collection' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tObject.getOwnPropertyNames( this[name].prototype )\n\t\t\t\t.forEach(function(_name) {\n\t\t\t\t\t// collect unique method names (first test avoids getters)\n\t\t\t\t\tif ( !Object.getOwnPropertyDescriptor(this, _name).get &&\n\t\t\t\t\t\t\ttypeof this[_name] === 'function' ) {\n\n\t\t\t\t\t\tmethodNames[_name] = true;\n\t\t\t\t\t}\n\n\t\t\t\t}, this[name].prototype);\n\n\t\t}, paper.PaperScope.prototype);\n\n\tObject.keys( paper.PaperScope.prototype.Path )\n\t\t.filter( constructorFilter, paper.PaperScope.prototype.Path )\n\t\t.forEach(function(name) {\n\t\t\tplumin.Path[name] = wrapConstructor(\n\t\t\t\tthis[name], this.prototype, true\n\t\t\t);\n\n\t\t}, paper.PaperScope.prototype.Path );\n\n\tObject.keys( paper.PaperScope.prototype.Shape )\n\t\t.filter( constructorFilter, paper.PaperScope.prototype.Shape )\n\t\t.forEach(function(name) {\n\t\t\tplumin.Shape[name] = wrapConstructor(\n\t\t\t\tthis[name], this.prototype, true\n\t\t\t);\n\n\t\t}, paper.PaperScope.prototype.Shape );\n\n\t// proxy the most commonly used method of paper\n\t// do it only after proxying constructors otherwise it's overwritten\n\tplumin.setup = paper.setup.bind(paper);\n\n\t// proxy all methods from every constructor\n\t// by default methods aren't chainable\n\tObject.keys( methodNames ).sort().forEach(function(name) {\n\t\t// please oh please, don't overwrite my constructor, I need it.\n\t\tif ( name === 'constructor' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tCollection.prototype[name] = function() {\n\t\t\tvar args = unwrapArgs.apply(null, arguments),\n\t\t\t\ti,\n\t\t\t\tresult;\n\n\t\t\tfor ( i = -1; ++i < this.length; ) {\n\t\t\t\tresult = this[i][name].apply(this[i], args);\n\t\t\t}\n\n\t\t\t// by default methods aren't chainable\n\t\t\t// return the last result\n\t\t\treturn result;\n\t\t};\n\t});\n\n\t\t// addChild( item ) and other methods with similar signatures\n\t\t// that we want to make chainable\n\tvar chain = [\n\t\t\t'set',\n\t\t\t'setX',\n\t\t\t'setY',\n\t\t\t'insertAbove',\n\t\t\t'insertBelow',\n\t\t\t'sendToBack',\n\t\t\t'bringToFront',\n\t\t\t'remove',\n\t\t\t'removeChildren',\n\t\t\t'reverseChildren',\n\n\t\t\t'translate',\n\t\t\t'rotate',\n\t\t\t'scale',\n\t\t\t'shear',\n\t\t\t'skew',\n\t\t\t'transform',\n\t\t\t'fitBounds',\n\t\t\t'emit',\n\n\t\t\t'activate',\n\n\t\t\t'setPixel',\n\n\t\t\t'smooth',\n\t\t\t'moveTo',\n\t\t\t'lineTo',\n\t\t\t'cubicCurveTo',\n\t\t\t'quadraticCurveTo',\n\t\t\t'curveTo',\n\t\t\t'arcTo',\n\t\t\t'closePath',\n\t\t\t'moveBy',\n\t\t\t'lineBy',\n\t\t\t'cubicCurveBy',\n\t\t\t'quadraticCurveBy',\n\t\t\t'curveBy',\n\t\t\t'arcBy',\n\n\t\t\t'removeSegments',\n\t\t\t'simplify',\n\t\t\t'reverse',\n\n\t\t\t// Rectangle\n\t\t\t'include',\n\t\t\t'expand',\n\t\t\t'scale',\n\t\t// ],\n\t\t// createAndChain = [\n\t\t\t'addChild',\n\t\t\t'insertChild',\n\t\t\t'addChildren',\n\t\t\t'insertChildren',\n\t\t\t'replaceWith',\n\n\t\t\t'appendTop',\n\t\t\t'appendBottom',\n\n\t\t\t'add',\n\t\t\t'insert',\n\t\t\t'addSegments',\n\t\t\t'insertSegments',\n\t\t\t'addNode',\n\t\t\t'addNodes',\n\t\t\t'insertNodes',\n\n\t\t\t'addGlyph',\n\t\t\t'addGlyphs',\n\n\t\t\t'addContour',\n\t\t\t'insertContour',\n\t\t\t'addContours',\n\t\t\t'insertContours',\n\t\t\t'addAnchor',\n\t\t\t'addAnchors',\n\t\t\t'addComponent',\n\t\t\t'addComponents',\n\n\t\t\t'addUnicode',\n\t\t\t'prepareOt',\n\t\t\t'addToFonts',\n\t\t\t'download'\n\t\t],\n\t\tplural = [\n\t\t\t'addChildren',\n\t\t\t'insertChildren',\n\t\t\t'addSegments',\n\t\t\t'insertSegments',\n\t\t\t'addNodes',\n\t\t\t'insertNodes',\n\t\t\t'addGlyphs',\n\t\t\t'addAnchors',\n\t\t\t'addContours',\n\t\t\t'insertContours',\n\t\t\t'addComponents'\n\t\t]/*,\n\t\tmathPoinFn = [\n\t\t\t'round',\n\t\t\t'ceil',\n\t\t\t'floor',\n\t\t\t'abs'\n\t\t],\n\t\tbooleanPathOp = [\n\t\t\t'unite',\n\t\t\t'intersect',\n\t\t\t'subtract',\n\t\t\t'exclude',\n\t\t\t'divide'\n\t\t]*/;\n\n\tchain.forEach(function(name) {\n\t\tCollection.prototype[name] = function() {\n\t\t\tvar args = unwrapArgs.apply(\n\t\t\t\t\t{ isPlural: plural.indexOf(name) !== -1 },\n\t\t\t\t\targuments\n\t\t\t\t),\n\t\t\t\ti;\n\n\t\t\tfor ( i = -1; ++i < this.length; ) {\n\t\t\t\tthis[i][name].apply(this[i], args);\n\t\t\t}\n\n\t\t\t// make method chainable\n\t\t\treturn this;\n\t\t};\n\t});\n\n\t// singular chainable method\n};\n\nmodule.exports = Collection;\n","var opentype = require('../node_modules/opentype.js/dist/opentype.js'),\n\tpaper = require('../node_modules/paper/dist/paper-core.js'),\n\tGlyph = require('./Glyph.js');\n\nfunction Font( args ) {\n\tpaper.Group.prototype.constructor.apply( this );\n\n\tif ( !args ) {\n\t\targs = {};\n\t}\n\n\tif ( !args.styleName ) {\n\t\targs.styleName = 'Regular';\n\t}\n\n\tif ( !args.unitsPerEm ) {\n\t\targs.unitsPerEm = 1024;\n\t}\n\n\tthis.fontinfo = this.ot = new opentype.Font( args );\n\n\tthis.glyphMap = {};\n\tthis.charMap = {};\n\tthis.altMap = {};\n\tthis._subset = false;\n\n\tthis.addGlyph(new Glyph({\n\t\tname: '.notdef',\n\t\tunicode: 0\n\t}));\n\n\tif ( args && args.glyphs ) {\n\t\tthis.addGlyphs( args.glyphs );\n\t}\n\n\tif ( typeof window === 'object' && window.document ) {\n\t\t// work around https://bugzilla.mozilla.org/show_bug.cgi?id=1100005\n\t\t// by using fonts.delete in batch, every 1 second\n\t\tif ( document.fonts ) {\n\t\t\tthis.addedFonts = [];\n\n\t\t\tsetInterval(function() {\n\t\t\t\twhile ( this.addedFonts.length > 1 ) {\n\t\t\t\t\tdocument.fonts.delete( this.addedFonts.shift() );\n\t\t\t\t}\n\t\t\t}.bind(this), 1000);\n\n\t\t} else {\n\t\t\tdocument.head.appendChild(\n\t\t\t\tthis.styleElement = document.createElement('style')\n\t\t\t);\n\t\t\t// let's find the corresponding CSSStyleSheet\n\t\t\t// (would be much easier with Array#find)\n\t\t\tthis.styleSheet = document.styleSheets[\n\t\t\t\t[].map.call(document.styleSheets, function(ss) {\n\t\t\t\t\treturn ss.ownerNode;\n\t\t\t\t}).indexOf(this.styleElement)\n\t\t\t];\n\t\t}\n\t}\n}\n\nFont.prototype = Object.create(paper.Group.prototype);\nFont.prototype.constructor = Font;\n\n// proxy .glyphs to .children\n// TODO: handle unicode updates\nObject.defineProperty(\n\tFont.prototype,\n\t'glyphs',\n\tObject.getOwnPropertyDescriptor( paper.Item.prototype, 'children' )\n);\n\n// TODO: proper proxying of ...Glyph[s] methods to ...Child[ren] methods\n// see Glyph.js\nFont.prototype.addGlyph = function( glyph ) {\n\tthis.addChild( glyph );\n\tthis.glyphMap[glyph.name] = glyph;\n\n\tif ( glyph.ot.unicode === undefined ) {\n\t\treturn glyph;\n\t}\n\n\t// build the default cmap\n\t// if multiple glyphs share the same unicode, use the glyph where unicode\n\t// and name are equal\n\tif ( !this.charMap[glyph.ot.unicode] ||\n\t\t\t( glyph.name.length === 1 &&\n\t\t\t\tglyph.name.charCodeAt(0) === glyph.ot.unicode ) ) {\n\n\t\tthis.charMap[glyph.ot.unicode] = glyph;\n\t}\n\n\t// build the alternates map\n\tif ( !this.altMap[glyph.ot.unicode] ) {\n\t\tthis.altMap[glyph.ot.unicode] = [];\n\t}\n\tthis.altMap[glyph.ot.unicode].push( glyph );\n\n\t// invalidate glyph subset cache\n\t// TODO: switch to immutable.js to avoid this maddness\n\tthis._lastSubset = undefined;\n\n\treturn glyph;\n};\n\nFont.prototype.addGlyphs = function( glyphs ) {\n\treturn glyphs.forEach(function( glyph ) {\n\t\tthis.addGlyph(glyph);\n\n\t}, this);\n};\n\nObject.defineProperty( Font.prototype, 'subset', {\n\tget: function() {\n\t\tif ( !this._subset ) {\n\t\t\tthis._subset = this.normalizeSubset( false );\n\t\t}\n\t\treturn this._subset;\n\t},\n\tset: function( set ) {\n\t\tthis._subset = this.normalizeSubset( set );\n\t}\n});\n\nFont.prototype.normalizeSubset = function( _set ) {\n\tvar set;\n\n\t// two cases where _set isn't an array\n\t// false set = all glyphs in the charMap\n\tif ( _set === false ) {\n\t\tset = Object.keys( this.charMap ).map(function( unicode ) {\n\t\t\treturn this.charMap[unicode];\n\t\t}.bind(this));\n\n\t// convert string to array of chars\n\t} else if ( typeof _set === 'string' ) {\n\t\tset = _set.split('').map(function(e) {\n\t\t\treturn e.charCodeAt(0);\n\t\t});\n\n\t} else {\n\t\tset = _set;\n\t}\n\n\t// convert array of number to array of glyphs\n\tif ( Array.isArray( set ) && typeof set[0] === 'number' ) {\n\t\tset = set.map(function( unicode ) {\n\t\t\treturn this.charMap[ unicode ];\n\t\t}.bind(this));\n\t}\n\n\t// always include .undef\n\tif ( set.indexOf( this.glyphMap['.notdef'] ) === -1 ) {\n\t\tset.unshift( this.glyphMap['.notdef'] );\n\t}\n\n\t// remove undefined glyphs and dedupe the set\n\treturn set.filter(function(e, i, arr) {\n\t\treturn e && arr.lastIndexOf(e) === i;\n\t});\n};\n\nFont.prototype.getGlyphSubset = function( _set ) {\n\treturn _set !== undefined ? this.normalizeSubset( _set ) : this.subset;\n};\n\nFont.prototype.setAlternateFor = function( unicode, glyphName ) {\n\tthis.charMap[ unicode ] = this.glyphMap[ glyphName ];\n};\n\nFont.prototype.interpolate = function( font0, font1, coef, set ) {\n\tthis.getGlyphSubset( set ).map(function( glyph ) {\n\t\tglyph.interpolate(\n\t\t\tfont0.glyphMap[glyph.name],\n\t\t\tfont1.glyphMap[glyph.name],\n\t\t\tcoef\n\t\t);\n\t});\n\n\t// TODO: evaluate if taking subsetting into account makes kerning\n\t// interpolation faster or slower.\n\tif ( this.ot.kerningPairs ) {\n\t\tfor ( var i in this.ot.kerningPairs ) {\n\t\t\tthis.ot.kerningPairs[i] =\n\t\t\t\tfont0.ot.kerningPairs[i] +\n\t\t\t\t( font1.ot.kerningPairs[i] - font0.ot.kerningPairs[i] ) * coef;\n\t\t}\n\t}\n\n\tthis.ot.ascender =\n\t\tfont0.ot.ascender + ( font1.ot.ascender - font0.ot.ascender ) * coef;\n\tthis.ot.descender =\n\t\tfont0.ot.descender + ( font1.ot.descender - font0.ot.descender ) * coef;\n\n\treturn this;\n};\n\nFont.prototype.updateSVGData = function( set ) {\n\tthis.getGlyphSubset( set ).map(function( glyph ) {\n\t\treturn glyph.updateSVGData();\n\t});\n\n\treturn this;\n};\n\nFont.prototype.updateOTCommands = function( set, united ) {\n\tthis.ot.glyphs = this.getGlyphSubset( set ).map(function( glyph ) {\n\t\treturn glyph.updateOTCommands( null, united);\n\t});\n\n\treturn this;\n};\n\nFont.prototype.importOT = function( otFont ) {\n\tthis.ot = otFont;\n\n\totFont.glyphs.forEach(function( otGlyph ) {\n\t\tvar glyph = new Glyph({\n\t\t\t\tname: otGlyph.name,\n\t\t\t\tunicode: otGlyph.unicode\n\t\t\t});\n\n\t\tthis.addGlyph( glyph );\n\t\tglyph.importOT( otGlyph );\n\n\t}, this);\n\n\treturn this;\n};\n\nif ( typeof window === 'object' && window.document ) {\n\n\tvar _URL = window.URL || window.webkitURL;\n\tFont.prototype.addToFonts = document.fonts ?\n\t\t// CSS font loading, lightning fast\n\t\tfunction( buffer ) {\n\t\t\tvar fontface = new window.FontFace(\n\t\t\t\tthis.ot.familyName,\n\t\t\t\tbuffer || this.ot.toBuffer()\n\t\t\t);\n\n\t\t\tdocument.fonts.add( fontface );\n\t\t\tthis.addedFonts.push( fontface );\n\n\t\t\treturn this;\n\t\t} :\n\t\tfunction( buffer ) {\n\t\t\tvar url = _URL.createObjectURL(\n\t\t\t\t\tnew Blob(\n\t\t\t\t\t\t[ new DataView( buffer || this.ot.toBuffer() ) ],\n\t\t\t\t\t\t{ type: 'font/opentype' }\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\tif ( this.fontObjectURL ) {\n\t\t\t\t_URL.revokeObjectURL( this.fontObjectURL );\n\t\t\t\tthis.styleSheet.deleteRule(0);\n\t\t\t}\n\n\t\t\tthis.styleSheet.insertRule(\n\t\t\t\t'@font-face { font-family: \"' + this.ot.familyName + '\";' +\n\t\t\t\t'src: url(' + url + '); }',\n\t\t\t\t0\n\t\t\t);\n\t\t\tthis.fontObjectURL = url;\n\n\t\t\treturn this;\n\t\t};\n\n\tvar a = document.createElement('a');\n\tFont.prototype.download = function( buffer ) {\n\t\tvar reader = new FileReader(),\n\t\t\tfamilyName = this.ot.familyName;\n\n\t\treader.onloadend = function() {\n\t\t\ta.download = familyName + '.otf';\n\t\t\ta.href = reader.result;\n\t\t\ta.dispatchEvent(new MouseEvent('click'));\n\n\t\t\tsetTimeout(function() {\n\t\t\t\ta.href = '#';\n\t\t\t\t_URL.revokeObjectURL( reader.result );\n\t\t\t}, 100);\n\t\t};\n\n\t\treader.readAsDataURL(new Blob(\n\t\t\t[ new DataView( buffer || this.ot.toBuffer() ) ],\n\t\t\t{ type: 'font/opentype' }\n\t\t));\n\n\t\treturn this;\n\t};\n\n}\n\nmodule.exports = Font;\n","var opentype = require('../node_modules/opentype.js/dist/opentype.js'),\n\tpaper = require('../node_modules/paper/dist/paper-core.js'),\n\tOutline = require('./Outline.js'),\n\tclipper = require('../node_modules/jsclipper/clipper_unminified.js');\n\nfunction Glyph( args ) {\n\tpaper.Group.prototype.constructor.apply( this );\n\n\tif ( args && typeof args.unicode === 'string' ) {\n\t\targs.unicode = args.unicode.charCodeAt(0);\n\t}\n\n\tthis.ot = new opentype.Glyph( args );\n\tthis.ot.path = new opentype.Path();\n\n\tthis.name = args.name;\n\t// workaround opentype 'unicode === 0' bug\n\tthis.ot.unicode = args.unicode;\n\n\tthis.addChild( new Outline() );\n\t// the second child will hold all components\n\tthis.addChild( new paper.Group() );\n\t// Should all anchors and parentAnchors also leave in child groups?\n\tthis.anchors = ( args && args.anchors ) || [];\n\tthis.parentAnchors = ( args && args.parentAnchors ) || [];\n\n\t// each individual glyph must be explicitely made visible\n\tthis.visible = false;\n\t// default colors required to display the glyph in a canvas\n\tthis.fillColor = new paper.Color(0, 0, 0);\n\t// stroke won't be displayed unless strokeWidth is set to 1\n\tthis.strokeColor = new paper.Color(0, 0, 0);\n\tthis.strokeScaling = false;\n}\n\nGlyph.prototype = Object.create(paper.Group.prototype);\nGlyph.prototype.constructor = Glyph;\n\n// Todo: handle unicode updates\nObject.defineProperty(Glyph.prototype, 'unicode', {\n\tset: function( code ) {\n\t\tthis.ot.unicode = typeof code === 'string' ?\n\t\t\tcode.charCodeAt(0) :\n\t\t\tcode;\n\t},\n\tget: function() {\n\t\treturn this.ot.unicode;\n\t}\n});\n\n// proxy .contours to .children[0]\nObject.defineProperty( Glyph.prototype, 'contours', {\n\tget: function() {\n\t\treturn this.children[0].children;\n\t}\n});\n\n// proxy .components to .children[1]\nObject.defineProperty( Glyph.prototype, 'components', {\n\tget: function() {\n\t\treturn this.children[1].children;\n\t}\n});\n\n// proxy .visible to\n\n// proxy ...Contour[s] methods to children[0]...Child[ren] methods\n// and proxy ...Component[s] methods to children[1]...Child[ren] methods\nObject.getOwnPropertyNames( paper.Item.prototype ).forEach(function(name) {\n\tvar proto = this;\n\n\t// exclude getters and non-methods\n\tif ( Object.getOwnPropertyDescriptor(proto, name).get ||\n\t\t\ttypeof proto[name] !== 'function' ) {\n\t\treturn;\n\t}\n\n\tif ( name.indexOf('Children') !== -1 ) {\n\t\tproto[name.replace('Children', 'Contours')] = function() {\n\t\t\tproto[name].apply( this.children[0], arguments );\n\t\t};\n\n\t\tproto[name.replace('Children', 'Components')] = function() {\n\t\t\tproto[name].apply( this.children[1], arguments );\n\t\t};\n\n\t} else if ( name.indexOf('Child') !== -1 ) {\n\t\tproto[name.replace('Child', 'Contour')] = function() {\n\t\t\tproto[name].apply( this.children[0], arguments );\n\t\t};\n\n\t\tproto[name.replace('Child', 'Component')] = function() {\n\t\t\tproto[name].apply( this.children[1], arguments );\n\t\t};\n\t}\n\n}, paper.Item.prototype);\n\nGlyph.prototype.addAnchor = function( item ) {\n\tthis.anchors.push( item );\n\treturn item;\n};\n\nGlyph.prototype.addAnchors = function( anchors ) {\n\treturn anchors.forEach(function(anchor) {\n\t\tthis.addAnchor(anchor);\n\t}, this);\n};\n\nGlyph.prototype.addParentAnchor = function( item ) {\n\tthis.parentAnchors.push( item );\n\treturn item;\n};\n\nGlyph.prototype.addUnicode = function( code ) {\n\tthis.ot.addUnicode( code );\n\n\treturn this;\n};\n\nGlyph.prototype.interpolate = function( glyph0, glyph1, coef ) {\n\t// If we added an interpolate method to Group, we'd be able to just\n\t// interpolate all this.children directly.\n\t// instead we interpolate the outline first\n\tthis.children[0].interpolate( glyph0.children[0], glyph1.children[0] );\n\t// and then the components\n\tthis.children[1].children.forEach(function(component, j) {\n\t\tcomponent.interpolate(\n\t\t\tglyph0.children[1].children[j], glyph1.children[1].children[j], coef\n\t\t);\n\t});\n\n\tthis.ot.advanceWidth =\n\t\tglyph0.ot.advanceWidth +\n\t\t( glyph1.ot.advanceWidth - glyph0.ot.advanceWidth ) * coef;\n\tthis.ot.leftSideBearing =\n\t\tglyph0.ot.leftSideBearing +\n\t\t( glyph1.ot.leftSideBearing - glyph0.ot.leftSideBearing ) * coef;\n\tthis.ot.xMax =\n\t\tglyph0.ot.xMax + ( glyph1.ot.xMax - glyph0.ot.xMax ) * coef;\n\tthis.ot.xMin =\n\t\tglyph0.ot.xMin + ( glyph1.ot.xMin - glyph0.ot.xMin ) * coef;\n\tthis.ot.yMax =\n\t\tglyph0.ot.yMax + ( glyph1.ot.yMax - glyph0.ot.yMax ) * coef;\n\tthis.ot.yMin =\n\t\tglyph0.ot.yMin + ( glyph1.ot.yMin - glyph0.ot.yMin ) * coef;\n\n\treturn this;\n};\n\nGlyph.prototype.updateSVGData = function( path ) {\n\tif ( !path ) {\n\t\tthis.svgData = [];\n\t\tpath = this.svgData;\n\t}\n\n\tthis.children[0].updateSVGData( path );\n\n\tthis.children[1].children.forEach(function( component ) {\n\t\tcomponent.updateSVGData( path );\n\t});\n\n\treturn this.svgData;\n};\n\nGlyph.prototype.updateOTCommands = function( path, united ) {\n\tif ( !path ) {\n\t\tthis.ot.path.commands = [];\n\t\tpath = this.ot.path;\n\t}\n\n/* eslint-disable */\n\tif ( united ) {\n\n\t\tvar c = new clipper.Clipper();\n\t\tc.StriclySimple = true;\n\t\tvar solution = new clipper.Paths();\n\n\t\tvar solution = this.getPaths( solution );\n\n\t\tif ( solution.length > 0 ) {\n\t\t\tsolution = clipper.Clipper.CleanPolygons( solution, 0.1 );\n\t\t\tsolution = clipper\n\t\t\t\t.Clipper\n\t\t\t\t.SimplifyPolygons( solution, clipper.PolyFillType.pftNonZero );\n\n\t\t\tvar unionedPath = new Outline();\n\t\t\tsolution.forEach(function( path ) {\n\t\t\t\tvar constructedPath = new paper.Path();\n\n\t\t\t\tpath.forEach(function( point ) {\n\t\t\t\t\tconstructedPath.add( new paper.Point(point.X, point.Y ) );\n\t\t\t\t});\n\n\t\t\t\tunionedPath.addChild( constructedPath );\n\t\t\t});\n\n\t\t\tunionedPath.isPrepared = true;\n\n\t\t\tunionedPath.updateOTCommands( path );\n\t\t}\n\t} else {\n\n\t\tthis.children[0].updateOTCommands( path );\n\n\t\tthis.children[1].children.forEach(function( component ) {\n\t\t\tcomponent.updateOTCommands( path );\n\t\t});\n\n\t}\n/* eslint-enable */\n\n\treturn this.ot;\n};\n\nGlyph.prototype.getPaths = function( solution ) {\n\n\tsolution = this.children[0].getPaths( solution );\n\n\tthis.children[1].children.forEach(function( component ) {\n\t\tsolution = component.getPaths( solution );\n\t});\n\n\treturn solution;\n};\n\nGlyph.prototype.importOT = function( otGlyph ) {\n\tvar current;\n\tthis.ot = otGlyph;\n\n\tif ( !otGlyph.path || !otGlyph.path.commands ) {\n\t\treturn this;\n\t}\n\n\tthis.ot.path.commands.forEach(function(command) {\n\t\tswitch ( command.type ) {\n\t\t\tcase 'M':\n\t\t\t\tcurrent = new paper.Path();\n\t\t\t\tthis.addContour( current );\n\n\t\t\t\tcurrent.moveTo( command );\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tcurrent.lineTo( command );\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\t\tcurrent.cubicCurveTo(\n\t\t\t\t\t[ command.x1, command.y1 ],\n\t\t\t\t\t[ command.x2, command.y2 ],\n\t\t\t\t\tcommand\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'Q':\n\t\t\t\tcurrent.quadraticCurveTo(\n\t\t\t\t\t[ command.x1, command.y1 ],\n\t\t\t\t\tcommand\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'Z':\n\t\t\t\t// When the glyph has no contour,\n\t\t\t\t// they contain a single Z command in\n\t\t\t\t// opentype.js.\n\t\t\t\t// TODO: see how we should handle that\n\t\t\t\tif ( current ) {\n\t\t\t\t\tcurrent.closePath();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}, this);\n\n\treturn this;\n};\n\nmodule.exports = Glyph;\n","var paper = require('../node_modules/paper/dist/paper-core.js');\n\nObject.defineProperty( paper.Segment.prototype, 'x', {\n\tget: function() {\n\t\treturn this.point.x;\n\t},\n\tset: function( value ) {\n\t\tthis.point.x = value;\n\t}\n});\n\nObject.defineProperty( paper.Segment.prototype, 'y', {\n\tget: function() {\n\t\treturn this.point.y;\n\t},\n\tset: function( value ) {\n\t\tthis.point.y = value;\n\t}\n});\n\nmodule.exports = paper.Segment;\n","var paper = require('../node_modules/paper/dist/paper-core.js');\n\nfunction Outline() {\n\tpaper.CompoundPath.prototype.constructor.apply( this );\n}\n\n// inehrit CompoundPath\nOutline.prototype = Object.create(paper.CompoundPath.prototype);\nOutline.prototype.constructor = Outline;\n\n// Fix two problems with CompoundPath#insertChildren:\n// - it arbitrarily changes the direction of paths\n// - it seems that it doesn't handle CompoundPath arguments\nOutline.prototype.insertChildren = function(index, items, _preserve) {\n\tif ( Array.isArray( items ) ) {\n\t\t// flatten items to handle CompoundPath children\n\t\titems = [].concat.apply([], items.map(function(item) {\n\t\t\treturn item instanceof paper.Path ? item : item.children;\n\t\t}));\n\t}\n\n\treturn paper.Item.prototype.insertChildren.call(\n\t\tthis, index, items, _preserve, paper.Path\n\t);\n};\n\nOutline.fromPath = function( path ) {\n\tvar result = new Outline();\n\treturn path._clone( result, false );\n};\n\nOutline.prototype.interpolate = function( outline0, outline1, coef ) {\n\tfor (var i = 0, l = this.contours.length; i < l; i++) {\n\t\t// The number of children should be the same everywhere,\n\t\t// but we're going to try our best anyway\n\t\tif ( !outline0.children[i] || !outline1.children[i] ) {\n\t\t\tbreak;\n\t\t}\n\n\t\tthis.children[i].interpolate(\n\t\t\toutline0.children[i],\n\t\t\toutline1.children[i],\n\t\t\tcoef\n\t\t);\n\t}\n\n\treturn this;\n};\n\nOutline.prototype.updateSVGData = function( path ) {\n\tif ( !path ) {\n\t\tthis.svgData = [];\n\t\tpath = this.svgData;\n\t}\n\n\tthis.children.forEach(function( contour ) {\n\t\tcontour.updateSVGData( path, contour.globalMatrix );\n\t}, this);\n\n\treturn this.svgData;\n};\n\nOutline.prototype.updateOTCommands = function( path ) {\n\tif ( !path ) {\n\t\tthis.ot.path.commands = [];\n\t\tpath = this.ot.path;\n\t}\n\n\tthis.children.forEach(function( contour ) {\n\t\tcontour.updateOTCommands( path, contour.globalMatrix );\n\t}, this);\n\n\treturn this.ot;\n};\n\nOutline.prototype.getPaths = function( solution ) {\n\tthis.children.forEach(function( contour ) {\n\t\tif ( contour.expandedFrom ) {\n\t\t\treturn solution;\n\t\t}\n\n\t\tif ( contour.skeleton !== true ) {\n\t\t\tsolution = contour.getPath( solution, contour.globalMatrix );\n\t\t} else if ( !contour.expandedTo[1] ) {\n\t\t\tsolution = contour\n\t\t\t\t.expandedTo[0]\n\t\t\t\t.getPath( solution, contour.globalMatrix );\n\t\t} else {\n\t\t\tsolution.push(\n\t\t\t\tcontour.expandedTo[0]\n\t\t\t\t\t.getSimplePath( null, contour.globalMatrix ) );\n\t\t\tsolution.push(\n\t\t\t\tcontour.expandedTo[1]\n\t\t\t\t\t.getSimplePath( null, contour.globalMatrix ) );\n\t\t}\n\t});\n\n\treturn solution;\n};\n\nmodule.exports = Outline;\n","/* Extend the Path prototype to add OpenType conversion\n * and alias *segments methods and properties to *nodes\n */\nvar paper = require('../node_modules/paper/dist/paper-core.js'),\n\tclipper = require('../node_modules/jsclipper/clipper_unminified.js');\n\nvar proto = paper.PaperScope.prototype.Path.prototype;\n\n// alias *Segments methods to *Nodes equivalents\n[ 'add', 'insert', 'remove' ].forEach(function(name) {\n\tproto[name + 'Nodes'] =\n\t\tproto[name + 'Segments'];\n});\n\n// alias .segments to .nodes\nObject.defineProperties(proto, {\n\tnodes: Object.getOwnPropertyDescriptor( proto, 'segments' ),\n\tfirstNode: Object.getOwnPropertyDescriptor( proto, 'firstSegment' ),\n\tlastNode: Object.getOwnPropertyDescriptor( proto, 'lastSegment' )\n});\n\nproto._updateData = function( data, matrix, pushSimple, pushBezier ) {\n\tif ( this.visible === false || this.curves.length === 0) {\n\t\treturn data;\n\t}\n\n\t// prototypo needs to be able to change the direction of the updated data.\n\tvar reverse = this.exportReversed,\n\t\tcurves = this.curves,\n\t\tstart = curves[ reverse ? curves.length - 1 : 0 ]\n\t\t\t[ 'point' + ( reverse ? 2 : 1 ) ]\n\t\t\t.transform( matrix );\n\n\tpushSimple(\n\t\t'M',\n\t\tMath.round( start.x ) || 0,\n\t\tMath.round( start.y ) || 0\n\t);\n\n\tfor ( var i = -1, l = curves.length; ++i < l; ) {\n\t\tvar curve = curves[ reverse ? l - 1 - i : i ],\n\t\t\tend = curve['point' + ( reverse ? 1 : 2 ) ].transform( matrix );\n\n\t\tif ( curve.isLinear() ) {\n\t\t\tpushSimple(\n\t\t\t\t'L',\n\t\t\t\tMath.round( end.x ) || 0,\n\t\t\t\tMath.round( end.y ) || 0\n\t\t\t);\n\n\t\t} else {\n\t\t\tvar ctrl1 = new paper.Point(\n\t\t\t\t\tcurve.point1.x + curve.handle1.x,\n\t\t\t\t\tcurve.point1.y + curve.handle1.y\n\t\t\t\t).transform( matrix ),\n\t\t\t\tctrl2 = new paper.Point(\n\t\t\t\t\tcurve.point2.x + curve.handle2.x,\n\t\t\t\t\tcurve.point2.y + curve.handle2.y\n\t\t\t\t).transform( matrix );\n\n\t\t\tif ( reverse ) {\n\t\t\t\tpushBezier(\n\t\t\t\t\t'C',\n\t\t\t\t\tMath.round( ctrl2.x ) || 0,\n\t\t\t\t\tMath.round( ctrl2.y ) || 0,\n\t\t\t\t\tMath.round( ctrl1.x ) || 0,\n\t\t\t\t\tMath.round( ctrl1.y ) || 0,\n\t\t\t\t\tMath.round( end.x ) || 0,\n\t\t\t\t\tMath.round( end.y ) || 0\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpushBezier(\n\t\t\t\t\t'C',\n\t\t\t\t\tMath.round( ctrl1.x ) || 0,\n\t\t\t\t\tMath.round( ctrl1.y ) || 0,\n\t\t\t\t\tMath.round( ctrl2.x ) || 0,\n\t\t\t\t\tMath.round( ctrl2.y ) || 0,\n\t\t\t\t\tMath.round( end.x ) || 0,\n\t\t\t\t\tMath.round( end.y ) || 0\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( this.closed ) {\n\t\tpushSimple('Z');\n\t}\n\n\treturn data;\n};\n\nproto.updateOTCommands = function( data, matrix ) {\n\treturn this._updateData(\n\t\tdata,\n\t\tmatrix,\n\t\tfunction pushSimple() {\n\t\t\tdata.commands.push({\n\t\t\t\ttype: arguments[0],\n\t\t\t\tx: arguments[1],\n\t\t\t\ty: arguments[2]\n\t\t\t});\n\t\t},\n\t\tfunction pushBezier() {\n\t\t\tdata.commands.push({\n\t\t\t\ttype: arguments[0],\n\t\t\t\tx1: arguments[1],\n\t\t\t\ty1: arguments[2],\n\t\t\t\tx2: arguments[3],\n\t\t\t\ty2: arguments[4],\n\t\t\t\tx: arguments[5],\n\t\t\t\ty: arguments[6]\n\t\t\t});\n\t\t}\n\t);\n};\n\nproto.updateSVGData = function( data, matrix ) {\n\treturn this._updateData(\n\t\tdata,\n\t\tmatrix,\n\t\tfunction pushSimple() {\n\t\t\tdata.push.apply( data, arguments );\n\t\t},\n\t\tfunction pushBezier() {\n\t\t\tdata.push.apply( data, arguments );\n\t\t}\n\t);\n};\n\nproto.getSimplePath = function( precision, matrix ) {\n\tvar path = [],\n\t\toffset,\n\t\tlocationOnCurve;\n\t\tprecision = precision || 50;\n\n\tif ( this.visible === false ) {\n\t\t\treturn path;\n\t}\n\n\tif ( this.exportReversed ) {\n\t\tfor (var i = this.curves.length - 1; i >= 0; i--) {\n\t\t\tvar point2 = this.curves[i].point2.transform( matrix );\n\t\t\tpath.push( { X: point2.x, Y: point2.y } );\n\t\t\tfor (var j = precision - 1; j > 0; j--) {\n\t\t\t\toffset = j / precision;\n\n\t\t\t\tlocationOnCurve = this.curves[i]\n\t\t\t\t\t.getLocationAt( offset, true ).point.transform( matrix );\n\t\t\t\tpath.push( { X: locationOnCurve.x, Y: locationOnCurve.y } );\n\t\t\t}\n\t\t}\n\t} else {\n\t\tthis.curves.forEach( function( item ) {\n\t\t\tvar point1 = item.point1.transform( matrix );\n\t\t\tpath.push( { X: point1.x, Y: point1.y } );\n\t\t\tfor (var k = 1; k < precision; k++) {\n\t\t\t\toffset = k / precision;\n\n\t\t\t\tlocationOnCurve = item\n\t\t\t\t\t.getLocationAt( offset, true ).point.transform( matrix );\n\t\t\t\tpath.push( { X: locationOnCurve.x, Y: locationOnCurve.y } );\n\t\t\t}\n\t\t});\n\t}\n\n\treturn path;\n};\n\nproto.getPath = function( solution, matrix ) {\n/* eslint-disable */\n\tvar path = this.getSimplePath( null, matrix );\n\tvar newPathToAdd = new clipper.Paths();\n\tvar c = new clipper.Clipper();\n\tc.StriclySimple = true;\n\n\tc.AddPaths( solution, clipper.PolyType.ptSubject, true );\n\tc.AddPath( path, clipper.PolyType.ptClip, true );\n\ttry {\n\t\tc.Execute( clipper.ClipType.ctUnion,\n\t\t\tnewPathToAdd,\n\t\t\tclipper.PolyFillType.pftNonZero,\n\t\t\tclipper.PolyFillType.pftNonZero);\n\t} catch ( err ) {\n\t\tnewPathToAdd = solution;\n\t\tnewPathToAdd.push( path );\n\t}\n\n\treturn newPathToAdd;\n/* eslint-enable */\n};\n\nmodule.exports = paper.Path;\n","var opentype = require('../node_modules/opentype.js/dist/opentype.js'),\n\tpaper = require('../node_modules/paper/dist/paper-core.js'),\n\tFont = require('./Font.js'),\n\tGlyph = require('./Glyph.js'),\n\tOutline = require('./Outline'),\n\tPath = require('./Path.js'),\n\tNode = require('./Node.js'),\n\tCollection = require('./Collection.js');\n\npaper.PaperScope.prototype.Font = Font;\npaper.PaperScope.prototype.Glyph = Glyph;\npaper.PaperScope.prototype.Outline = Outline;\npaper.PaperScope.prototype.Path = Path;\npaper.PaperScope.prototype.Node = Node;\npaper.PaperScope.prototype.Collection = Collection;\n\nfunction plumin( arg ) {\n\tif ( arguments.length === 1 && arg instanceof Collection ) {\n\t\treturn arg;\n\t}\n\n\tvar c = Object.create( Collection.prototype );\n\tCollection.apply( c, arguments );\n\treturn c;\n}\n\nplumin.opentype = opentype;\n\nplumin.proxy = Collection.proxy.bind(plumin);\nplumin.proxy(paper);\n\nmodule.exports = plumin;\n"]}